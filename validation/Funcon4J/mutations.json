{"mutators":["void","null","empty","true","false","0","1","(short)0","(short)1","(byte)0","(byte)1","0L","1L","0.0","1.0","0.0f","1.0f","'\\40'","'A'","\"\"","\"A\""],"mutations":[{"detected":true,"status":"TIMED_OUT","mutator":"null","method":{"name":"anddecl","description":"()Lcamllight/parser/CLParser$AnddeclContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"constant","description":"()Lcamllight/parser/CLParser$ConstantContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"TIMED_OUT","mutator":"null","method":{"name":"declexceptionappendix","description":"()Lcamllight/parser/CLParser$DeclexceptionappendixContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declimpl","description":"()Lcamllight/parser/CLParser$DeclimplContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"decllabeltype","description":"()Lcamllight/parser/CLParser$DecllabeltypeContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declmono","description":"()Lcamllight/parser/CLParser$DeclmonoContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllight/parser/CLParser$DeclnewtypeContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"TIMED_OUT","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Lcamllight/parser/CLParser$DeclnewtypeappendixContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllight/parser/CLParser$DecloptionalvartypesContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declorexp","description":"()Lcamllight/parser/CLParser$DeclorexpContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"TIMED_OUT","mutator":"null","method":{"name":"decltypeappendix","description":"()Lcamllight/parser/CLParser$DecltypeappendixContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"emptylist","description":"()Lcamllight/parser/CLParser$EmptylistContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"exp_sempred","description":"(Lcamllight/parser/CLParser$ExpContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"exp_sempred","description":"(Lcamllight/parser/CLParser$ExpContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"exparray","description":"()Lcamllight/parser/CLParser$ExparrayContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"functionapp","description":"(I)Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"functionapp_sempred","description":"(Lcamllight/parser/CLParser$FunctionappContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"functionapp_sempred","description":"(Lcamllight/parser/CLParser$FunctionappContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllight/parser/CLParser$HeadtaillistpattContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing":["tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"letExp","description":"()Lcamllight/parser/CLParser$LetExpContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"patt_sempred","description":"(Lcamllight/parser/CLParser$PattContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"patt_sempred","description":"(Lcamllight/parser/CLParser$PattContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattlist","description":"()Lcamllight/parser/CLParser$PattlistContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"killing":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllight/parser/CLParser$PattmatchcurriedContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllight/parser/CLParser$PattmatchsingleContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"TIMED_OUT","mutator":"null","method":{"name":"patttuple","description":"()Lcamllight/parser/CLParser$PatttupleContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"prog","description":"()Lcamllight/parser/CLParser$ProgContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Lcamllight/parser/CLParser$RecanddeclContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recdecl","description":"()Lcamllight/parser/CLParser$RecdeclContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllight/parser/CLParser$RecdeclmonoContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding":[]}},{"detected":true,"status":"TIMED_OUT","mutator":"null","method":{"name":"recordpattappendix","description":"()Lcamllight/parser/CLParser$RecordpattappendixContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordsingle","description":"()Lcamllight/parser/CLParser$RecordsingleContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"TIMED_OUT","mutator":"null","method":{"name":"tupletypelist","description":"()Lcamllight/parser/CLParser$TupletypelistContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"type","description":"(I)Lcamllight/parser/CLParser$TypeContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"type_sempred","description":"(Lcamllight/parser/CLParser$TypeContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"type_sempred","description":"(Lcamllight/parser/CLParser$TypeContext;I)Z","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"varianttype","description":"()Lcamllight/parser/CLParser$VarianttypeContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vartype","description":"()Lcamllight/parser/CLParser$VartypeContext;","class":"CLParser","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$AnddeclContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ConstantContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclexceptionappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclimplContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecllabeltypeContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclmonoContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecloptionalvartypesContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declorexp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclorexpContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecltypeappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$EmptylistContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"exp_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"exp_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exparray","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExparrayContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"functionapp_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"functionapp_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$HeadtaillistpattContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"letExp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$LetExpContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"patt_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$PattContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"patt_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$PattContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattlistContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchcurriedContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchsingleContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PatttupleContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"prog","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ProgContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecanddeclContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdecl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclmonoContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordpattappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecordpattappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecordsingleContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TupletypelistContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"type_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"type_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"varianttype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$VarianttypeContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$VartypeContext;","class":"CLNoRecParser","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$AnddeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ConstantContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclexceptionappendixContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclimplContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecllabeltypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclmonoContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeappendixContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecloptionalvartypesContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declorexp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclorexpContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecltypeappendixContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$EmptylistContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"exp_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"exp_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"functionapp_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"functionapp_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$HeadtaillistpattContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"letExp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$LetExpContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"patt_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"patt_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattlistContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchcurriedContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchsingleContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PatttupleContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"prog","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ProgContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecanddeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclmonoContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TupletypelistContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"type_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"type_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"varianttype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$VarianttypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$VartypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"()Lcamllightnocollections/parser/CLNoColParser$AnddeclContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnocollections/parser/CLNoColParser$ConstantContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclexceptionappendixContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclimplContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"()Lcamllightnocollections/parser/CLNoColParser$DecllabeltypeContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclmonoContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeappendixContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnocollections/parser/CLNoColParser$DecloptionalvartypesContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declorexp","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclorexpContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"()Lcamllightnocollections/parser/CLNoColParser$DecltypeappendixContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnocollections/parser/CLNoColParser$EmptylistContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"exp_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$ExpContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"exp_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$ExpContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"(I)Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"functionapp_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"functionapp_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"letExp","description":"()Lcamllightnocollections/parser/CLNoColParser$LetExpContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"patt_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$PattContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"patt_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$PattContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchcurriedContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchsingleContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"()Lcamllightnocollections/parser/CLNoColParser$PatttupleContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"prog","description":"()Lcamllightnocollections/parser/CLNoColParser$ProgContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Lcamllightnocollections/parser/CLNoColParser$RecanddeclContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdecl","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclmonoContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"()Lcamllightnocollections/parser/CLNoColParser$TupletypelistContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(I)Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"type_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$TypeContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"type_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$TypeContext;I)Z","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"varianttype","description":"()Lcamllightnocollections/parser/CLNoColParser$VarianttypeContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Lcamllightnocollections/parser/CLNoColParser$VartypeContext;","class":"CLNoColParser","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getRegularOperator","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getRegularOperator","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getRegularOperator","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getRegularSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getRegularSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getRegularSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getSepListSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getSepListSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getSepListSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getSepListToken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getSepListToken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getSepListToken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"hasPlaceholder","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"hasPlaceholder","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isLiteral","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isLiteral","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isNonTerminal","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isNonTerminal","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isOneOrMoreSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isOneOrMoreSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isRegular","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isRegular","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isToken","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isToken","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isZeroOrMoreSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isZeroOrMoreSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"labelFor","description":"(ILjava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"labelFor","description":"(ILjava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"labelFor","description":"(ILjava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"returnVariable","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"returnVariable","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"returnVariable","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"boundType","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"clVariant","description":"(Ljava/lang/String;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"depends","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"freshToken","description":"()Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"meta","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"newType","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":2,"ordered":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"nomVal","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"nomValSelect","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"scopeNominalCoercion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tag","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"type","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"typeDef","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"typeVar","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"unknownType","description":"()Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"variantMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"boundType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"clVariant","description":"(Ljava/lang/String;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"depends","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"freshToken","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"meta","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"newType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"nomVal","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"nomValSelect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"scopeNominalCoercion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tag","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"typeDef","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"typeVar","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"unknownType","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"variantMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ConstantContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$EmptylistContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$HeadtaillistpattContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattlistContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"()Ljava/util/List;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PatttupleContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordpattappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordpattappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$RecordpattappendixContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"EMPTYARRAYTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllight/parser/CLParser$ConstantContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exparray","description":"()Lcamllight/parser/CLParser$ExparrayContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"letExp","description":"()Lcamllight/parser/CLParser$LetExpContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordsingle","description":"()Ljava/util/List;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordsingle","description":"(I)Lcamllight/parser/CLParser$RecordsingleContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$ExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllight/parser/CLParser$ConstantContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllight/parser/CLParser$EmptylistContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllight/parser/CLParser$HeadtaillistpattContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllight/parser/CLParser$PattlistContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"()Ljava/util/List;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"(I)Lcamllight/parser/CLParser$PatttupleContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordpattappendix","description":"()Ljava/util/List;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordpattappendix","description":"(I)Lcamllight/parser/CLParser$RecordpattappendixContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$PattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"EMPTYARRAYTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ConstantContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exparray","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExparrayContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"letExp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$LetExpContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordsingle","description":"()Ljava/util/List;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordsingle","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$RecordsingleContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"0","method":{"name":"compare","description":"(Lfuncons/values/Variable;Lfuncons/values/Variable;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"1","method":{"name":"compare","description":"(Lfuncons/values/Variable;Lfuncons/values/Variable;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"0","method":{"name":"compare","description":"(Lio/usethesource/vallang/IBool;Lio/usethesource/vallang/IBool;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"1","method":{"name":"compare","description":"(Lio/usethesource/vallang/IBool;Lio/usethesource/vallang/IBool;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"0","method":{"name":"compare","description":"(Lio/usethesource/vallang/IList;Lio/usethesource/vallang/IList;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"1","method":{"name":"compare","description":"(Lio/usethesource/vallang/IList;Lio/usethesource/vallang/IList;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"0","method":{"name":"compare","description":"(Lio/usethesource/vallang/IMap;Lio/usethesource/vallang/IMap;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"1","method":{"name":"compare","description":"(Lio/usethesource/vallang/IMap;Lio/usethesource/vallang/IMap;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"0","method":{"name":"compare","description":"(Lio/usethesource/vallang/INumber;Lio/usethesource/vallang/INumber;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"1","method":{"name":"compare","description":"(Lio/usethesource/vallang/INumber;Lio/usethesource/vallang/INumber;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"0","method":{"name":"compare","description":"(Lio/usethesource/vallang/IString;Lio/usethesource/vallang/IString;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"1","method":{"name":"compare","description":"(Lio/usethesource/vallang/IString;Lio/usethesource/vallang/IString;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"0","method":{"name":"compare","description":"(Lio/usethesource/vallang/IValue;Lio/usethesource/vallang/IValue;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"1","method":{"name":"compare","description":"(Lio/usethesource/vallang/IValue;Lio/usethesource/vallang/IValue;)I","class":"RascalValueComperator","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"eval","description":"(Ljava/lang/String;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"eval","description":"(Ljava/lang/String;Lcamllight/algebras/AllAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"importStandardLibrary","description":"(Lio/usethesource/vallang/IValue;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight"},"tests":{"run":5,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"importStandardLibrary","description":"(Lio/usethesource/vallang/IValue;Ljava/util/Set;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight"},"tests":{"run":5,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"interpret","description":"(Ljava/lang/String;)V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"parse","description":"(Ljava/lang/String;Lcamllight/algebras/AllAlg;)Ljava/lang/Object;","class":"CamlLight","package":"camllight"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"run","description":"(Ljava/lang/String;)V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runAll","description":"(Ljava/lang/String;)V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runAllButExclude","description":"(Ljava/lang/String;Ljava/util/List;)V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runExamples","description":"()V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runGivenTests","description":"()V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runPerformance","description":"(Ljava/lang/String;I)V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runPerformanceTests","description":"()V","class":"CamlLight","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intClosedInterval","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"list","description":"()Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"list","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)"],"killing":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"list","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)"],"killing":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listAppend","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listHead","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listLength","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listPrefix","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listPrefixMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listPrefixPatt","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listReverse","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listTail","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"projectList","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intClosedInterval","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"list","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"list","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"list","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listAppend","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listHead","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listLength","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listPrefix","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listPrefixMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listPrefixPatt","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listReverse","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"listTail","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"projectList","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"collectArgs","description":"(Lcom/oracle/truffle/api/nodes/Node;)Ljava/util/Map;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"collectVars","description":"(Lcom/oracle/truffle/api/nodes/Node;Lcom/oracle/truffle/api/nodes/Node;)Ljava/util/Map;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createScope","description":"(Lcom/oracle/truffle/api/nodes/Node;)Lfuncons/truffle/nodes/FNCLexicalScope;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"findChildrenBlock","description":"(Lcom/oracle/truffle/api/nodes/Node;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"findParent","description":"()Lfuncons/truffle/nodes/FNCLexicalScope;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getArguments","description":"(Lcom/oracle/truffle/api/frame/Frame;)Ljava/lang/Object;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getNode","description":"()Lcom/oracle/truffle/api/nodes/Node;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getParentBlock","description":"(Lcom/oracle/truffle/api/nodes/Node;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getVariables","description":"(Lcom/oracle/truffle/api/frame/Frame;)Ljava/lang/Object;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getVars","description":"()Ljava/util/Map;","class":"FNCLexicalScope","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declConstrException","description":"(Ljava/lang/String;Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declConstrExceptionAppendix","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declConstrTypeAppendix","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declEnumException","description":"(Ljava/lang/String;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declEnumExceptionAppendix","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declEnumTypeAppendix","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"null","method":{"name":"declLabelType","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":3,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"null","method":{"name":"declMutableLabelType","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declNewConstrType","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declNewEnumType","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declNewType","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declRecordType","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declTypeDefEquals","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"()Ljava/util/List;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"(I)Lcamllight/parser/CLParser$AnddeclContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"(I)Lcamllight/parser/CLParser$DeclexceptionappendixContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllight/parser/CLParser$DeclmonoContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"(I)Lcamllight/parser/CLParser$DeclnewtypeappendixContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllight/parser/CLParser$DecloptionalvartypesContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdecl","description":"()Lcamllight/parser/CLParser$RecdeclContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"()Ljava/util/List;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"(I)Lcamllightnocollections/parser/CLNoColParser$AnddeclContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DeclexceptionappendixContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclmonoContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeappendixContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnocollections/parser/CLNoColParser$DecloptionalvartypesContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdecl","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"charIterator","description":"(Ljava/lang/String;)Ljava/util/Iterator;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"clChar","description":"(Lio/usethesource/vallang/IValueFactory;Ljava/lang/String;)Lio/usethesource/vallang/IString;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"clString","description":"(Lio/usethesource/vallang/IValueFactory;Ljava/lang/String;)Lio/usethesource/vallang/IString;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"\"\"","method":{"name":"filterCamlLightEscapes","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"\"A\"","method":{"name":"filterCamlLightEscapes","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"filterCamlLightEscapes","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"'A'","method":{"name":"getCamlLightEscape","description":"(Ljava/lang/Character;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"'\\40'","method":{"name":"getCamlLightEscape","description":"(Ljava/lang/Character;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"getCamlLightEscape","description":"(Ljava/lang/Character;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"'A'","method":{"name":"handleEscape","description":"(Ljava/util/Iterator;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"'\\40'","method":{"name":"handleEscape","description":"(Ljava/util/Iterator;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"handleEscape","description":"(Ljava/util/Iterator;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons.helper"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"asFNCFunction","description":"(Ljava/lang/Object;)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"asIBool","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"asIInteger","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IInteger;","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"expectFNCFunction","description":"(Ljava/lang/Object;)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"expectIBool","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"expectIInteger","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IInteger;","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isFNCFunction","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isFNCFunction","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isIBool","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isIBool","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isIInteger","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isIInteger","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"buildArg","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"buildArg","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildArg","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"buildBuildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"buildBuildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildBuildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"buildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"buildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"tokenCondition","description":"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"tokenCondition","description":"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tokenCondition","description":"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$AnddeclContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DeclexceptionappendixContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclmonoContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeappendixContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecloptionalvartypesContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ConstantContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$EmptylistContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$HeadtaillistpattContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattlistContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"()Ljava/util/List;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PatttupleContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"concat_vectFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"float_of_intFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"int_of_floatFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"make_vectFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"print_floatFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"print_intFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"print_newlineFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"print_stringFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"raiseFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"refFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vect_lengthFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight.lib"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"eval","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"eval","description":"(Ljava/lang/String;Z)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"interpret","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"run","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runAll","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runAllButExclude","description":"(Ljava/lang/String;Ljava/util/List;)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runExamples","description":"()V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runGivenTests","description":"()V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runPerformance","description":"(Ljava/lang/String;I)V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"runPerformanceTests","description":"()V","class":"CamlLightTruffle","package":"camllight"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessKeyInfo","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessWrite","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"equal","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"greater","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"greaterEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"lAnd","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"lNot","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"lOr","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"notEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"notPhysicalEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"physicalEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"smaller","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"smallerEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getLhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getLhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getLhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getOperator","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getOperator","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getOperator","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getRhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getRhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getRhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isInfix","description":"()Z","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isInfix","description":"()Z","class":"NormalAlt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"anddecl","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$AnddeclContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declexceptionappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DeclexceptionappendixContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclmonoContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtypeappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeappendixContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecloptionalvartypesContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"project","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tuple","description":"()Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tuple","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)"],"killing":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tuple","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tuple","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)"],"killing":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tupleHead","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tuplePrefix","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tuplePrefixMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tuplePrefixPatt","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tupleTail","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"addAlt","description":"(Lnoa/syntax/Alt;)V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"addHeader","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"addLiftMethod","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"addParserMembers","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"assertValidInfix","description":"(Lnoa/syntax/NormalAlt;Lnoa/syntax/NormalAlt;)V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"collapseLevel","description":"(Ljava/util/Map;Ljava/lang/Integer;)V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"generate","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"groupByLevel","description":"()V","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"groupByLevel","description":"(Ljava/util/List;)Ljava/util/List;","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"sortAlternatives","description":"(Ljava/util/Map;)Ljava/util/List;","class":"Rules","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"project","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tuple","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tuple","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tuple","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tuple","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupleHead","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tuplePrefix","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tuplePrefixMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tuplePrefixPatt","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupleTail","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ConstantContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"letExp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$LetExpContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnocollections/parser/CLNoColParser$ConstantContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"letExp","description":"()Lcamllightnocollections/parser/CLNoColParser$LetExpContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessKeyInfo","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessExecute","description":"(I)Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"canHandle","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"canHandle","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCFunctionMessageResolutionForeign","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"catchElseRethrow","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"catch_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"else_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exception","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exception","description":"(Ljava/lang/String;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"fail","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"matchFailure","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"preferOver","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"throw_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"whenTrue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"catchElseRethrow","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"catch_","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"else_","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"exception","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"exception","description":"(Ljava/lang/String;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"fail","description":"()Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"matchFailure","description":"()Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"preferOver","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"throw_","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"whenTrue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"constant","description":"()Lcamllightnocollections/parser/CLNoColParser$ConstantContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"()Ljava/util/List;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patttuple","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PatttupleContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessGetSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessGetSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DecllabeltypeContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DecltypeappendixContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$EmptylistContext;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"empty","method":{"name":"extend","description":"([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"extend","description":"([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"invoke","description":"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"last","description":"([Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"empty","method":{"name":"lower","description":"(Ljava/lang/reflect/Method;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lower","description":"(Ljava/lang/reflect/Method;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lower1","description":"(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"proxy","description":"(Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"bool","description":"(Ljava/lang/Boolean;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"char_","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"constr","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"emptyList","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"float_","description":"(Ljava/lang/Float;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"int_","description":"(Ljava/lang/Integer;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"null_","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"string","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight.algebras.constants"},"tests":{"run":1,"ordered":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"followFwd","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)"],"killing":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"followIfFwd","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"freshFwd","description":"()Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"freshFwds","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"reclose","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recursive","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recursiveTyped","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"setForwards","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons.interpreter.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"asAnnotatable","description":"()Lio/usethesource/vallang/IAnnotatable;","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"asWithKeywordParameters","description":"()Lio/usethesource/vallang/IWithKeywordParameters;","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"encodeAsConstructor","description":"()Lio/usethesource/vallang/IConstructor;","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"getType","description":"()Lio/usethesource/vallang/type/Type;","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isAnnotatable","description":"()Z","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isAnnotatable","description":"()Z","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"mayHaveKeywordParameters","description":"()Z","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"mayHaveKeywordParameters","description":"()Z","class":"ExternalRascalValue","package":"funcons.values.properties"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"(I)Lcamllight/parser/CLParser$DecllabeltypeContext;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"(I)Lcamllight/parser/CLParser$DecltypeappendixContext;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DeclnewtypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$EmptylistContext;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"accum","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"bindValue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"boundValue","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"closure","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"environment","description":"()Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.BindingFactoryTest.testEnvironment(tests.reference.BindingFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"id","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"nameId","description":"(Ljava/lang/String;Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)"],"killing":["tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"scope","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatAdd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatDivide","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatModulo","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatMultiply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatNegate","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatPowerOf","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatSubtract","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lit","description":"(Ljava/lang/Double;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DecllabeltypeContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DecltypeappendixContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllight/parser/CLParser$EmptylistContext;","class":"CLParser$ConstantContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decllabeltype","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DecllabeltypeContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decltypeappendix","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DecltypeappendixContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllight/parser/CLParser$PattmatchcurriedContext;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllight/parser/CLParser$PattmatchsingleContext;","class":"CLParser$FunctionContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"exp_sempred","description":"(Lnoa/syntax/demo/DemoParser$ExpContext;I)Z","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"exp_sempred","description":"(Lnoa/syntax/demo/DemoParser$ExpContext;I)Z","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"prog","description":"()Lnoa/syntax/demo/DemoParser$ProgContext;","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"DemoParser","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"optionalPatt","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattAs","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattConstant","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattConstr","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattConstrPatt","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattId","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":2,"ordered":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattType","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing":["tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattWildcard","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"PattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accum","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"bindValue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"boundValue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"closure","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"environment","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"id","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"nameId","description":"(Ljava/lang/String;Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"scope","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"bool","description":"(Ljava/lang/Boolean;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"equal","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"greater","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"greaterEqual","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"not","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"physicalEqual","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"smaller","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"smallerEqual","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatAdd","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatDivide","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatModulo","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatMultiply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatNegate","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatPowerOf","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatSubtract","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"lit","description":"(Ljava/lang/Double;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testLit(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"bool","description":"(Ljava/lang/Boolean;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.BoolFactoryTest.testBool(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"equal","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"greater","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"greaterEqual","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"not","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"physicalEqual","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"smaller","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"smallerEqual","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptylist","description":"()Lcamllightnocollections/parser/CLNoColParser$EmptylistContext;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"booltoken","description":"(Ljava/lang/String;)Z","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"true","method":{"name":"booltoken","description":"(Ljava/lang/String;)Z","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"\"\"","method":{"name":"chartoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"\"A\"","method":{"name":"chartoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"chartoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"\"\"","method":{"name":"stringtoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"\"A\"","method":{"name":"stringtoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"stringtoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight.parser"},"tests":{"run":1,"ordered":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"followFwd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"followIfFwd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"freshFwd","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"freshFwds","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"reclose","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recursive","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recursiveTyped","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"setForwards","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intAdd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intDivide","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intModulo","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intMultiply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intNegate","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intSubtract","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lit","description":"(Ljava/lang/Integer;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"forDownto","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"for_","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"ifElse","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"if_","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"matchWith","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"seq","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"whileTrue","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"abs","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"abs","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"apply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"applyToEach","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"bind","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"close","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"compose","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/functions/FNCDispatchNode;","class":"FNCDispatchNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCDispatchNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeDispatch","description":"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCDispatchNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCDispatchNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isValid_","description":"(Lcom/oracle/truffle/api/Assumption;)Z","class":"FNCDispatchNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isValid_","description":"(Lcom/oracle/truffle/api/Assumption;)Z","class":"FNCDispatchNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"removeDirect_","description":"(Ljava/lang/Object;)V","class":"FNCDispatchNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"addProductions","description":"(Lnoa/syntax/Rules;)V","class":"PGen","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"allMethods","description":"(Ljava/lang/Class;Ljava/util/Set;)V","class":"PGen","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"empty","method":{"name":"allMethodsOf","description":"(Ljava/lang/Class;)[Ljava/lang/reflect/Method;","class":"PGen","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"allMethodsOf","description":"(Ljava/lang/Class;)[Ljava/lang/reflect/Method;","class":"PGen","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"generate","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V","class":"PGen","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"generate","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V","class":"PGen","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"generateTokens","description":"(Ljava/lang/StringBuilder;)V","class":"PGen","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"andDecl","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"BindAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"killing":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declBindMono","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declBindMonoFunc","description":"(Ljava/lang/Object;Ljava/util/List;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recAndDecl","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"BindAlg","package":"camllight.algebras.decls"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recDeclIdentExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight.algebras.decls"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recDeclIdentPattsExp","description":"(Ljava/lang/Object;Ljava/util/List;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recDeclPattTypeExp","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight.algebras.decls"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"abs","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"abs","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"apply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"applyToEach","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"bind","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"close","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"compose","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"killing":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intAdd","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intDivide","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)"],"killing":["tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intModulo","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"killing":["tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intMultiply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intNegate","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"killing":["tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intSubtract","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"lit","description":"(Ljava/lang/Integer;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testLit(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneralise(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseMap(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiateIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseDecl(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiatePoly(tests.reference.PolyTypeFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"any","description":"()Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"match","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"only","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattAbs","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"killing":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattNonBinding","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattUnion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intAdd","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing":["tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intDivide","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)"],"killing":["tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intMod","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"killing":["tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intMultiply","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intSub","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intUnarySub","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"killing":["tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"projectType","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"killing":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tupleType","description":"()Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tupleType","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"killing":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tupleType","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"killing":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tupleType","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"killing":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tupleTypePrefix","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons.interpreter.types"},"tests":{"run":1,"ordered":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"projectType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupleType","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupleType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupleType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupleType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupleTypePrefix","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordAssignExp","description":"(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordEntryMutableSingle","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordEntrySingle","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordExp","description":"(Ljava/util/List;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordSelectApplyFunction","description":"(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight.algebras.exprs"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordSelectExp","description":"(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/functions/FNCTypeToForeignNode;","class":"FNCTypeToForeignNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCTypeToForeignNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeConvert","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCTypeToForeignNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"fallbackGuard_","description":"(ILjava/lang/Object;)Z","class":"FNCTypeToForeignNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"fallbackGuard_","description":"(ILjava/lang/Object;)Z","class":"FNCTypeToForeignNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCTypeToForeignNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"null","method":{"name":"functionType","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight.algebras.typeexprs"},"tests":{"run":1,"ordered":["tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"null","method":{"name":"tupleType","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight.algebras.typeexprs"},"tests":{"run":2,"ordered":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"null","method":{"name":"typeId","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight.algebras.typeexprs"},"tests":{"run":14,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"null","method":{"name":"varType","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight.algebras.typeexprs"},"tests":{"run":3,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"variantDecl","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight.algebras.typeexprs"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"variantTypeDecl","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight.algebras.typeexprs"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$TypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLNoColParser$TypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"(I)Lcamllightnocollections/parser/CLNoColParser$TupletypelistContext;","class":"CLNoColParser$TypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Ljava/util/List;","class":"CLNoColParser$TypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(I)Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$TypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Lcamllightnocollections/parser/CLNoColParser$VartypeContext;","class":"CLNoColParser$TypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatAddExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatDivideExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatMultiplyExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatNegateExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatPowerExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatSubtractExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing":["tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"any","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"match","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"only","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattAbs","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattNonBinding","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattUnion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"arrayAssign","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"arraySelect","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"arraySingle","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"emptyArray","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"innerExpArrayDouble","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"innerExpArrayMulti","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"field","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"record","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordOver","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordSelect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recordUnion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vector","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vector","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vectorAppend","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vectorAssign","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vectorLength","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vectorSelect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$TypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLParser$TypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"(I)Lcamllight/parser/CLParser$TupletypelistContext;","class":"CLParser$TypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Ljava/util/List;","class":"CLParser$TypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(I)Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$TypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Lcamllight/parser/CLParser$VartypeContext;","class":"CLParser$TypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"map","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"mapDomain","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"mapGet","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"mapOver","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"mapUnion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"mapUpdate","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$TupletypelistContext;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Ljava/util/List;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$VartypeContext;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vector","description":"()Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vector","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vectorAppend","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vectorAssign","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vectorLength","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"vectorSelect","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"map","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"mapDomain","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"mapGet","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"mapOver","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"mapUnion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"mapUpdate","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"tupletypelist","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$TupletypelistContext;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Ljava/util/List;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$VartypeContext;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntNegateNode;","class":"IntIntNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IInteger;","class":"IntIntNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatDivideNode;","class":"FloatFloatDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchcurriedContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchsingleContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntModuloNode;","class":"IntIntModuloNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntModuloNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntModuloNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntModuloNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntModuloNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$RecdeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$RecdeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$RecdeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$RecdeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$RecdeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/recursion/RecursiveFollowIfFwdNode;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"RecursiveFollowIfFwdNodeGen","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/BoolGreaterNode;","class":"BoolGreaterNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolGreaterNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolGreaterNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BoolGreaterNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"BoolGreaterNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchcurriedContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchsingleContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"camlLightChar","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"camlLightString","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"char_","description":"(Ljava/lang/Character;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)"],"killing":["tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"string","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"stringAppend","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"killing":["tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatMultiplyNode;","class":"FloatFloatMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"effect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"for_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ifTrue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"seq","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"whileTrue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/BoolEqualNode;","class":"BoolEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BoolEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"BoolEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntAddNode;","class":"IntIntAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatNegateNode;","class":"FloatFloatNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatNegateNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntMultiplyNode;","class":"IntIntMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntMultiplyNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"curry","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"curryN","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"partialApp","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)"],"killing":["tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"partialAppN","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"uncurry","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons.interpreter.functions"},"tests":{"run":1,"ordered":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"killing":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntDivideNode;","class":"IntIntDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntDivideNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"camlLightChar","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"camlLightString","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"char_","description":"(Ljava/lang/Character;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"string","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"stringAppend","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"add","description":"(Lnoa/syntax/demo/IPrint;Lnoa/syntax/demo/IPrint;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"avg","description":"(Ljava/util/List;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"avg2","description":"(Ljava/util/List;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lit","description":"(I)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"mul","description":"(Lnoa/syntax/demo/IPrint;Lnoa/syntax/demo/IPrint;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatPowerOf;","class":"FloatFloatPowerOfNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatPowerOfNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatPowerOfNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatPowerOfNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatPowerOfNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"add","description":"(Lnoa/syntax/demo/IEval;Lnoa/syntax/demo/IEval;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"avg","description":"(Ljava/util/List;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"avg2","description":"(Ljava/util/List;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lit","description":"(I)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"mul","description":"(Lnoa/syntax/demo/IEval;Lnoa/syntax/demo/IEval;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"ToDot$Node","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"ToDot$Node","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getId","description":"()Ljava/lang/String;","class":"ToDot$Node","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getId","description":"()Ljava/lang/String;","class":"ToDot$Node","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getId","description":"()Ljava/lang/String;","class":"ToDot$Node","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"field","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"record","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing":["tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordSelect","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordUnion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createContext","description":"(Lcom/oracle/truffle/api/TruffleLanguage$Env;)Lfuncons/truffle/nodes/FNCContext;","class":"FNCLanguage","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getFncRootNode","description":"(Lcom/oracle/truffle/api/TruffleLanguage$ParsingRequest;)Lfuncons/truffle/nodes/FNCRootNode;","class":"FNCLanguage","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"importStandardLibrary","description":"()Lfuncons/truffle/nodes/FNCStatementNode;","class":"FNCLanguage","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"parse","description":"(Lcom/oracle/truffle/api/TruffleLanguage$ParsingRequest;)Lcom/oracle/truffle/api/CallTarget;","class":"FNCLanguage","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"parse","description":"(Ljava/lang/String;Lcamllight/algebras/AllAlg;)Ljava/lang/Object;","class":"FNCLanguage","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/BoolGreaterEqualNode;","class":"BoolGreaterEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolGreaterEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolGreaterEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BoolGreaterEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"BoolGreaterEqualNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatAddNode;","class":"FloatFloatAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatAddNodeGen","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/auxiliary/IntoFloatConversionIntToFloatNode;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchcurried","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchcurriedContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchsingleContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"effect","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"for_","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"killing":["tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"ifTrue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"seq","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"whileTrue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons.interpreter.controlflow"},"tests":{"run":1,"ordered":["tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/auxiliary/IntoFloatConversionFloatToIntoNode;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"curry","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"curryN","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"partialApp","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"partialAppN","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"uncurry","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"alloc","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"assign","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"assignedValue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"assignedValueIfVar","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapReadSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ask","description":"()Ljava/lang/Object;","class":"LinkedStackReader","package":"noa.context.env"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"cc","description":"(Ljava/util/function/Supplier;)Ljava/util/function/Supplier;","class":"LinkedStackReader","package":"noa.context.env"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"local","description":"(Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"LinkedStackReader","package":"noa.context.env"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"restore","description":"(Lnoa/context/env/LinkedStackReader$Stack;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"LinkedStackReader","package":"noa.context.env"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Variable","package":"funcons.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Variable","package":"funcons.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"isEqual","description":"(Lio/usethesource/vallang/IValue;)Z","class":"Variable","package":"funcons.values"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"killing":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"true","method":{"name":"isEqual","description":"(Lio/usethesource/vallang/IValue;)Z","class":"Variable","package":"funcons.values"},"tests":{"run":1,"ordered":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode$KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getFrameSlot","description":"(Lcom/oracle/truffle/api/frame/FrameSlot;Lcom/oracle/truffle/api/frame/FrameDescriptor;)Lcom/oracle/truffle/api/frame/FrameSlot;","class":"RecursiveFollowIfFwdNode","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"empty","method":{"name":"getFrameSlots","description":"(Lcom/oracle/truffle/api/frame/FrameDescriptor;)[Lcom/oracle/truffle/api/frame/FrameSlot;","class":"RecursiveFollowIfFwdNode","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getFrameSlots","description":"(Lcom/oracle/truffle/api/frame/FrameDescriptor;)[Lcom/oracle/truffle/api/frame/FrameSlot;","class":"RecursiveFollowIfFwdNode","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recursiveFNCFunction","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Lfuncons/truffle/nodes/FNCFunction;)Ljava/lang/Object;","class":"RecursiveFollowIfFwdNode","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode$EXECUTERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode$EXECUTERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode$EXECUTERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode$EXECUTERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Abs","package":"funcons.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Abs","package":"funcons.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isEqual","description":"(Lio/usethesource/vallang/IValue;)Z","class":"Abs","package":"funcons.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isEqual","description":"(Lio/usethesource/vallang/IValue;)Z","class":"Abs","package":"funcons.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$DeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$DeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$DeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$DeclmonoContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"build","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"Recorder","package":"noa.proxy"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"buildArgument","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"Recorder","package":"noa.proxy"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"buildList","description":"(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List;","class":"Recorder","package":"noa.proxy"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"create","description":"(Ljava/lang/Class;)Ljava/lang/Object;","class":"Recorder","package":"noa.proxy"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"function","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"functionApplication","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"functionApplicationApplication","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"functionId","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode$READRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/functions/FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"0L","method":{"name":"fromForeignNumber","description":"(Ljava/lang/Object;)J","class":"FNCContext","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"1L","method":{"name":"fromForeignNumber","description":"(Ljava/lang/Object;)J","class":"FNCContext","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"fromForeignValue","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCContext","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"initRegistry","description":"(Lfuncons/truffle/nodes/FNCLanguage;)V","class":"FNCContext","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode$WRITERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode$WRITERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode$WRITERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode$WRITERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapWriteSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/functions/FNCFunctionMessageResolutionForeign$CheckFunctionSubNode;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"invoke","description":"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Tracer","package":"funcons.debug"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"Tracer","package":"funcons.debug"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"make","description":"()Ljava/lang/Object;","class":"Tracer","package":"funcons.debug"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"print","description":"(Ljava/lang/String;)V","class":"Tracer","package":"funcons.debug"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapKeysSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/functions/FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode$KEY_INFORootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode$HAS_KEYSRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"add","description":"(Lnoa/proxy/demo/ArithAlg;)Ljava/lang/Object;","class":"Main","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(Lnoa/proxy/demo/ArithAlg;)Ljava/lang/Object;","class":"Main","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp2","description":"(Lnoa/proxy/demo/ArithAlg;)Ljava/lang/Object;","class":"Main","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"Main","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariableNamesMessageResolutionForeign$VarNamesReadSubNode;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode$IS_EXECUTABLERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode$IS_EXECUTABLERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode$IS_EXECUTABLERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode$IS_EXECUTABLERootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"\"A\"","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$KeyInfoSubNode;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"alloc","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"assign","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"assignedValue","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"assignedValueIfVar","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing":["tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"CLNoRecParser$ExparrayContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$ExparrayContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exparray","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExparrayContext;","class":"CLNoRecParser$ExparrayContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLNoColParser$RecdeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"(I)Lcamllightnocollections/parser/CLNoColParser$RecanddeclContext;","class":"CLNoColParser$RecdeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclmonoContext;","class":"CLNoColParser$RecdeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accept","description":"(Lio/usethesource/vallang/visitors/IValueVisitor;)Ljava/lang/Object;","class":"Null","package":"funcons.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Null","package":"funcons.values"},"tests":{"run":1,"ordered":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Null","package":"funcons.values"},"tests":{"run":7,"ordered":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$FunctionappContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser$FunctionappContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser$FunctionappContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IInteger;","class":"IntIntDivideNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntDivideNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"IntIntDivideNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattMatchCurriedMulti","description":"(Ljava/util/List;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattMatchAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattMatchMulti","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattMatchAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattMatchSingle","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattMatchAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"constrExp","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"ExpAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"idExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ExpAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"typedExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ExpAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing":["tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeIBool","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Lio/usethesource/vallang/IBool;","class":"FNCExpressionNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeIInteger","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Lio/usethesource/vallang/IInteger;","class":"FNCExpressionNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FNCExpressionNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLNoSEParser$RecdeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$RecanddeclContext;","class":"CLNoSEParser$RecdeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclmonoContext;","class":"CLNoSEParser$RecdeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"emptyListPatt","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ListPattAlg","package":"camllight.algebras.patts"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"headTailListPattMulti","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ListPattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattListSingle","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ListPattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"killing":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"IntIntModuloNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntModuloNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"IntIntModuloNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLNoRecParser$RecdeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$RecanddeclContext;","class":"CLNoRecParser$RecdeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclmonoContext;","class":"CLNoRecParser$RecdeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLParser$RecdeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recanddecl","description":"(I)Lcamllight/parser/CLParser$RecanddeclContext;","class":"CLParser$RecdeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllight/parser/CLParser$RecdeclmonoContext;","class":"CLParser$RecdeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeContext;","class":"CLNoSEParser$DecloptionalvartypesContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Ljava/util/List;","class":"CLNoSEParser$DecloptionalvartypesContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$VartypeContext;","class":"CLNoSEParser$DecloptionalvartypesContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeContext;","class":"CLNoColParser$DecloptionalvartypesContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Ljava/util/List;","class":"CLNoColParser$DecloptionalvartypesContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"(I)Lcamllightnocollections/parser/CLNoColParser$VartypeContext;","class":"CLNoColParser$DecloptionalvartypesContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlIfTrueNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"testResult","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Z","class":"LogicControlIfTrueNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"testResult","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Z","class":"LogicControlIfTrueNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeContext;","class":"CLNoRecParser$DecloptionalvartypesContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Ljava/util/List;","class":"CLNoRecParser$DecloptionalvartypesContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$VartypeContext;","class":"CLNoRecParser$DecloptionalvartypesContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"expList","description":"(Ljava/util/List;)Ljava/lang/Object;","class":"ListAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing":["tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"headTailListExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ListAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"killing":["tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"listConcatExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ListAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)"],"killing":["tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"bind","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lnoa/proxy/demo/Env;","class":"Env","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"empty","description":"()Lnoa/proxy/demo/Env;","class":"Env","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"get","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"Env","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"CLParser$ExparrayContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$ExparrayContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exparray","description":"()Lcamllight/parser/CLParser$ExparrayContext;","class":"CLParser$ExparrayContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$FunctionappContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser$FunctionappContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser$FunctionappContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$PattmatchcurriedContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$PattmatchcurriedContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattmatchcurriedContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declnewtype","description":"()Lcamllight/parser/CLParser$DeclnewtypeContext;","class":"CLParser$DecloptionalvartypesContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"()Ljava/util/List;","class":"CLParser$DecloptionalvartypesContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"vartype","description":"(I)Lcamllight/parser/CLParser$VartypeContext;","class":"CLParser$DecloptionalvartypesContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$PattmatchcurriedContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$PattmatchcurriedContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattmatchcurriedContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"NUM","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"DemoParser$ExpContext","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Ljava/util/List;","class":"DemoParser$ExpContext","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"(I)Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser$ExpContext","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$PattmatchcurriedContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$PattmatchcurriedContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattmatchcurriedContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$FunctionappContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser$FunctionappContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser$FunctionappContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$FunctionappContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser$FunctionappContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"functionapp","description":"()Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser$FunctionappContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"Demo","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"parse","description":"(Ljava/lang/String;Lnoa/syntax/demo/AllAlg;)Ljava/lang/Object;","class":"Demo","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"testBuilder","description":"(Ljava/lang/String;)V","class":"Demo","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$PattmatchcurriedContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$PattmatchcurriedContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PattmatchcurriedContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$3","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$3","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$2","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$2","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$1","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$1","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$VarianttypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$VarianttypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"equal","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IBool;","class":"BoolEqualNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"equal","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolEqualNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$RecordpattappendixContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$RecordpattappendixContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DecltypeappendixContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DecltypeappendixContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser$DeclorexpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$DeclorexpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser$DeclorexpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$DeclorexpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"null_","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleNullFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"undefined","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleNullFactory","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"test","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCFunctionMessageResolution$CheckFunction","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"test","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCFunctionMessageResolution$CheckFunction","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser$PattmatchContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchsingleContext;","class":"CLNoRecParser$PattmatchContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"0","method":{"name":"compareTo","description":"(Lnoa/syntax/PGen$Tk;)I","class":"PGen$Tk","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"1","method":{"name":"compareTo","description":"(Lnoa/syntax/PGen$Tk;)I","class":"PGen$Tk","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"ToDot$Edge","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"ToDot$Edge","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclimplContext;","class":"CLNoColParser$DeclimplContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declorexp","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclorexpContext;","class":"CLNoColParser$DeclimplContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"0","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;)I","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$KeyInfoNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"1","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;)I","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$KeyInfoNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DecllabeltypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DecllabeltypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$PattmatchsingleContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattmatchsingleContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"eval","description":"(Ljava/lang/String;Lcamllightnocollections/NoCollectionsAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLightNoCollections","package":"camllightnocollections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"parse","description":"(Ljava/lang/String;Lcamllightnocollections/NoCollectionsAlg;)Ljava/lang/Object;","class":"CamlLightNoCollections","package":"camllightnocollections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"add","description":"(Lnoa/proxy/demo/IEval;Lnoa/proxy/demo/IEval;)Lnoa/proxy/demo/IEval;","class":"EvalArith","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lit","description":"(I)Lnoa/proxy/demo/IEval;","class":"EvalArith","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$PattmatchsingleContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattmatchsingleContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"given","description":"()Lfuncons/carriers/IEval;","class":"SupplyGivenFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"supply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"SupplyGivenFactory","package":"funcons.interpreter.entities"},"tests":{"run":1,"ordered":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"0","method":{"name":"compareTo","description":"(Lnoa/syntax/Alt;)I","class":"Alt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"1","method":{"name":"compareTo","description":"(Lnoa/syntax/Alt;)I","class":"Alt","package":"noa.syntax"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclimplContext;","class":"CLNoSEParser$DeclimplContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declorexp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclorexpContext;","class":"CLNoSEParser$DeclimplContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"eval","description":"(Ljava/lang/String;Lcamllightnorecursion/NoRecAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLightNoRecursion","package":"camllightnorecursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"parse","description":"(Ljava/lang/String;Lcamllightnorecursion/NoRecAlg;)Ljava/lang/Object;","class":"CamlLightNoRecursion","package":"camllightnorecursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser$PattmatchContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchsingleContext;","class":"CLNoColParser$PattmatchContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclexceptionappendixContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DeclexceptionappendixContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FunctionsObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FunctionsObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionLiteralNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"setCallTarget","description":"(Lcom/oracle/truffle/api/RootCallTarget;)V","class":"FunctionLiteralNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$RecordsingleContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$RecordsingleContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattlistContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattlistContext;","class":"CLNoRecParser$PattlistContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$HeadtaillistpattContext;","class":"CLNoRecParser$HeadtaillistpattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$HeadtaillistpattContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$VarianttypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$VarianttypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"given","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleSupplyGivenFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"supply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleSupplyGivenFactory","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"askEnv","description":"()Lnoa/context/env/Env;","class":"WithEnv","package":"noa.context.env"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"local","description":"(Lnoa/context/env/Env;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"WithEnv","package":"noa.context.env"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$HeadtaillistpattContext;","class":"CLNoSEParser$HeadtaillistpattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$HeadtaillistpattContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"floatToInt","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntoFloatConversionFactory","package":"funcons.interpreter.auxiliary"},"tests":{"run":1,"ordered":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"intToFloat","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntoFloatConversionFactory","package":"funcons.interpreter.auxiliary"},"tests":{"run":1,"ordered":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclexceptionappendixContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DeclexceptionappendixContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser$PattmatchContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllight/parser/CLParser$PattmatchsingleContext;","class":"CLParser$PattmatchContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclimplContext;","class":"CLNoRecParser$DeclimplContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declorexp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclorexpContext;","class":"CLNoRecParser$DeclimplContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser$PattmatchContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattmatchsingle","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchsingleContext;","class":"CLNoSEParser$PattmatchContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Fwd","package":"funcons.values.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Fwd","package":"funcons.values.recursion"},"tests":{"run":1,"ordered":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"killing":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DecltypeappendixContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DecltypeappendixContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"floatToInt","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntoFloatConversionFactory","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"intToFloat","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntoFloatConversionFactory","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattlistContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllight/parser/CLParser$PattlistContext;","class":"CLParser$PattlistContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$RecordpattappendixContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$RecordpattappendixContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"accessWithTarget","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"headtaillistpatt","description":"()Lcamllight/parser/CLParser$HeadtaillistpattContext;","class":"CLParser$HeadtaillistpattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$HeadtaillistpattContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Token","package":"funcons.values.types"},"tests":{"run":2,"ordered":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Token","package":"funcons.values.types"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordPatt","description":"(Ljava/lang/String;Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"RecordPattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"recordPattAppendix","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordPattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DecllabeltypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DecllabeltypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"id","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"LetAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"letInExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"LetAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$PattmatchsingleContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattmatchsingleContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclexceptionappendixContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DeclexceptionappendixContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser$DeclorexpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$DeclorexpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser$DeclorexpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$DeclorexpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser$LetExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$LetExpContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"FunconException","package":"funcons.values.signals"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"FunconException","package":"funcons.values.signals"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"null_","description":"()Lfuncons/carriers/IEval;","class":"NullFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"undefined","description":"()Lfuncons/carriers/IEval;","class":"NullFactory","package":"funcons.interpreter.values"},"tests":{"run":1,"ordered":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DecllabeltypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DecllabeltypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declImpl","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ModuleAlg","package":"camllight.algebras.toplevel"},"tests":{"run":1,"ordered":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declOrExpExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ModuleAlg","package":"camllight.algebras.toplevel"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Undefined","package":"funcons.values"},"tests":{"run":1,"ordered":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)"],"killing":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"SURVIVED","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Undefined","package":"funcons.values"},"tests":{"run":3,"ordered":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)"],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$RecordsingleContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$RecordsingleContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCLexicalScope$VariableNamesObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCLexicalScope$VariableNamesObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FNCFunctionMessageResolutionForeign$CheckFunctionSubNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"testWithTarget","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$CheckFunctionSubNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pow","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"FloatFloatPowerOf","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pow","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"FloatFloatPowerOf","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"RunTimeFunconException","package":"funcons.values.signals"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"RunTimeFunconException","package":"funcons.values.signals"},"tests":{"run":1,"ordered":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser$LetExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$LetExpContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"PrintPrintNode","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"print","description":"(Ljava/lang/String;Ljava/io/OutputStream;)V","class":"PrintPrintNode","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"false","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCLexicalScope$VariablesMapObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"true","method":{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCLexicalScope$VariablesMapObject","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllight/parser/CLParser$DeclimplContext;","class":"CLParser$DeclimplContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declorexp","description":"()Lcamllight/parser/CLParser$DeclorexpContext;","class":"CLParser$DeclimplContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser$LetExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$LetExpContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"lookup","description":"(Ljava/lang/String;Z)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCFunctionRegistry","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"register","description":"(Ljava/lang/String;Lfuncons/truffle/nodes/FNCRootNode;)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCFunctionRegistry","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$VarianttypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$VarianttypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DecllabeltypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DecllabeltypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$PattmatchsingleContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PattmatchsingleContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"invoke","description":"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;","class":"NoOp","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"noOp","description":"(Ljava/lang/Class;)Ljava/lang/Object;","class":"NoOp","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"eval","description":"(Ljava/lang/String;Lcamllightnosideeffects/NoSEAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLightNoSideEffects","package":"camllightnosideeffects"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"parse","description":"(Ljava/lang/String;Lcamllightnosideeffects/NoSEAlg;)Ljava/lang/Object;","class":"CamlLightNoSideEffects","package":"camllightnosideeffects"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"false","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"CLVariant","package":"funcons.values.cl"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"true","method":{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"CLVariant","package":"funcons.values.cl"},"tests":{"run":1,"ordered":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DecltypeappendixContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DecltypeappendixContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"let","description":"(Ljava/lang/String;Lnoa/proxy/demo/IEvalEnv;Lnoa/proxy/demo/IEvalEnv;)Lnoa/proxy/demo/IEvalEnv;","class":"EvalLet","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"var","description":"(Ljava/lang/String;)Lnoa/proxy/demo/IEvalEnv;","class":"EvalLet","package":"noa.proxy.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$VarianttypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$VarianttypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclexceptionappendixContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DeclexceptionappendixContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser$LetExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$LetExpContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattlistContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"pattlist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattlistContext;","class":"CLNoSEParser$PattlistContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"dereferenceExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"RefAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)"],"killing":["tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"refAssignExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"RefAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)"],"killing":["tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DecltypeappendixContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DecltypeappendixContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclmonoContext;","class":"CLNoRecParser$AnddeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntDivide","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$String_","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllight/parser/CLParser$DeclmonoContext;","class":"CLParser$AnddeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorLengthNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject$FunctionNamesMessageResolution$FunctionNamesGetSizeNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorNode2","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntoFloatConversionFactory$FloatToInt","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntSubstractNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$GreaterEqual","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionAbsNode2","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$FreshFwds","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$CamlLightString","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"exprTupleMulti","description":"(Ljava/util/List;)Ljava/lang/Object;","class":"TupleAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing":["tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorLength","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TuplePrefix","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllight/parser/CLParser$DecloptionalvartypesContext;","class":"CLParser$DeclnewtypeappendixContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$BoundValue","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$Vector2","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"CurryCurryNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"local","description":"(Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"ArrayDequeReader","package":"noa.context.env"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Abs2","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"CLPGen","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"ListProjectListNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PatttupleContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapOverNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclimplContext;","class":"CLNoColParser$ProgContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"CLNoSEPGen","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$VartypeContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTypeFactory$Type","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclmonoContext;","class":"CLNoSEParser$RecanddeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$IfTrue","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapReadNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringStringNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$EmptylistContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Accum","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListLengthNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFloatFactory$Lit","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionMatchFailureNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Ljava/lang/Class;)Ljava/lang/Object;","class":"Print","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"SupplyGivenSupplyNode","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleSupplyGivenFactory$Supply","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$PrefereOver","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectKeysNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariableNamesObject;I)Ljava/lang/Object;","class":"FNCLexicalScope$VariableNamesObject$VariableNamesMessageResolution$VarNamesReadNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"eval","description":"(Lio/usethesource/vallang/IMap;Lio/usethesource/vallang/IValue;)Lio/usethesource/vallang/IValue;","class":"MapFactory$1","package":"funcons.interpreter.collections"},"tests":{"run":1,"ordered":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapOver","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$StringAppend","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecursiveSetForwardsNode","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapWriteNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ListAppend","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Close","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"print","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PrintFactory","package":"funcons.interpreter.auxiliary"},"tests":{"run":1,"ordered":["tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllight/parser/CLParser$RecdeclmonoContext;","class":"CLParser$RecanddeclContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ListLength","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"FloatFloatDivideNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariableNamesObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariableNamesObject$VariableNamesMessageResolution$VarNamesHasSizeNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"CLNoRecPGen","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$IdentContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ListPrefix","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Not","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlWhileTrueNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapUpdate","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorSelectNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTuplePrefixMatchNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"RecursiveFwdNode","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllight/parser/CLParser$DeclimplContext;","class":"CLParser$ProgContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCFunction;[Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolution$FNCForeignFunctionExecuteNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolution$FNCForeignIsExecutableNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCUndefinedFunctionRootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlEffectNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"exp","description":"()Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser$ProgContext","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PatttupleContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"conversion","description":"(Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntoFloatConversionIntToFloatNode","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionElseNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapGet","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTypeFactory$UnknownType","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"DemoPGen","package":"noa.syntax.demo"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declOrExpExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"TestableModuleAlg","package":"camllight.algebras.toplevel"},"tests":{"run":1,"ordered":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleCurryFactory$Curry","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"NullNullNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$CamlLightChar","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclimplContext;","class":"CLNoRecParser$ProgContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"union","description":"(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Union","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$Else_","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$BindValue","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"CurryCurryNNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntoFloatConversionFactory$IntToFloat","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TupleHead","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCMainRootNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolNotNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declimpl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclimplContext;","class":"CLNoSEParser$ProgContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$Tuple0","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$WhileTrue","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntMultiplyNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleNullFactory$Null_","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;Ljava/lang/String;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectKeyInfoNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject$FunctionNamesMessageResolution$FunctionNamesHasSizeNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionFailNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntNegate","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntMultiply","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorAssign","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"print","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePrintFactory","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntAddNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$List","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringStringAppendNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PatttupleContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleProjectNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapDomainNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"NullUndefinedNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;","class":"ToString","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleAssignFactory$AssignedValue","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$TupletypelistContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"declRec","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"RecBindAlg","package":"camllight.algebras.decls"},"tests":{"run":1,"ordered":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$IdentContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"AssignAssignNode","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatSubstractNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$IdentContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$Seq","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$CheckFunctionSubNode$LanguageCheckRootNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$For_","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"stringAppendExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"StringAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"killing":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Id","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTupleHeadNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$TupletypelistContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$TupletypelistContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Scope","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTypeFactory$TypeVar","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TrufflePrintFactory$Print","package":"funcons.truffle.auxiliary"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapDomain","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclmonoContext;","class":"CLNoColParser$AnddeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$EmptylistContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleTypeFactory$TupleType","package":"funcons.truffle.types"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntLitNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;","class":"Sharing","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Apply","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectHasKeysNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntAdd","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$MatchFailure","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Bool","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringCamlLightStringNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$VartypeContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;Ljava/lang/String;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectReadNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$Map","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$VartypeContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTupleNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclmonoContext;","class":"CLNoColParser$RecanddeclContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$Reclose","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleNullFactory$Undefined","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"recdeclmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclmonoContext;","class":"CLNoRecParser$RecanddeclContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$IdentContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TuplePrefixMatch","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$Throw_","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$Vector","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$SetForwards","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecordFactory$Field","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Environment","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"declmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclmonoContext;","class":"CLNoSEParser$AnddeclContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapUnionNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapUnion","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"undefinedFunction","description":"(Ljava/lang/String;)Lfuncons/truffle/functions/FNCUndefinedNameException;","class":"FNCUndefinedNameException","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$FollowIfFwd","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapKeysNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleCurryFactory$CurryN","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"SupplyGivenGivenNode","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnocollections/parser/CLNoColParser$DecloptionalvartypesContext;","class":"CLNoColParser$DeclnewtypeappendixContext","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapHasKeysNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject;I)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject$FunctionNamesMessageResolution$FunctionNamesReadNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PatttupleContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"eval","description":"()Lio/usethesource/vallang/IValue;","class":"IEval","package":"funcons.carriers"},"tests":{"run":1,"ordered":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)","tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)","tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testLit(tests.reference.FloatFactoryTest)","tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testLit(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneralise(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseMap(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiateIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseDecl(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiatePoly(tests.reference.PolyTypeFactoryTest)","tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)","tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testEnvironment(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)","tests.reference.BoolFactoryTest.testBool(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)"],"killing":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlForNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlSeqNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TupleTail","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"getForeignAccess","description":"()Lcom/oracle/truffle/api/interop/ForeignAccess;","class":"FNCFunction","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Closure","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ProjectList","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecloptionalvartypesContext;","class":"CLNoRecParser$DeclnewtypeappendixContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecursiveFreshFwdsNode","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$EmptylistContext","package":"camllightnorecursion.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleSupplyGivenFactory$Given","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"main","description":"([Ljava/lang/String;)V","class":"CLNoColPGen","package":"camllightnocollections.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BindingBindValueNode","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Abs","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariableNamesObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariableNamesObject$VariableNamesMessageResolution$VarNamesGetSizeNode","package":"funcons.truffle.nodes"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapGetNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleAssignFactory$Assign","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListPrefixNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BindingBoundValueNode","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Equal","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"decloptionalvartypes","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecloptionalvartypesContext;","class":"CLNoSEParser$DeclnewtypeappendixContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionThrowNode","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BindingClosureNode","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Greater","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListAppendNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTupleTailNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$Lit","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorAssignNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"tryWithExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ExceptionAlg","package":"camllight.algebras.exprs"},"tests":{"run":1,"ordered":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$FreshFwd","package":"funcons.truffle.recursion"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/IdentityHashMap;Ljava/util/Set;)Ljava/lang/Object;","class":"ToDot","package":"noa.proxy"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$TupletypelistContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringCamlLightCharNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatLitNode","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$EmptylistContext","package":"camllight.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorSelect","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntSubstract","package":"funcons.truffle.values"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorAppend","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecordFieldNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionCloseNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":true,"status":"KILLED","mutator":"null","method":{"name":"pattTuple","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"TuplePattAlg","package":"camllight.algebras.patts"},"tests":{"run":1,"ordered":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)"],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecordFactory$RecordMatch","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTuplePrefixNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecordRecordMatchNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"void","method":{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"MapMapUpdateNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorAppendNode","package":"funcons.truffle.collections"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BindingScopeNode","package":"funcons.truffle.entities"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode","package":"funcons.truffle.functions"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$VartypeContext","package":"camllightnosideeffects.parser"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}},{"detected":false,"status":"NO_COVERAGE","mutator":"null","method":{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$Fail","package":"funcons.truffle.controlflow"},"tests":{"run":0,"ordered":[],"killing":[],"succeeding":[]}}],"time":104082}