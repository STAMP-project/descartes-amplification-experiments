{"methods":[{"name":"patttuple","description":"()Lcamllight/parser/CLParser$PatttupleContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1618,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"TIMED_OUT","mutator":"null","tests-run":0,"tests":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Lcamllight/parser/CLParser$DecltypeappendixContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1325,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"TIMED_OUT","mutator":"null","tests-run":0,"tests":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":410,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"functionapp_sempred","description":"(Lcamllight/parser/CLParser$FunctionappContext;I)Z","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3282,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2801,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllight/parser/CLParser$DeclmonoContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1389,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing-tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)"],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Lcamllight/parser/CLParser$DeclexceptionappendixContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3016,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"TIMED_OUT","mutator":"null","tests-run":0,"tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Lcamllight/parser/CLParser$AnddeclContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2561,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"TIMED_OUT","mutator":"null","tests-run":0,"tests":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":121,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":612,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllight/parser/CLParser$LetExpContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1458,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing-tests":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)"],"succeeding-tests":[]}]},{"name":"functionapp","description":"(I)Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2805,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"recdecl","description":"()Lcamllight/parser/CLParser$RecdeclContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3074,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllight/parser/CLParser$EmptylistContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":958,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":87,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Lcamllight/parser/CLParser$DeclnewtypeappendixContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1584,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"TIMED_OUT","mutator":"null","tests-run":0,"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1731,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding-tests":[]}]},{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3270,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":616,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllight/parser/CLParser$DeclnewtypeContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3162,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllight/parser/CLParser$PattlistContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":912,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"killing-tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1964,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1960,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllight/parser/CLParser$RecdeclmonoContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2935,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllight/parser/CLParser$ConstantContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":192,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllight/parser/CLParser$TypeContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1055,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllight/parser/CLParser$DecloptionalvartypesContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1503,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Lcamllight/parser/CLParser$DecllabeltypeContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":283,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"varianttype","description":"()Lcamllight/parser/CLParser$VarianttypeContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2597,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllight/parser/CLParser$DeclorexpContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":862,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllight/parser/CLParser$HeadtaillistpattContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1221,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing-tests":["tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllight/parser/CLParser$VartypeContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":333,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllight/parser/CLParser$PattmatchsingleContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":995,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"recordsingle","description":"()Lcamllight/parser/CLParser$RecordsingleContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1271,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllight/parser/CLParser$PattmatchcurriedContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2653,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing-tests":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding-tests":[]}]},{"name":"exparray","description":"()Lcamllight/parser/CLParser$ExparrayContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2743,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)"],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":825,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding-tests":[]}]},{"name":"patt_sempred","description":"(Lcamllight/parser/CLParser$PattContext;I)Z","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3288,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"prog","description":"()Lcamllight/parser/CLParser$ProgContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2702,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"exp_sempred","description":"(Lcamllight/parser/CLParser$ExpContext;I)Z","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3306,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllight/parser/CLParser$DeclimplContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1656,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Lcamllight/parser/CLParser$TupletypelistContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":2884,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"TIMED_OUT","mutator":"null","tests-run":0,"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordpattappendix","description":"()Lcamllight/parser/CLParser$RecordpattappendixContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1865,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"mutations":[{"status":"TIMED_OUT","mutator":"null","tests-run":0,"tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type_sempred","description":"(Lcamllight/parser/CLParser$TypeContext;I)Z","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":3296,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Lcamllight/parser/CLParser$RecanddeclContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1829,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser","package":"camllight/parser","file-name":"CLParser.java","line-number":1051,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchsingleContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":984,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecllabeltypeContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":286,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdecl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3040,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecanddeclContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1795,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3262,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchcurriedContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2619,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecloptionalvartypesContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1492,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$AnddeclContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2527,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"varianttype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$VarianttypeContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2563,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PatttupleContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1607,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":814,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TupletypelistContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2850,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattlistContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":901,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$LetExpContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1447,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3248,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":605,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3272,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1710,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclorexpContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":851,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3128,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":601,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordpattappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecordpattappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1831,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclexceptionappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2982,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$HeadtaillistpattContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1210,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt_sempred","description":"(Lcamllightnorecursion/parser/CLNoRecParser$PattContext;I)Z","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3254,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$EmptylistContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":947,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecltypeappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1314,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2767,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclmonoContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2901,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"prog","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ProgContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2668,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":90,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecordsingleContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1260,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1044,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ConstantContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":195,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeappendixContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1573,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1930,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":409,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1040,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1926,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclmonoContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1378,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":124,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2771,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exparray","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExparrayContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2709,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$VartypeContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":336,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclimplContext;","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1645,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoRecParser","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3236,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":88,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TupletypelistContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2514,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$AnddeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2249,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattlistContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":878,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclexceptionappendixContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2646,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1798,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2431,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ConstantContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":193,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecllabeltypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":284,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1794,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecltypeappendixContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1237,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2918,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclimplContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1568,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$HeadtaillistpattContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1187,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1633,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecloptionalvartypesContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1415,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchsingleContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":961,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$LetExpContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1370,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"prog","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ProgContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2390,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclmonoContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1301,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":791,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":122,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeappendixContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1496,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$EmptylistContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":924,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PatttupleContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1530,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2912,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"varianttype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$VarianttypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2285,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1017,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2435,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchcurriedContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2341,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclorexpContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":828,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":607,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":411,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$VartypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":334,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2926,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclmonoContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2565,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":603,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp_sempred","description":"(Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;I)Z","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2936,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1021,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2792,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2704,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecanddeclContext;","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1718,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoSEParser","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2900,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnocollections/parser/CLNoColParser$EmptylistContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":833,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllightnocollections/parser/CLNoColParser$VartypeContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":332,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1490,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Lcamllightnocollections/parser/CLNoColParser$DecltypeappendixContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1094,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclmonoContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2369,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdecl","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2508,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"()Lcamllightnocollections/parser/CLNoColParser$PatttupleContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1387,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2704,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":120,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2596,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclimplContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1425,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchsingleContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":870,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":409,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchcurriedContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2145,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;I)Z","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2716,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Lcamllightnocollections/parser/CLNoColParser$TupletypelistContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2318,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnocollections/parser/CLNoColParser$DecloptionalvartypesContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1272,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":752,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclmonoContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1158,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":589,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$PattContext;I)Z","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2722,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":926,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":86,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1652,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclexceptionappendixContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2450,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllightnocollections/parser/CLNoColParser$LetExpContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1227,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1648,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclorexpContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":789,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"varianttype","description":"()Lcamllightnocollections/parser/CLNoColParser$VarianttypeContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2089,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2235,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Lcamllightnocollections/parser/CLNoColParser$AnddeclContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2053,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":930,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"prog","description":"()Lcamllightnocollections/parser/CLNoColParser$ProgContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2194,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"(I)Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2239,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$ExpContext;I)Z","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2740,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type_sempred","description":"(Lcamllightnocollections/parser/CLNoColParser$TypeContext;I)Z","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2730,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":593,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeappendixContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1353,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Lcamllightnocollections/parser/CLNoColParser$DecllabeltypeContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":282,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnocollections/parser/CLNoColParser$ConstantContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":191,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Lcamllightnocollections/parser/CLNoColParser$RecanddeclContext;","class":"CLNoColParser","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1575,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getRegularSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isOneOrMoreSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":46,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"hasPlaceholder","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":10,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getRegularOperator","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isToken","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isZeroOrMoreSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":42,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isRegular","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isLiteral","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":18,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isNonTerminal","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"returnVariable","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":62,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getSepListToken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":54,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"labelFor","description":"(ILjava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":58,"classification":"not-covered","detected":[],"not-detected":["null","\"\"","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isSepList","description":"(Ljava/lang/String;)Z","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":38,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getSepListSymbol","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Conventions","package":"noa/syntax","file-name":"Conventions.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["null","\"\"","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"meta","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":55,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"depends","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":83,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"freshToken","description":"()Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":101,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"nomVal","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":60,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"tag","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":40,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"type","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":30,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testType(tests.reference.TypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"typeVar","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":45,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"typeDef","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":114,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"clVariant","description":"(Ljava/lang/String;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":50,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"newType","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":106,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":2,"tests":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"boundType","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":96,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"scopeNominalCoercion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":78,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"variantMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":129,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"unknownType","description":"()Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":35,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"nomValSelect","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TypeFactory","package":"funcons/interpreter/types","file-name":"TypeFactory.java","line-number":70,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"unknownType","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"nomVal","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":66,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"typeDef","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":125,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"nomValSelect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":80,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"typeVar","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":48,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"newType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":120,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"clVariant","description":"(Ljava/lang/String;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":54,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tag","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"freshToken","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":111,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"variantMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":148,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"meta","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":60,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"scopeNominalCoercion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":86,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"boundType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":105,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"depends","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":95,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":583,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":589,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordpattappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":592,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$HeadtaillistpattContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":586,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":566,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ConstantContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":580,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":558,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":568,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":578,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordpattappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$RecordpattappendixContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":560,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"()Ljava/util/List;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":573,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattlistContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":576,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":570,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$EmptylistContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":563,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PatttupleContext;","class":"CLNoRecParser$PattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":556,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1951,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exparray","description":"()Lcamllight/parser/CLParser$ExparrayContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1948,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1940,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllight/parser/CLParser$LetExpContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1919,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1917,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllight/parser/CLParser$ConstantContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1938,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1928,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordsingle","description":"(I)Lcamllight/parser/CLParser$RecordsingleContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1925,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1942,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordsingle","description":"()Ljava/util/List;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1922,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1934,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1945,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1931,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"EMPTYARRAYTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1936,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"CLParser$ExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1915,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":600,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordpattappendix","description":"(I)Lcamllight/parser/CLParser$RecordpattappendixContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":571,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":594,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllight/parser/CLParser$PattlistContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":587,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllight/parser/CLParser$ConstantContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":591,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordpattappendix","description":"()Ljava/util/List;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":603,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":589,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllight/parser/CLParser$HeadtaillistpattContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":597,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":581,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"()Ljava/util/List;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":584,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllight/parser/CLParser$EmptylistContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":574,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"(I)Lcamllight/parser/CLParser$PatttupleContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":567,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":569,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":579,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":577,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1894,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1917,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordsingle","description":"()Ljava/util/List;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1888,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exparray","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExparrayContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1914,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$LetExpContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1885,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1897,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordsingle","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$RecordsingleContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1891,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1906,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1883,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1900,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1908,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ConstantContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1904,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1911,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"EMPTYARRAYTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1902,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"CLNoRecParser$ExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1881,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"compare","description":"(Lio/usethesource/vallang/IList;Lio/usethesource/vallang/IList;)I","class":"RascalValueComperator","package":"funcons/helper","file-name":"RascalValueComperator.java","line-number":43,"classification":"tested","detected":["0","1"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"0","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"1","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"compare","description":"(Lio/usethesource/vallang/IMap;Lio/usethesource/vallang/IMap;)I","class":"RascalValueComperator","package":"funcons/helper","file-name":"RascalValueComperator.java","line-number":53,"classification":"partially-tested","detected":["0"],"not-detected":["1"],"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"0","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]},{"status":"SURVIVED","mutator":"1","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"compare","description":"(Lio/usethesource/vallang/IString;Lio/usethesource/vallang/IString;)I","class":"RascalValueComperator","package":"funcons/helper","file-name":"RascalValueComperator.java","line-number":69,"classification":"tested","detected":["1","0"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"1","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"0","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"compare","description":"(Lio/usethesource/vallang/IValue;Lio/usethesource/vallang/IValue;)I","class":"RascalValueComperator","package":"funcons/helper","file-name":"RascalValueComperator.java","line-number":10,"classification":"tested","detected":["1","0"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"1","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"0","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"compare","description":"(Lio/usethesource/vallang/IBool;Lio/usethesource/vallang/IBool;)I","class":"RascalValueComperator","package":"funcons/helper","file-name":"RascalValueComperator.java","line-number":82,"classification":"not-covered","detected":[],"not-detected":["1","0"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"1","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"0","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"compare","description":"(Lfuncons/values/Variable;Lfuncons/values/Variable;)I","class":"RascalValueComperator","package":"funcons/helper","file-name":"RascalValueComperator.java","line-number":78,"classification":"partially-tested","detected":["0"],"not-detected":["1"],"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"0","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]},{"status":"SURVIVED","mutator":"1","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"compare","description":"(Lio/usethesource/vallang/INumber;Lio/usethesource/vallang/INumber;)I","class":"RascalValueComperator","package":"funcons/helper","file-name":"RascalValueComperator.java","line-number":33,"classification":"tested","detected":["1","0"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"1","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"0","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"runPerformanceTests","description":"()V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":166,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runPerformance","description":"(Ljava/lang/String;I)V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":69,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runExamples","description":"()V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":146,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":179,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"importStandardLibrary","description":"(Lio/usethesource/vallang/IValue;Ljava/util/Set;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":114,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":5,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding-tests":[]}]},{"name":"run","description":"(Ljava/lang/String;)V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":60,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runAll","description":"(Ljava/lang/String;)V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":89,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"interpret","description":"(Ljava/lang/String;)V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":51,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runAllButExclude","description":"(Ljava/lang/String;Ljava/util/List;)V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":93,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Ljava/lang/String;Lcamllight/algebras/AllAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"runGivenTests","description":"()V","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":152,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Ljava/lang/String;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":36,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"parse","description":"(Ljava/lang/String;Lcamllight/algebras/AllAlg;)Ljava/lang/Object;","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"importStandardLibrary","description":"(Lio/usethesource/vallang/IValue;)Lio/usethesource/vallang/IValue;","class":"CamlLight","package":"camllight","file-name":"CamlLight.java","line-number":110,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":5,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding-tests":[]}]},{"name":"list","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"list","description":"()Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":37,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listPrefixMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":62,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listHead","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":107,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"list","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":47,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)"],"killing-tests":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listLength","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":123,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listTail","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":112,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"projectList","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listPrefix","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":54,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listPrefixPatt","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":75,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"intClosedInterval","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":80,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listReverse","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":93,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listAppend","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ListFactory","package":"funcons/interpreter/collections","file-name":"ListFactory.java","line-number":98,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)"],"killing-tests":["tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)"],"succeeding-tests":[]}]},{"name":"listLength","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":132,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listHead","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":113,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listAppend","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":107,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"list","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":51,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intClosedInterval","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":91,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"list","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listPrefixPatt","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":77,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listTail","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":125,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"projectList","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listReverse","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":97,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listPrefix","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listPrefixMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":71,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"list","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleListFactory","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getParentBlock","description":"(Lcom/oracle/truffle/api/nodes/Node;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":122,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"findParent","description":"()Lfuncons/truffle/nodes/FNCLexicalScope;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":102,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getNode","description":"()Lcom/oracle/truffle/api/nodes/Node;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":136,"classification":"not-covered","detected":[],"not-detected":["\"\"","null","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createScope","description":"(Lcom/oracle/truffle/api/nodes/Node;)Lfuncons/truffle/nodes/FNCLexicalScope;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getVariables","description":"(Lcom/oracle/truffle/api/frame/Frame;)Ljava/lang/Object;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":226,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"collectVars","description":"(Lcom/oracle/truffle/api/nodes/Node;Lcom/oracle/truffle/api/nodes/Node;)Ljava/util/Map;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":197,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getVars","description":"()Ljava/util/Map;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":180,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getArguments","description":"(Lcom/oracle/truffle/api/frame/Frame;)Ljava/lang/Object;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"findChildrenBlock","description":"(Lcom/oracle/truffle/api/nodes/Node;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":86,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"collectArgs","description":"(Lcom/oracle/truffle/api/nodes/Node;)Ljava/util/Map;","class":"FNCLexicalScope","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":147,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declRecordType","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":111,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declNewConstrType","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":91,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declEnumException","description":"(Ljava/lang/String;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":126,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declEnumExceptionAppendix","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":144,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declMutableLabelType","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":121,"classification":"pseudo-tested","detected":[],"not-detected":["null"],"tests":["tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"SURVIVED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declConstrExceptionAppendix","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":149,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding-tests":[]}]},{"name":"declLabelType","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":116,"classification":"pseudo-tested","detected":[],"not-detected":["null"],"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"SURVIVED","mutator":"null","tests-run":3,"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declEnumTypeAppendix","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":105,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declTypeDefEquals","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":77,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declNewEnumType","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":82,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declConstrTypeAppendix","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":100,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"declConstrException","description":"(Ljava/lang/String;Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":135,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding-tests":[]}]},{"name":"declNewType","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"GlobalAlg","package":"camllight/algebras/decls","file-name":"GlobalAlg.java","line-number":45,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"recdecl","description":"()Lcamllight/parser/CLParser$RecdeclContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":401,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"(I)Lcamllight/parser/CLParser$DeclnewtypeappendixContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":383,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":389,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Ljava/util/List;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":398,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":369,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":392,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"(I)Lcamllight/parser/CLParser$DeclexceptionappendixContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":377,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"(I)Lcamllight/parser/CLParser$AnddeclContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":371,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllight/parser/CLParser$DeclmonoContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":380,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllight/parser/CLParser$DecloptionalvartypesContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":395,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":386,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLParser$DeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":374,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":368,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Ljava/util/List;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":397,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnocollections/parser/CLNoColParser$DecloptionalvartypesContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":391,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclmonoContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":379,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":373,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":388,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":385,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DeclexceptionappendixContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":376,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":394,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeappendixContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":382,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdecl","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":400,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"(I)Lcamllightnocollections/parser/CLNoColParser$AnddeclContext;","class":"CLNoColParser$DeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":370,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"clChar","description":"(Lio/usethesource/vallang/IValueFactory;Ljava/lang/String;)Lio/usethesource/vallang/IString;","class":"RascalCLStringFactory","package":"funcons/helper","file-name":"RascalCLStringFactory.java","line-number":11,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"filterCamlLightEscapes","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"RascalCLStringFactory","package":"funcons/helper","file-name":"RascalCLStringFactory.java","line-number":44,"classification":"tested","detected":["\"\"","\"A\"","null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"\"\"","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"\"A\"","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"clString","description":"(Lio/usethesource/vallang/IValueFactory;Ljava/lang/String;)Lio/usethesource/vallang/IString;","class":"RascalCLStringFactory","package":"funcons/helper","file-name":"RascalCLStringFactory.java","line-number":40,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"charIterator","description":"(Ljava/lang/String;)Ljava/util/Iterator;","class":"RascalCLStringFactory","package":"funcons/helper","file-name":"RascalCLStringFactory.java","line-number":61,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"getCamlLightEscape","description":"(Ljava/lang/Character;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons/helper","file-name":"RascalCLStringFactory.java","line-number":79,"classification":"tested","detected":["'\\40'","null","'A'"],"not-detected":[],"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"'\\40'","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"'A'","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"handleEscape","description":"(Ljava/util/Iterator;)Ljava/lang/Character;","class":"RascalCLStringFactory","package":"funcons/helper","file-name":"RascalCLStringFactory.java","line-number":69,"classification":"tested","detected":["'A'","'\\40'","null"],"not-detected":[],"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"'A'","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"'\\40'","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"expectIBool","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"asIBool","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":38,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isIBool","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isFNCFunction","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"expectFNCFunction","description":"(Ljava/lang/Object;)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":59,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"asIInteger","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IInteger;","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"asFNCFunction","description":"(Ljava/lang/Object;)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":54,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isIInteger","description":"(Ljava/lang/Object;)Z","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":18,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"expectIInteger","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IInteger;","class":"FNCTypesGen","package":"funcons/truffle/nodes","file-name":"FNCTypesGen.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildBuildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa/syntax","file-name":"InfixAlt.java","line-number":42,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildExp","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa/syntax","file-name":"InfixAlt.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tokenCondition","description":"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa/syntax","file-name":"InfixAlt.java","line-number":62,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildArg","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"InfixAlt","package":"noa/syntax","file-name":"InfixAlt.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["null","\"\"","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":396,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":375,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdecl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":402,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeappendixContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":384,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":387,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":399,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecloptionalvartypesContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":393,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":370,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclmonoContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":381,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$AnddeclContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":372,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":390,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DeclexceptionappendixContext;","class":"CLNoSEParser$DeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":378,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":567,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":587,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":594,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":581,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattlistContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":572,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PatttupleContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":565,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"()Ljava/util/List;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":569,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":589,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$EmptylistContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":578,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$HeadtaillistpattContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":584,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ConstantContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":575,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$PattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":591,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"print_intFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":12,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"raiseFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":36,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"print_floatFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":16,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"make_vectFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":63,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"refFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":8,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"int_of_floatFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"vect_lengthFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":50,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"float_of_intFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"print_newlineFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":24,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"concat_vectFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":41,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"print_stringFun","description":"()Ljava/lang/Object;","class":"StandardLibrary","package":"camllight/lib","file-name":"StandardLibrary.java","line-number":20,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"runGivenTests","description":"()V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":110,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Ljava/lang/String;Z)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":147,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runPerformance","description":"(Ljava/lang/String;I)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runAll","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":79,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runExamples","description":"()V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":101,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":142,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runPerformanceTests","description":"()V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":124,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"runAllButExclude","description":"(Ljava/lang/String;Ljava/util/List;)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":83,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"interpret","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":132,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"run","description":"(Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":47,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"CamlLightTruffle","package":"camllight","file-name":"CamlLightTruffle.java","line-number":23,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessKeyInfo","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":89,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":97,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":93,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":53,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessWrite","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariablesMapMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":69,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"greaterEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":38,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"smallerEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":43,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"notPhysicalEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":58,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equal","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":53,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"physicalEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":48,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"greater","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"lNot","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":23,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"smaller","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":33,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"lOr","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":18,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"lAnd","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":13,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"notEqual","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BoolLogicAlg","package":"camllight/algebras/exprs","file-name":"BoolLogicAlg.java","line-number":63,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"getOperator","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa/syntax","file-name":"NormalAlt.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["\"\"","null","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isInfix","description":"()Z","class":"NormalAlt","package":"noa/syntax","file-name":"NormalAlt.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getLhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa/syntax","file-name":"NormalAlt.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getRhs","description":"()Ljava/lang/String;","class":"NormalAlt","package":"noa/syntax","file-name":"NormalAlt.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecloptionalvartypesContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":394,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":376,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":391,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclmonoContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":382,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$AnddeclContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":373,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"anddecl","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":400,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":371,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":388,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtypeappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeappendixContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":385,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":397,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declexceptionappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DeclexceptionappendixContext;","class":"CLNoRecParser$DeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":379,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuplePrefixMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":82,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"tupleTail","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":64,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"tuple","description":"()Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":25,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"tupleHead","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":59,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"project","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":75,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)"],"succeeding-tests":[]}]},{"name":"tuplePrefixPatt","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":93,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"tuple","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":35,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"tuple","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":30,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"tuplePrefix","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":52,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"tuple","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleFactory","package":"funcons/interpreter/collections","file-name":"TupleFactory.java","line-number":43,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)"],"killing-tests":["tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)"],"succeeding-tests":[]}]},{"name":"groupByLevel","description":"()V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"collapseLevel","description":"(Ljava/util/Map;Ljava/lang/Integer;)V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":58,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addAlt","description":"(Lnoa/syntax/Alt;)V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"assertValidInfix","description":"(Lnoa/syntax/NormalAlt;Lnoa/syntax/NormalAlt;)V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":80,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"groupByLevel","description":"(Ljava/util/List;)Ljava/util/List;","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":40,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addLiftMethod","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":130,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"sortAlternatives","description":"(Ljava/util/Map;)Ljava/util/List;","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addParserMembers","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":119,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"generate","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":98,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addHeader","description":"(Ljava/lang/StringBuilder;)V","class":"Rules","package":"noa/syntax","file-name":"Rules.java","line-number":145,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuple","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"project","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":77,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuple","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuplePrefixMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":83,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuplePrefixPatt","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":94,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuple","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleTail","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":72,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleHead","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":60,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuple","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":47,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tuplePrefix","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleFactory","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":55,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1760,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1785,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1782,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1776,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1770,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ConstantContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1764,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$LetExpContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1767,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1773,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1779,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1762,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"letExp","description":"()Lcamllightnocollections/parser/CLNoColParser$LetExpContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1621,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1627,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnocollections/parser/CLNoColParser$ConstantContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1618,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1616,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1614,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1633,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1639,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1630,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1624,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser$ExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1636,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":53,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":97,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":93,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessKeyInfo","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionsObjectMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":89,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessExecute","description":"(I)Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":79,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":51,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":99,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"canHandle","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":55,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FNCFunctionMessageResolutionForeign","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":47,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"whenTrue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":91,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"preferOver","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":84,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"matchFailure","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exception","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"catch_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":60,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exception","description":"(Ljava/lang/String;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"throw_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":48,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"catchElseRethrow","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":66,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"fail","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"else_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleExceptionFactory","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":78,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exception","description":"(Ljava/lang/String;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"throw_","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":47,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"catch_","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":54,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"preferOver","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":82,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"whenTrue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":91,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"matchFailure","description":"()Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"fail","description":"()Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":25,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"else_","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":70,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"exception","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":37,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"catchElseRethrow","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"ExceptionFactory","package":"funcons/interpreter/controlflow","file-name":"ExceptionFactory.java","line-number":65,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":577,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":580,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":570,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":573,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"()Ljava/util/List;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":564,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patttuple","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PatttupleContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":560,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":562,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"WILDCARDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":575,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"constant","description":"()Lcamllightnocollections/parser/CLNoColParser$ConstantContext;","class":"CLNoColParser$PattContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":567,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessGetSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":53,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":97,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"FunctionNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsPointer","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":97,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsExecutable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsInstantiable","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasKeys","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsNull","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessHasSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":53,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessRead","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessGetSize","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessIsBoxed","description":"()Lcom/oracle/truffle/api/CallTarget;","class":"VariableNamesMessageResolutionForeign","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DecltypeappendixContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3107,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3113,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3105,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3101,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3119,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3116,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$DecllabeltypeContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3103,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$DeclnewtypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3110,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$EmptylistContext;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":183,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":180,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":186,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":179,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":185,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":187,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":181,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$ConstantContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":178,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lower1","description":"(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa/proxy","file-name":"Propagate.java","line-number":60,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"extend","description":"([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa/proxy","file-name":"Propagate.java","line-number":86,"classification":"not-covered","detected":[],"not-detected":["null","empty"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"empty","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lower","description":"(Ljava/lang/reflect/Method;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa/proxy","file-name":"Propagate.java","line-number":73,"classification":"not-covered","detected":[],"not-detected":["empty","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"empty","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"invoke","description":"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa/proxy","file-name":"Propagate.java","line-number":38,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"proxy","description":"(Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa/proxy","file-name":"Propagate.java","line-number":82,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"last","description":"([Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate$Lifter","package":"noa/proxy","file-name":"Propagate.java","line-number":95,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"int_","description":"(Ljava/lang/Integer;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":23,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)"],"succeeding-tests":[]}]},{"name":"null_","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":53,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"float_","description":"(Ljava/lang/Float;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"char_","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":48,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"bool","description":"(Ljava/lang/Boolean;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":33,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"constr","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":43,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"string","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":38,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding-tests":[]}]},{"name":"emptyList","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ConstantsAlg","package":"camllight/algebras/constants","file-name":"ConstantsAlg.java","line-number":63,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"recursiveTyped","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":85,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"recursive","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":80,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"followFwd","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":90,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"setForwards","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":51,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"freshFwds","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":31,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"followIfFwd","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":95,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"freshFwd","description":"()Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":26,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"reclose","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecursiveFactory","package":"funcons/interpreter/recursion","file-name":"RecursiveFactory.java","line-number":72,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"isAnnotatable","description":"()Z","class":"ExternalRascalValue","package":"funcons/values/properties","file-name":"ExternalRascalValue.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getType","description":"()Lio/usethesource/vallang/type/Type;","class":"ExternalRascalValue","package":"funcons/values/properties","file-name":"ExternalRascalValue.java","line-number":14,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]}]},{"name":"mayHaveKeywordParameters","description":"()Z","class":"ExternalRascalValue","package":"funcons/values/properties","file-name":"ExternalRascalValue.java","line-number":40,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"asAnnotatable","description":"()Lio/usethesource/vallang/IAnnotatable;","class":"ExternalRascalValue","package":"funcons/values/properties","file-name":"ExternalRascalValue.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"encodeAsConstructor","description":"()Lio/usethesource/vallang/IConstructor;","class":"ExternalRascalValue","package":"funcons/values/properties","file-name":"ExternalRascalValue.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"asWithKeywordParameters","description":"()Lio/usethesource/vallang/IWithKeywordParameters;","class":"ExternalRascalValue","package":"funcons/values/properties","file-name":"ExternalRascalValue.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"(I)Lcamllight/parser/CLParser$DecltypeappendixContext;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3141,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3136,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3153,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3147,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3135,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3150,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"(I)Lcamllight/parser/CLParser$DecllabeltypeContext;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3138,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$DeclnewtypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3144,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":176,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$EmptylistContext;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":181,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":185,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":183,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":178,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":184,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":179,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$ConstantContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":177,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"bindValue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":29,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"scope","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":46,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"id","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":19,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"closure","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":54,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"accum","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":65,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"environment","description":"()Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":60,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.BindingFactoryTest.testEnvironment(tests.reference.BindingFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.BindingFactoryTest.testEnvironment(tests.reference.BindingFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"nameId","description":"(Ljava/lang/String;Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":24,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"boundValue","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BindingFactory","package":"funcons/interpreter/entities","file-name":"BindingFactory.java","line-number":41,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatSubtract","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatMultiply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatAdd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatPowerOf","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":59,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatNegate","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatDivide","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lit","description":"(Ljava/lang/Double;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatModulo","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFloatFactory","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DecltypeappendixContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2575,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"(I)Lcamllightnocollections/parser/CLNoColParser$DecllabeltypeContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2571,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2573,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2569,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2578,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2581,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2587,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLNoColParser$DeclnewtypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2584,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":178,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":184,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllight/parser/CLParser$EmptylistContext;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":180,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":183,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":182,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":177,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":176,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$ConstantContext","package":"camllight/parser","file-name":"CLParser.java","line-number":175,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DecllabeltypeContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2768,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2780,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decltypeappendix","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$DecltypeappendixContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2771,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2766,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2765,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2783,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2774,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decllabeltype","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclnewtypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2777,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1707,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1705,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1716,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1719,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1722,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1703,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllight/parser/CLParser$PattmatchsingleContext;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1710,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllight/parser/CLParser$PattmatchcurriedContext;","class":"CLParser$FunctionContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1713,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp_sempred","description":"(Lnoa/syntax/demo/DemoParser$ExpContext;I)Z","class":"DemoParser","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":259,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"prog","description":"()Lnoa/syntax/demo/DemoParser$ProgContext;","class":"DemoParser","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":232,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lift","description":"(Ljava/lang/String;Ljava/util/List;[Ljava/lang/Object;)Ljava/util/List;","class":"DemoParser","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":51,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":89,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":93,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"sempred","description":"(Lorg/antlr/v4/runtime/RuleContext;II)Z","class":"DemoParser","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":253,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattId","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":31,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":2,"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)"],"succeeding-tests":[]}]},{"name":"pattConstr","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":56,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattConstant","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":51,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)"],"succeeding-tests":[]}]},{"name":"pattType","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":36,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing-tests":["tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)"],"succeeding-tests":[]}]},{"name":"pattConstrPatt","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":66,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding-tests":[]}]},{"name":"pattAs","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":41,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"pattWildcard","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":46,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"optionalPatt","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattAlg","package":"camllight/algebras/patts","file-name":"PattAlg.java","line-number":81,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"closure","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":62,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"nameId","description":"(Ljava/lang/String;Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"bindValue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":36,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"scope","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"id","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"environment","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":67,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"boundValue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accum","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBindingFactory","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":72,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equal","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"smaller","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"physicalEqual","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":56,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"not","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"greater","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"bool","description":"(Ljava/lang/Boolean;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"smallerEqual","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":44,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"greaterEqual","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleBoolFactory","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatNegate","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":27,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatDivide","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":51,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatAdd","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":18,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatPowerOf","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":69,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"lit","description":"(Ljava/lang/Double;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":13,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testLit(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testLit(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatSubtract","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":33,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatModulo","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":60,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatMultiply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FloatFactory","package":"funcons/interpreter/values","file-name":"FloatFactory.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)"],"succeeding-tests":[]}]},{"name":"greaterEqual","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":39,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"bool","description":"(Ljava/lang/Boolean;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":15,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.BoolFactoryTest.testBool(tests.reference.BoolFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.BoolFactoryTest.testBool(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"smallerEqual","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":49,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"greater","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":25,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"smaller","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":34,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"not","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":20,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"physicalEqual","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":60,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equal","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"BoolFactory","package":"funcons/interpreter/values","file-name":"BoolFactory.java","line-number":54,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)"],"succeeding-tests":[]}]},{"name":"CHARTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":182,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"emptylist","description":"()Lcamllightnocollections/parser/CLNoColParser$EmptylistContext;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":179,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"STRINGTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":183,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"NULLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":176,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":175,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"INTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":177,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"FLOATTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":174,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"BOOLTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$ConstantContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":181,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"chartoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight/parser","file-name":"Tokens.java","line-number":30,"classification":"tested","detected":["\"A\"","null","\"\""],"not-detected":[],"tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"\"A\"","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"\"\"","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"stringtoken","description":"(Ljava/lang/String;)Ljava/lang/String;","class":"Tokens","package":"camllight/parser","file-name":"Tokens.java","line-number":25,"classification":"tested","detected":["null","\"\"","\"A\""],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"\"\"","tests-run":1,"tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"\"A\"","tests-run":1,"tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding-tests":[]}]},{"name":"booltoken","description":"(Ljava/lang/String;)Z","class":"Tokens","package":"camllight/parser","file-name":"Tokens.java","line-number":20,"classification":"tested","detected":["true","false"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"true","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"false","tests-run":1,"tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)"],"succeeding-tests":[]}]},{"name":"followFwd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":58,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"freshFwds","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recursiveTyped","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"followIfFwd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"setForwards","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"reclose","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":42,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"freshFwd","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recursive","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecursiveFactory","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":47,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intNegate","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intAdd","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lit","description":"(Ljava/lang/Integer;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":15,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intDivide","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intModulo","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":59,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intSubtract","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intMultiply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntFactory","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"matchWith","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight/algebras/exprs","file-name":"ControlAlg.java","line-number":57,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"ifElse","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight/algebras/exprs","file-name":"ControlAlg.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"whileTrue","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight/algebras/exprs","file-name":"ControlAlg.java","line-number":37,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"seq","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight/algebras/exprs","file-name":"ControlAlg.java","line-number":62,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"for_","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight/algebras/exprs","file-name":"ControlAlg.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"if_","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight/algebras/exprs","file-name":"ControlAlg.java","line-number":27,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"forDownto","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ControlAlg","package":"camllight/algebras/exprs","file-name":"ControlAlg.java","line-number":52,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"abs","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"abs","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":40,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"bind","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":78,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"compose","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":67,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"applyToEach","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":61,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"apply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":46,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"close","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleFunctionFactory","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":73,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCDispatchNodeGen","package":"funcons/truffle/functions","file-name":"FNCDispatchNodeGen.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/functions/FNCDispatchNode;","class":"FNCDispatchNodeGen","package":"funcons/truffle/functions","file-name":"FNCDispatchNodeGen.java","line-number":150,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isValid_","description":"(Lcom/oracle/truffle/api/Assumption;)Z","class":"FNCDispatchNodeGen","package":"funcons/truffle/functions","file-name":"FNCDispatchNodeGen.java","line-number":146,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"removeDirect_","description":"(Ljava/lang/Object;)V","class":"FNCDispatchNodeGen","package":"funcons/truffle/functions","file-name":"FNCDispatchNodeGen.java","line-number":118,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCDispatchNodeGen","package":"funcons/truffle/functions","file-name":"FNCDispatchNodeGen.java","line-number":105,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeDispatch","description":"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCDispatchNodeGen","package":"funcons/truffle/functions","file-name":"FNCDispatchNodeGen.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"generate","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V","class":"PGen","package":"noa/syntax","file-name":"PGen.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"allMethodsOf","description":"(Ljava/lang/Class;)[Ljava/lang/reflect/Method;","class":"PGen","package":"noa/syntax","file-name":"PGen.java","line-number":105,"classification":"not-covered","detected":[],"not-detected":["empty","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"empty","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addProductions","description":"(Lnoa/syntax/Rules;)V","class":"PGen","package":"noa/syntax","file-name":"PGen.java","line-number":121,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"generate","description":"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V","class":"PGen","package":"noa/syntax","file-name":"PGen.java","line-number":36,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"generateTokens","description":"(Ljava/lang/StringBuilder;)V","class":"PGen","package":"noa/syntax","file-name":"PGen.java","line-number":83,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"allMethods","description":"(Ljava/lang/Class;Ljava/util/Set;)V","class":"PGen","package":"noa/syntax","file-name":"PGen.java","line-number":111,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recDeclIdentPattsExp","description":"(Ljava/lang/Object;Ljava/util/List;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight/algebras/decls","file-name":"BindAlg.java","line-number":61,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding-tests":[]}]},{"name":"recDeclIdentExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight/algebras/decls","file-name":"BindAlg.java","line-number":68,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declBindMonoFunc","description":"(Ljava/lang/Object;Ljava/util/List;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight/algebras/decls","file-name":"BindAlg.java","line-number":106,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)"],"succeeding-tests":[]}]},{"name":"recAndDecl","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"BindAlg","package":"camllight/algebras/decls","file-name":"BindAlg.java","line-number":46,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recDeclPattTypeExp","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight/algebras/decls","file-name":"BindAlg.java","line-number":73,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"andDecl","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"BindAlg","package":"camllight/algebras/decls","file-name":"BindAlg.java","line-number":83,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"killing-tests":["tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)"],"succeeding-tests":[]}]},{"name":"declBindMono","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"BindAlg","package":"camllight/algebras/decls","file-name":"BindAlg.java","line-number":101,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing-tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)"],"succeeding-tests":[]}]},{"name":"apply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons/interpreter/functions","file-name":"FunctionFactory.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding-tests":[]}]},{"name":"abs","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons/interpreter/functions","file-name":"FunctionFactory.java","line-number":27,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding-tests":[]}]},{"name":"abs","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons/interpreter/functions","file-name":"FunctionFactory.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"applyToEach","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons/interpreter/functions","file-name":"FunctionFactory.java","line-number":48,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)"],"succeeding-tests":[]}]},{"name":"compose","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons/interpreter/functions","file-name":"FunctionFactory.java","line-number":61,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"killing-tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding-tests":[]}]},{"name":"close","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons/interpreter/functions","file-name":"FunctionFactory.java","line-number":67,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)"],"succeeding-tests":[]}]},{"name":"bind","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"FunctionFactory","package":"funcons/interpreter/functions","file-name":"FunctionFactory.java","line-number":75,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"succeeding-tests":[]}]},{"name":"intSubtract","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons/interpreter/values","file-name":"IntFactory.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)"],"succeeding-tests":[]}]},{"name":"intDivide","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons/interpreter/values","file-name":"IntFactory.java","line-number":46,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)"],"killing-tests":["tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)"],"succeeding-tests":[]}]},{"name":"lit","description":"(Ljava/lang/Integer;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons/interpreter/values","file-name":"IntFactory.java","line-number":14,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseMap(tests.reference.PolyTypeFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiateIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseDecl(tests.reference.PolyTypeFactoryTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.IntFactoryTest.testLit(tests.reference.IntFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneralise(tests.reference.PolyTypeFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiatePoly(tests.reference.PolyTypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testLit(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneralise(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseMap(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiateIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseDecl(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiatePoly(tests.reference.PolyTypeFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)"],"succeeding-tests":[]}]},{"name":"intMultiply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons/interpreter/values","file-name":"IntFactory.java","line-number":39,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)"],"succeeding-tests":[]}]},{"name":"intNegate","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons/interpreter/values","file-name":"IntFactory.java","line-number":26,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"killing-tests":["tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)"],"succeeding-tests":[]}]},{"name":"intModulo","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons/interpreter/values","file-name":"IntFactory.java","line-number":53,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"killing-tests":["tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)"],"succeeding-tests":[]}]},{"name":"intAdd","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntFactory","package":"funcons/interpreter/values","file-name":"IntFactory.java","line-number":19,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)"],"succeeding-tests":[]}]},{"name":"only","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons/interpreter/functions","file-name":"PatternFactory.java","line-number":26,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)"],"succeeding-tests":[]}]},{"name":"any","description":"()Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons/interpreter/functions","file-name":"PatternFactory.java","line-number":31,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)"],"succeeding-tests":[]}]},{"name":"pattAbs","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons/interpreter/functions","file-name":"PatternFactory.java","line-number":41,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"killing-tests":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"succeeding-tests":[]}]},{"name":"pattUnion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons/interpreter/functions","file-name":"PatternFactory.java","line-number":47,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)"],"succeeding-tests":[]}]},{"name":"pattNonBinding","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons/interpreter/functions","file-name":"PatternFactory.java","line-number":57,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)"],"succeeding-tests":[]}]},{"name":"match","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PatternFactory","package":"funcons/interpreter/functions","file-name":"PatternFactory.java","line-number":36,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)"],"succeeding-tests":[]}]},{"name":"intMod","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight/algebras/exprs","file-name":"IntCalcAlg.java","line-number":37,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"killing-tests":["tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"intSub","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight/algebras/exprs","file-name":"IntCalcAlg.java","line-number":22,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"intAdd","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight/algebras/exprs","file-name":"IntCalcAlg.java","line-number":17,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing-tests":["tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"intMultiply","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight/algebras/exprs","file-name":"IntCalcAlg.java","line-number":27,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"intDivide","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight/algebras/exprs","file-name":"IntCalcAlg.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)"],"killing-tests":["tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"intUnarySub","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"IntCalcAlg","package":"camllight/algebras/exprs","file-name":"IntCalcAlg.java","line-number":12,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"killing-tests":["tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"tupleType","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons/interpreter/types","file-name":"TupleTypeFactory.java","line-number":25,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"killing-tests":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"tupleTypePrefix","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons/interpreter/types","file-name":"TupleTypeFactory.java","line-number":40,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"tupleType","description":"()Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons/interpreter/types","file-name":"TupleTypeFactory.java","line-number":15,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"projectType","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons/interpreter/types","file-name":"TupleTypeFactory.java","line-number":47,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"killing-tests":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"tupleType","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons/interpreter/types","file-name":"TupleTypeFactory.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"killing-tests":["tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"tupleType","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"TupleTypeFactory","package":"funcons/interpreter/types","file-name":"TupleTypeFactory.java","line-number":20,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)"],"killing-tests":["tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"projectType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTupleTypeFactory.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTupleTypeFactory.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleTypePrefix","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTupleTypeFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTupleTypeFactory.java","line-number":38,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleType","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTupleTypeFactory.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleType","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleTupleTypeFactory","package":"funcons/truffle/types","file-name":"TruffleTupleTypeFactory.java","line-number":15,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordSelectApplyFunction","description":"(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight/algebras/exprs","file-name":"RecordAlg.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordEntryMutableSingle","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight/algebras/exprs","file-name":"RecordAlg.java","line-number":35,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding-tests":[]}]},{"name":"recordExp","description":"(Ljava/util/List;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight/algebras/exprs","file-name":"RecordAlg.java","line-number":20,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding-tests":[]}]},{"name":"recordEntrySingle","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight/algebras/exprs","file-name":"RecordAlg.java","line-number":30,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding-tests":[]}]},{"name":"recordAssignExp","description":"(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight/algebras/exprs","file-name":"RecordAlg.java","line-number":53,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"succeeding-tests":[]}]},{"name":"recordSelectExp","description":"(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;","class":"RecordAlg","package":"camllight/algebras/exprs","file-name":"RecordAlg.java","line-number":40,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"succeeding-tests":[]}]},{"name":"executeConvert","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCTypeToForeignNodeGen","package":"funcons/truffle/functions","file-name":"FNCTypeToForeignNodeGen.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"fallbackGuard_","description":"(ILjava/lang/Object;)Z","class":"FNCTypeToForeignNodeGen","package":"funcons/truffle/functions","file-name":"FNCTypeToForeignNodeGen.java","line-number":71,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCTypeToForeignNodeGen","package":"funcons/truffle/functions","file-name":"FNCTypeToForeignNodeGen.java","line-number":36,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/functions/FNCTypeToForeignNode;","class":"FNCTypeToForeignNodeGen","package":"funcons/truffle/functions","file-name":"FNCTypeToForeignNodeGen.java","line-number":78,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCTypeToForeignNodeGen","package":"funcons/truffle/functions","file-name":"FNCTypeToForeignNodeGen.java","line-number":61,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"variantDecl","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight/algebras/typeexprs","file-name":"TypeExpAlg.java","line-number":71,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"typeId","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight/algebras/typeexprs","file-name":"TypeExpAlg.java","line-number":21,"classification":"pseudo-tested","detected":[],"not-detected":["null"],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"SURVIVED","mutator":"null","tests-run":14,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"variantTypeDecl","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight/algebras/typeexprs","file-name":"TypeExpAlg.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupleType","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight/algebras/typeexprs","file-name":"TypeExpAlg.java","line-number":54,"classification":"pseudo-tested","detected":[],"not-detected":["null"],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"mutations":[{"status":"SURVIVED","mutator":"null","tests-run":2,"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"varType","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight/algebras/typeexprs","file-name":"TypeExpAlg.java","line-number":49,"classification":"pseudo-tested","detected":[],"not-detected":["null"],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"SURVIVED","mutator":"null","tests-run":3,"tests":["tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionType","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"TypeExpAlg","package":"camllight/algebras/typeexprs","file-name":"TypeExpAlg.java","line-number":27,"classification":"pseudo-tested","detected":[],"not-detected":["null"],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)"],"mutations":[{"status":"SURVIVED","mutator":"null","tests-run":1,"tests":["tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$TypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":906,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"(I)Lcamllightnocollections/parser/CLNoColParser$TupletypelistContext;","class":"CLNoColParser$TypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":904,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllightnocollections/parser/CLNoColParser$VartypeContext;","class":"CLNoColParser$TypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":914,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$TypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":908,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Ljava/util/List;","class":"CLNoColParser$TypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":911,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLNoColParser$TypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":917,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatMultiplyExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight/algebras/exprs","file-name":"FloatCalcAlg.java","line-number":27,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"floatAddExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight/algebras/exprs","file-name":"FloatCalcAlg.java","line-number":17,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"floatSubtractExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight/algebras/exprs","file-name":"FloatCalcAlg.java","line-number":22,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"floatPowerExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight/algebras/exprs","file-name":"FloatCalcAlg.java","line-number":37,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"floatNegateExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight/algebras/exprs","file-name":"FloatCalcAlg.java","line-number":12,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"floatDivideExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FloatCalcAlg","package":"camllight/algebras/exprs","file-name":"FloatCalcAlg.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"killing-tests":["tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)"],"succeeding-tests":[]}]},{"name":"pattUnion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons/truffle/functions","file-name":"TrufflePatternFactory.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"match","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons/truffle/functions","file-name":"TrufflePatternFactory.java","line-number":36,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattNonBinding","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons/truffle/functions","file-name":"TrufflePatternFactory.java","line-number":62,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattAbs","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons/truffle/functions","file-name":"TrufflePatternFactory.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"only","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons/truffle/functions","file-name":"TrufflePatternFactory.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"any","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePatternFactory","package":"funcons/truffle/functions","file-name":"TrufflePatternFactory.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"innerExpArrayMulti","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight/algebras/exprs","file-name":"ArrayAlg.java","line-number":32,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)"],"succeeding-tests":[]}]},{"name":"innerExpArrayDouble","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight/algebras/exprs","file-name":"ArrayAlg.java","line-number":27,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)"],"succeeding-tests":[]}]},{"name":"arraySelect","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight/algebras/exprs","file-name":"ArrayAlg.java","line-number":37,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"succeeding-tests":[]}]},{"name":"emptyArray","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight/algebras/exprs","file-name":"ArrayAlg.java","line-number":12,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)"],"succeeding-tests":[]}]},{"name":"arrayAssign","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight/algebras/exprs","file-name":"ArrayAlg.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"succeeding-tests":[]}]},{"name":"arraySingle","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ArrayAlg","package":"camllight/algebras/exprs","file-name":"ArrayAlg.java","line-number":17,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"succeeding-tests":[]}]},{"name":"recordMatch","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":94,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"record","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":40,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"field","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordOver","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":59,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordUnion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":67,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordSelect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleRecordFactory","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":53,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vectorLength","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":40,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vectorSelect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vectorAssign","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vector","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vector","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":15,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vectorAppend","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleVectorFactory","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"(I)Lcamllight/parser/CLParser$TupletypelistContext;","class":"CLParser$TypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1029,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Ljava/util/List;","class":"CLParser$TypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1036,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLParser$TypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1042,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllight/parser/CLParser$VartypeContext;","class":"CLParser$TypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1039,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$TypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1033,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$TypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1031,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"mapDomain","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons/interpreter/collections","file-name":"MapFactory.java","line-number":38,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)"],"succeeding-tests":[]}]},{"name":"map","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons/interpreter/collections","file-name":"MapFactory.java","line-number":17,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing-tests":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)"],"succeeding-tests":[]}]},{"name":"mapUpdate","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons/interpreter/collections","file-name":"MapFactory.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)"],"succeeding-tests":[]}]},{"name":"mapGet","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons/interpreter/collections","file-name":"MapFactory.java","line-number":69,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)"],"succeeding-tests":[]}]},{"name":"mapUnion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons/interpreter/collections","file-name":"MapFactory.java","line-number":48,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)"],"succeeding-tests":[]}]},{"name":"mapOver","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"MapFactory","package":"funcons/interpreter/collections","file-name":"MapFactory.java","line-number":57,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)"],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$VartypeContext;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1028,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1022,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$TupletypelistContext;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1018,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1020,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1031,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Ljava/util/List;","class":"CLNoRecParser$TypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1025,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vector","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons/interpreter/collections","file-name":"VectorFactory.java","line-number":21,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]}]},{"name":"vector","description":"()Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons/interpreter/collections","file-name":"VectorFactory.java","line-number":16,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]}]},{"name":"vectorSelect","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons/interpreter/collections","file-name":"VectorFactory.java","line-number":26,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]}]},{"name":"vectorAssign","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons/interpreter/collections","file-name":"VectorFactory.java","line-number":50,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]}]},{"name":"vectorAppend","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons/interpreter/collections","file-name":"VectorFactory.java","line-number":35,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]}]},{"name":"vectorLength","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"VectorFactory","package":"funcons/interpreter/collections","file-name":"VectorFactory.java","line-number":44,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]}]},{"name":"mapDomain","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":54,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"mapGet","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":73,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"mapUpdate","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"mapOver","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":64,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"mapUnion","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":59,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"map","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleMapFactory","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":16,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":997,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$VartypeContext;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1005,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Ljava/util/List;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1002,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":999,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$TupletypelistContext;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":995,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tupletypelist","description":"()Ljava/util/List;","class":"CLNoSEParser$TypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1008,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2544,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2550,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2547,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2553,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$RecdeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2556,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntNegateNodeGen","package":"funcons/truffle/values","file-name":"IntIntNegateNodeGen.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IInteger;","class":"IntIntNegateNodeGen","package":"funcons/truffle/values","file-name":"IntIntNegateNodeGen.java","line-number":44,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntNegateNodeGen","package":"funcons/truffle/values","file-name":"IntIntNegateNodeGen.java","line-number":67,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntNegateNode;","class":"IntIntNegateNodeGen","package":"funcons/truffle/values","file-name":"IntIntNegateNodeGen.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntNegateNodeGen","package":"funcons/truffle/values","file-name":"IntIntNegateNodeGen.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatDivideNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatDivideNodeGen.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatDivideNode;","class":"FloatFloatDivideNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatDivideNodeGen.java","line-number":85,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatDivideNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatDivideNodeGen.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatDivideNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatDivideNodeGen.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatDivideNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatDivideNodeGen.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1689,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1698,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchsingleContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1692,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchcurriedContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1695,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser$FunctionContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1701,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntModuloNodeGen","package":"funcons/truffle/values","file-name":"IntIntModuloNodeGen.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntModuloNodeGen","package":"funcons/truffle/values","file-name":"IntIntModuloNodeGen.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntModuloNodeGen","package":"funcons/truffle/values","file-name":"IntIntModuloNodeGen.java","line-number":123,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntModuloNode;","class":"IntIntModuloNodeGen","package":"funcons/truffle/values","file-name":"IntIntModuloNodeGen.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntModuloNodeGen","package":"funcons/truffle/values","file-name":"IntIntModuloNodeGen.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2357,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2351,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2348,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2354,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$RecdeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2360,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$RecdeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2914,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$RecdeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2920,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$RecdeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2926,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$RecdeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2917,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$RecdeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2923,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNodeGen.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"RecursiveFollowIfFwdNodeGen","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNodeGen.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNodeGen.java","line-number":82,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNodeGen.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/recursion/RecursiveFollowIfFwdNode;","class":"RecursiveFollowIfFwdNodeGen","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNodeGen.java","line-number":92,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolGreaterNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterNodeGen.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/BoolGreaterNode;","class":"BoolGreaterNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterNodeGen.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BoolGreaterNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterNodeGen.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolGreaterNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterNodeGen.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"BoolGreaterNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterNodeGen.java","line-number":123,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchsingleContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1472,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchcurriedContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1475,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1469,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1478,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser$FunctionContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1481,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"camlLightChar","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons/interpreter/values","file-name":"StringFactory.java","line-number":29,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"camlLightString","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons/interpreter/values","file-name":"StringFactory.java","line-number":24,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"stringAppend","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons/interpreter/values","file-name":"StringFactory.java","line-number":34,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"string","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons/interpreter/values","file-name":"StringFactory.java","line-number":14,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"char_","description":"(Ljava/lang/Character;)Lfuncons/carriers/IEval;","class":"StringFactory","package":"funcons/interpreter/values","file-name":"StringFactory.java","line-number":19,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)"],"killing-tests":["tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)"],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatMultiplyNode;","class":"FloatFloatMultiplyNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatMultiplyNodeGen.java","line-number":85,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatMultiplyNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatMultiplyNodeGen.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatMultiplyNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatMultiplyNodeGen.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatMultiplyNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatMultiplyNodeGen.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatMultiplyNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatMultiplyNodeGen.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"effect","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ifTrue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"for_","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":48,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"seq","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"whileTrue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleLogicControlFactory","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":42,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolEqualNodeGen.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/BoolEqualNode;","class":"BoolEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolEqualNodeGen.java","line-number":90,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BoolEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolEqualNodeGen.java","line-number":47,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"BoolEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolEqualNodeGen.java","line-number":80,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolEqualNodeGen.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntAddNode;","class":"IntIntAddNodeGen","package":"funcons/truffle/values","file-name":"IntIntAddNodeGen.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntAddNodeGen","package":"funcons/truffle/values","file-name":"IntIntAddNodeGen.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntAddNodeGen","package":"funcons/truffle/values","file-name":"IntIntAddNodeGen.java","line-number":123,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntAddNodeGen","package":"funcons/truffle/values","file-name":"IntIntAddNodeGen.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntAddNodeGen","package":"funcons/truffle/values","file-name":"IntIntAddNodeGen.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatNegateNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatNegateNodeGen.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatNegateNode;","class":"FloatFloatNegateNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatNegateNodeGen.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatNegateNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatNegateNodeGen.java","line-number":67,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatNegateNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatNegateNodeGen.java","line-number":44,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatNegateNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatNegateNodeGen.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntMultiplyNodeGen","package":"funcons/truffle/values","file-name":"IntIntMultiplyNodeGen.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntMultiplyNodeGen","package":"funcons/truffle/values","file-name":"IntIntMultiplyNodeGen.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntMultiplyNode;","class":"IntIntMultiplyNodeGen","package":"funcons/truffle/values","file-name":"IntIntMultiplyNodeGen.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntMultiplyNodeGen","package":"funcons/truffle/values","file-name":"IntIntMultiplyNodeGen.java","line-number":123,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntMultiplyNodeGen","package":"funcons/truffle/values","file-name":"IntIntMultiplyNodeGen.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"partialAppN","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons/interpreter/functions","file-name":"CurryFactory.java","line-number":29,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)"],"succeeding-tests":[]}]},{"name":"partialApp","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons/interpreter/functions","file-name":"CurryFactory.java","line-number":24,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)"],"killing-tests":["tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)"],"succeeding-tests":[]}]},{"name":"curryN","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons/interpreter/functions","file-name":"CurryFactory.java","line-number":39,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)"],"succeeding-tests":[]}]},{"name":"uncurry","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons/interpreter/functions","file-name":"CurryFactory.java","line-number":54,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"killing-tests":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"succeeding-tests":[]}]},{"name":"curry","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"CurryFactory","package":"funcons/interpreter/functions","file-name":"CurryFactory.java","line-number":34,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)"],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntDivideNodeGen","package":"funcons/truffle/values","file-name":"IntIntDivideNodeGen.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/INumber;","class":"IntIntDivideNodeGen","package":"funcons/truffle/values","file-name":"IntIntDivideNodeGen.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntIntDivideNodeGen","package":"funcons/truffle/values","file-name":"IntIntDivideNodeGen.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/IntIntDivideNode;","class":"IntIntDivideNodeGen","package":"funcons/truffle/values","file-name":"IntIntDivideNodeGen.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntIntDivideNodeGen","package":"funcons/truffle/values","file-name":"IntIntDivideNodeGen.java","line-number":123,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"stringAppend","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":46,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"string","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"camlLightString","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"char_","description":"(Ljava/lang/Character;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"camlLightChar","description":"(Ljava/lang/String;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleStringFactory","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"mul","description":"(Lnoa/syntax/demo/IPrint;Lnoa/syntax/demo/IPrint;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa/syntax/demo","file-name":"PrintExp.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"avg","description":"(Ljava/util/List;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa/syntax/demo","file-name":"PrintExp.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"add","description":"(Lnoa/syntax/demo/IPrint;Lnoa/syntax/demo/IPrint;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa/syntax/demo","file-name":"PrintExp.java","line-number":9,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lit","description":"(I)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa/syntax/demo","file-name":"PrintExp.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"avg2","description":"(Ljava/util/List;)Lnoa/syntax/demo/IPrint;","class":"PrintExp","package":"noa/syntax/demo","file-name":"PrintExp.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatPowerOfNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatPowerOfNodeGen.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatPowerOf;","class":"FloatFloatPowerOfNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatPowerOfNodeGen.java","line-number":98,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatPowerOfNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatPowerOfNodeGen.java","line-number":88,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatPowerOfNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatPowerOfNodeGen.java","line-number":55,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatPowerOfNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatPowerOfNodeGen.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lit","description":"(I)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa/syntax/demo","file-name":"EvalExp.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"add","description":"(Lnoa/syntax/demo/IEval;Lnoa/syntax/demo/IEval;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa/syntax/demo","file-name":"EvalExp.java","line-number":9,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"mul","description":"(Lnoa/syntax/demo/IEval;Lnoa/syntax/demo/IEval;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa/syntax/demo","file-name":"EvalExp.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"avg2","description":"(Ljava/util/List;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa/syntax/demo","file-name":"EvalExp.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"avg","description":"(Ljava/util/List;)Lnoa/syntax/demo/IEval;","class":"EvalExp","package":"noa/syntax/demo","file-name":"EvalExp.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"ToDot$Node","package":"noa/proxy","file-name":"ToDot.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getId","description":"()Ljava/lang/String;","class":"ToDot$Node","package":"noa/proxy","file-name":"ToDot.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recordSelect","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons/interpreter/collections","file-name":"RecordFactory.java","line-number":43,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)"],"succeeding-tests":[]}]},{"name":"field","description":"(Ljava/lang/String;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons/interpreter/collections","file-name":"RecordFactory.java","line-number":38,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)"],"succeeding-tests":[]}]},{"name":"recordUnion","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons/interpreter/collections","file-name":"RecordFactory.java","line-number":55,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)"],"succeeding-tests":[]}]},{"name":"record","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons/interpreter/collections","file-name":"RecordFactory.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)"],"succeeding-tests":[]}]},{"name":"recordMatch","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"RecordFactory","package":"funcons/interpreter/collections","file-name":"RecordFactory.java","line-number":62,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing-tests":["tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)"],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2889,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2886,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2883,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2892,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$RecdeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2880,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"parse","description":"(Ljava/lang/String;Lcamllight/algebras/AllAlg;)Ljava/lang/Object;","class":"FNCLanguage","package":"funcons/truffle/nodes","file-name":"FNCLanguage.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createContext","description":"(Lcom/oracle/truffle/api/TruffleLanguage$Env;)Lfuncons/truffle/nodes/FNCContext;","class":"FNCLanguage","package":"funcons/truffle/nodes","file-name":"FNCLanguage.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"parse","description":"(Lcom/oracle/truffle/api/TruffleLanguage$ParsingRequest;)Lcom/oracle/truffle/api/CallTarget;","class":"FNCLanguage","package":"funcons/truffle/nodes","file-name":"FNCLanguage.java","line-number":48,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"importStandardLibrary","description":"()Lfuncons/truffle/nodes/FNCStatementNode;","class":"FNCLanguage","package":"funcons/truffle/nodes","file-name":"FNCLanguage.java","line-number":80,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getFncRootNode","description":"(Lcom/oracle/truffle/api/TruffleLanguage$ParsingRequest;)Lfuncons/truffle/nodes/FNCRootNode;","class":"FNCLanguage","package":"funcons/truffle/nodes","file-name":"FNCLanguage.java","line-number":55,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"BoolGreaterEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterEqualNodeGen.java","line-number":123,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolGreaterEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterEqualNodeGen.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolGreaterEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterEqualNodeGen.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/BoolGreaterEqualNode;","class":"BoolGreaterEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterEqualNodeGen.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BoolGreaterEqualNodeGen","package":"funcons/truffle/values","file-name":"BoolGreaterEqualNodeGen.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FloatFloatAddNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatAddNodeGen.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatAddNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatAddNodeGen.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"FloatFloatAddNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatAddNodeGen.java","line-number":50,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/values/FloatFloatAddNode;","class":"FloatFloatAddNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatAddNodeGen.java","line-number":85,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FloatFloatAddNodeGen","package":"funcons/truffle/values","file-name":"FloatFloatAddNodeGen.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Lio/usethesource/vallang/IReal;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionIntToFloatNodeGen.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionIntToFloatNodeGen.java","line-number":68,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionIntToFloatNodeGen.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/auxiliary/IntoFloatConversionIntToFloatNode;","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionIntToFloatNodeGen.java","line-number":77,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntoFloatConversionIntToFloatNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionIntToFloatNodeGen.java","line-number":40,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1624,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchsingleContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1615,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1621,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchcurried","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchcurriedContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1618,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$FunctionContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1612,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"whileTrue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons/interpreter/controlflow","file-name":"LogicControlFactory.java","line-number":45,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)"],"succeeding-tests":[]}]},{"name":"effect","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons/interpreter/controlflow","file-name":"LogicControlFactory.java","line-number":23,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)"],"succeeding-tests":[]}]},{"name":"seq","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons/interpreter/controlflow","file-name":"LogicControlFactory.java","line-number":31,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)"],"succeeding-tests":[]}]},{"name":"for_","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons/interpreter/controlflow","file-name":"LogicControlFactory.java","line-number":55,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"killing-tests":["tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)"],"succeeding-tests":[]}]},{"name":"ifTrue","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"LogicControlFactory","package":"funcons/interpreter/controlflow","file-name":"LogicControlFactory.java","line-number":39,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionFloatToIntoNodeGen.java","line-number":44,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionFloatToIntoNodeGen.java","line-number":67,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionFloatToIntoNodeGen.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Lfuncons/truffle/nodes/FNCExpressionNode;)Lfuncons/truffle/auxiliary/IntoFloatConversionFloatToIntoNode;","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionFloatToIntoNodeGen.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"IntoFloatConversionFloatToIntoNodeGen","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionFloatToIntoNodeGen.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"curryN","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons/truffle/functions","file-name":"TruffleCurryFactory.java","line-number":56,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"curry","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons/truffle/functions","file-name":"TruffleCurryFactory.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"uncurry","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons/truffle/functions","file-name":"TruffleCurryFactory.java","line-number":61,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"partialAppN","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons/truffle/functions","file-name":"TruffleCurryFactory.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"partialApp","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleCurryFactory","package":"funcons/truffle/functions","file-name":"TruffleCurryFactory.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"assignedValueIfVar","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons/truffle/entities","file-name":"TruffleAssignFactory.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"alloc","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons/truffle/entities","file-name":"TruffleAssignFactory.java","line-number":38,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"assign","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons/truffle/entities","file-name":"TruffleAssignFactory.java","line-number":15,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"assignedValue","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleAssignFactory","package":"funcons/truffle/entities","file-name":"TruffleAssignFactory.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":125,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":92,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":134,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":102,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode$KEYSRootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":251,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode$KEYSRootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":256,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":134,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":129,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":251,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":225,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":212,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapReadSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":260,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"restore","description":"(Lnoa/context/env/LinkedStackReader$Stack;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"LinkedStackReader","package":"noa/context/env","file-name":"LinkedStackReader.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ask","description":"()Ljava/lang/Object;","class":"LinkedStackReader","package":"noa/context/env","file-name":"LinkedStackReader.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"local","description":"(Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"LinkedStackReader","package":"noa/context/env","file-name":"LinkedStackReader.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"cc","description":"(Ljava/util/function/Supplier;)Ljava/util/function/Supplier;","class":"LinkedStackReader","package":"noa/context/env","file-name":"LinkedStackReader.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":258,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":253,"classification":"not-covered","detected":[],"not-detected":["\"\"","null","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isEqual","description":"(Lio/usethesource/vallang/IValue;)Z","class":"Variable","package":"funcons/values","file-name":"Variable.java","line-number":52,"classification":"partially-tested","detected":["false"],"not-detected":["true"],"tests":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"false","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"killing-tests":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"succeeding-tests":[]},{"status":"SURVIVED","mutator":"true","tests-run":1,"tests":["tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Variable","package":"funcons/values","file-name":"Variable.java","line-number":47,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":190,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":148,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":158,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":181,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnorecursion/parser/CLNoRecParser$IdentContext;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1363,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1369,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1360,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$DeclmonoContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1366,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1292,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$IdentContext;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1286,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1283,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$DeclmonoContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1289,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode$KEYSRootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":299,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode$KEYSRootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":294,"classification":"not-covered","detected":[],"not-detected":["\"A\"","null","\"\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getFrameSlots","description":"(Lcom/oracle/truffle/api/frame/FrameDescriptor;)[Lcom/oracle/truffle/api/frame/FrameSlot;","class":"RecursiveFollowIfFwdNode","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNode.java","line-number":90,"classification":"not-covered","detected":[],"not-detected":["null","empty"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"empty","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getFrameSlot","description":"(Lcom/oracle/truffle/api/frame/FrameSlot;Lcom/oracle/truffle/api/frame/FrameDescriptor;)Lcom/oracle/truffle/api/frame/FrameSlot;","class":"RecursiveFollowIfFwdNode","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNode.java","line-number":85,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recursiveFNCFunction","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Lfuncons/truffle/nodes/FNCFunction;)Ljava/lang/Object;","class":"RecursiveFollowIfFwdNode","package":"funcons/truffle/recursion","file-name":"RecursiveFollowIfFwdNode.java","line-number":61,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode$EXECUTERootNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":136,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode$EXECUTERootNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":131,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":78,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":69,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isEqual","description":"(Lio/usethesource/vallang/IValue;)Z","class":"Abs","package":"funcons/values","file-name":"Abs.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Abs","package":"funcons/values","file-name":"Abs.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$DeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1380,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$DeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1377,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllight/parser/CLParser$IdentContext;","class":"CLParser$DeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1374,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$DeclmonoContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1371,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildList","description":"(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List;","class":"Recorder","package":"noa/proxy","file-name":"Recorder.java","line-number":56,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"create","description":"(Ljava/lang/Class;)Ljava/lang/Object;","class":"Recorder","package":"noa/proxy","file-name":"Recorder.java","line-number":13,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"buildArgument","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"Recorder","package":"noa/proxy","file-name":"Recorder.java","line-number":42,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"build","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"Recorder","package":"noa/proxy","file-name":"Recorder.java","line-number":29,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":181,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":148,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":158,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode;","class":"FunctionNamesMessageResolutionForeignFactory$FunctionNamesHasSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeignFactory.java","line-number":190,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":92,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":125,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":134,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":102,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":134,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":129,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionApplicationApplication","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight/algebras/exprs","file-name":"FunctionAlg.java","line-number":35,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"succeeding-tests":[]}]},{"name":"function","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight/algebras/exprs","file-name":"FunctionAlg.java","line-number":60,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing-tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding-tests":[]}]},{"name":"functionId","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight/algebras/exprs","file-name":"FunctionAlg.java","line-number":45,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"functionApplication","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionAlg","package":"camllight/algebras/exprs","file-name":"FunctionAlg.java","line-number":40,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)"],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode$KEY_INFORootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":177,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode$KEY_INFORootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":172,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":215,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode$READRootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":210,"classification":"not-covered","detected":[],"not-detected":["\"A\"","\"\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":44,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":70,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/functions/FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignFunctionExecuteSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":79,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"fromForeignValue","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCContext","package":"funcons/truffle/nodes","file-name":"FNCContext.java","line-number":46,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"fromForeignNumber","description":"(Ljava/lang/Object;)J","class":"FNCContext","package":"funcons/truffle/nodes","file-name":"FNCContext.java","line-number":63,"classification":"not-covered","detected":[],"not-detected":["1L","0L"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"1L","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"0L","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"initRegistry","description":"(Lfuncons/truffle/nodes/FNCLanguage;)V","class":"FNCContext","package":"funcons/truffle/nodes","file-name":"FNCContext.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode$WRITERootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":129,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode$WRITERootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":134,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":71,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapWriteSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":80,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapWriteSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":45,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1146,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1149,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"ident","description":"()Lcamllightnocollections/parser/CLNoColParser$IdentContext;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1143,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$DeclmonoContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1140,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":143,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":176,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":153,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/functions/FNCFunctionMessageResolutionForeign$CheckFunctionSubNode;","class":"FNCFunctionMessageResolutionForeignFactory$CheckFunctionSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":185,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":215,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":210,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"invoke","description":"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Tracer","package":"funcons/debug","file-name":"Tracer.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"print","description":"(Ljava/lang/String;)V","class":"Tracer","package":"funcons/debug","file-name":"Tracer.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"Tracer","package":"funcons/debug","file-name":"Tracer.java","line-number":57,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"make","description":"()Ljava/lang/Object;","class":"Tracer","package":"funcons/debug","file-name":"Tracer.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":215,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode$HAS_SIZERootNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":210,"classification":"not-covered","detected":[],"not-detected":["null","\"\"","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":69,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":78,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode$HAS_KEYSRootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":213,"classification":"not-covered","detected":[],"not-detected":["null","\"\"","\"A\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode$HAS_KEYSRootNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":218,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":274,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":284,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":307,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapKeysSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":316,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":189,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":166,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":198,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$VarsMapHasKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":156,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":170,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":175,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/functions/FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":129,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":102,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":93,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FNCFunctionMessageResolutionForeignFactory$FNCForeignIsExecutableSubNodeGen","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeignFactory.java","line-number":120,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode$KEY_INFORootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":129,"classification":"not-covered","detected":[],"not-detected":["\"A\"","null","\"\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode$KEY_INFORootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":134,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode$HAS_KEYSRootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":175,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode$HAS_KEYSRootNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":170,"classification":"not-covered","detected":[],"not-detected":["\"\"","\"A\"","null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"Main","package":"noa/proxy/demo","file-name":"Main.java","line-number":37,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp2","description":"(Lnoa/proxy/demo/ArithAlg;)Ljava/lang/Object;","class":"Main","package":"noa/proxy/demo","file-name":"Main.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"add","description":"(Lnoa/proxy/demo/ArithAlg;)Ljava/lang/Object;","class":"Main","package":"noa/proxy/demo","file-name":"Main.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(Lnoa/proxy/demo/ArithAlg;)Ljava/lang/Object;","class":"Main","package":"noa/proxy/demo","file-name":"Main.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":69,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariableNamesMessageResolutionForeign$VarNamesReadSubNode;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":78,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode$IS_EXECUTABLERootNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":181,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode$IS_EXECUTABLERootNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":176,"classification":"not-covered","detected":[],"not-detected":["null","\"A\"","\"\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":175,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getName","description":"()Ljava/lang/String;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode$GET_SIZERootNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":170,"classification":"not-covered","detected":[],"not-detected":["\"A\"","null","\"\""],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"\"A\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"\"\"","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":252,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":220,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":210,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectKeysSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":243,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":92,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":102,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":125,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode;","class":"VariableNamesMessageResolutionForeignFactory$VarNamesGetSizeSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeignFactory.java","line-number":134,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":107,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":94,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/VariablesMapMessageResolutionForeign$KeyInfoSubNode;","class":"VariablesMapMessageResolutionForeignFactory$KeyInfoSubNodeGen","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeignFactory.java","line-number":142,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeAndSpecialize","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":161,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getCost","description":"()Lcom/oracle/truffle/api/nodes/NodeCost;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":187,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"()Lfuncons/truffle/nodes/FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":196,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeWithTarget","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"FunctionsObjectMessageResolutionForeignFactory$FunctionsObjectReadSubNodeGen","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeignFactory.java","line-number":148,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"assignedValueIfVar","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons/interpreter/entities","file-name":"AssignFactory.java","line-number":26,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)"],"killing-tests":["tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)"],"succeeding-tests":[]}]},{"name":"assign","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons/interpreter/entities","file-name":"AssignFactory.java","line-number":13,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)"],"succeeding-tests":[]}]},{"name":"alloc","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons/interpreter/entities","file-name":"AssignFactory.java","line-number":37,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)"],"succeeding-tests":[]}]},{"name":"assignedValue","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"AssignFactory","package":"funcons/interpreter/entities","file-name":"AssignFactory.java","line-number":21,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)"],"succeeding-tests":[]}]},{"name":"exparray","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExparrayContext;","class":"CLNoRecParser$ExparrayContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2697,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"CLNoRecParser$ExparrayContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2694,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$ExparrayContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2700,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclmonoContext;","class":"CLNoColParser$RecdeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2493,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"(I)Lcamllightnocollections/parser/CLNoColParser$RecanddeclContext;","class":"CLNoColParser$RecdeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2496,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLNoColParser$RecdeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2499,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Null","package":"funcons/values","file-name":"Null.java","line-number":21,"classification":"partially-tested","detected":["false"],"not-detected":["true"],"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"false","tests-run":1,"tests":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)"],"succeeding-tests":[]},{"status":"SURVIVED","mutator":"true","tests-run":7,"tests":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accept","description":"(Lio/usethesource/vallang/visitors/IValueVisitor;)Ljava/lang/Object;","class":"Null","package":"funcons/values","file-name":"Null.java","line-number":11,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionContext;","class":"CLNoSEParser$FunctionappContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2422,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$FunctionappContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2416,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$FunctionappContext;","class":"CLNoSEParser$FunctionappContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2419,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"IntIntDivideNode","package":"funcons/truffle/values","file-name":"IntIntDivideNode.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IInteger;","class":"IntIntDivideNode","package":"funcons/truffle/values","file-name":"IntIntDivideNode.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntDivideNode","package":"funcons/truffle/values","file-name":"IntIntDivideNode.java","line-number":33,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattMatchSingle","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattMatchAlg","package":"camllight/algebras/patts","file-name":"PattMatchAlg.java","line-number":29,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"pattMatchMulti","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattMatchAlg","package":"camllight/algebras/patts","file-name":"PattMatchAlg.java","line-number":34,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)"],"succeeding-tests":[]}]},{"name":"pattMatchCurriedMulti","description":"(Ljava/util/List;Ljava/lang/Object;)Ljava/lang/Object;","class":"PattMatchAlg","package":"camllight/algebras/patts","file-name":"PattMatchAlg.java","line-number":44,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)"],"succeeding-tests":[]}]},{"name":"constrExp","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"ExpAlg","package":"camllight/algebras/exprs","file-name":"ExpAlg.java","line-number":46,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"idExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ExpAlg","package":"camllight/algebras/exprs","file-name":"ExpAlg.java","line-number":26,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding-tests":[]}]},{"name":"typedExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ExpAlg","package":"camllight/algebras/exprs","file-name":"ExpAlg.java","line-number":41,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)"],"killing-tests":["tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)"],"succeeding-tests":[]}]},{"name":"executeIInteger","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Lio/usethesource/vallang/IInteger;","class":"FNCExpressionNode","package":"funcons/truffle/nodes","file-name":"FNCExpressionNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"FNCExpressionNode","package":"funcons/truffle/nodes","file-name":"FNCExpressionNode.java","line-number":17,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeIBool","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Lio/usethesource/vallang/IBool;","class":"FNCExpressionNode","package":"funcons/truffle/nodes","file-name":"FNCExpressionNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclmonoContext;","class":"CLNoSEParser$RecdeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2689,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$RecanddeclContext;","class":"CLNoSEParser$RecdeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2692,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLNoSEParser$RecdeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2695,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattListSingle","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ListPattAlg","package":"camllight/algebras/patts","file-name":"ListPattAlg.java","line-number":38,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"killing-tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"succeeding-tests":[]}]},{"name":"emptyListPatt","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ListPattAlg","package":"camllight/algebras/patts","file-name":"ListPattAlg.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headTailListPattMulti","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ListPattAlg","package":"camllight/algebras/patts","file-name":"ListPattAlg.java","line-number":28,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)"],"killing-tests":["tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)"],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"IntIntModuloNode","package":"funcons/truffle/values","file-name":"IntIntModuloNode.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntModuloNode","package":"funcons/truffle/values","file-name":"IntIntModuloNode.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"IntIntModuloNode","package":"funcons/truffle/values","file-name":"IntIntModuloNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLNoRecParser$RecdeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3031,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclmonoContext;","class":"CLNoRecParser$RecdeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3025,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$RecanddeclContext;","class":"CLNoRecParser$RecdeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":3028,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"(I)Lcamllight/parser/CLParser$RecanddeclContext;","class":"CLParser$RecdeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3062,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recanddecl","description":"()Ljava/util/List;","class":"CLParser$RecdeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3065,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllight/parser/CLParser$RecdeclmonoContext;","class":"CLParser$RecdeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3059,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$VartypeContext;","class":"CLNoSEParser$DecloptionalvartypesContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1406,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclnewtypeContext;","class":"CLNoSEParser$DecloptionalvartypesContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1400,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Ljava/util/List;","class":"CLNoSEParser$DecloptionalvartypesContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1403,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"(I)Lcamllightnocollections/parser/CLNoColParser$VartypeContext;","class":"CLNoColParser$DecloptionalvartypesContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1263,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclnewtypeContext;","class":"CLNoColParser$DecloptionalvartypesContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1257,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Ljava/util/List;","class":"CLNoColParser$DecloptionalvartypesContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1260,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlIfTrueNode","package":"funcons/truffle/controlflow","file-name":"LogicControlIfTrueNode.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"testResult","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Z","class":"LogicControlIfTrueNode","package":"funcons/truffle/controlflow","file-name":"LogicControlIfTrueNode.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$VartypeContext;","class":"CLNoRecParser$DecloptionalvartypesContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1483,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Ljava/util/List;","class":"CLNoRecParser$DecloptionalvartypesContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1480,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclnewtypeContext;","class":"CLNoRecParser$DecloptionalvartypesContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1477,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"listConcatExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ListAlg","package":"camllight/algebras/exprs","file-name":"ListAlg.java","line-number":13,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)"],"killing-tests":["tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)"],"succeeding-tests":[]}]},{"name":"headTailListExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ListAlg","package":"camllight/algebras/exprs","file-name":"ListAlg.java","line-number":18,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"killing-tests":["tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)"],"succeeding-tests":[]}]},{"name":"expList","description":"(Ljava/util/List;)Ljava/lang/Object;","class":"ListAlg","package":"camllight/algebras/exprs","file-name":"ListAlg.java","line-number":23,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"killing-tests":["tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)"],"succeeding-tests":[]}]},{"name":"bind","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lnoa/proxy/demo/Env;","class":"Env","package":"noa/proxy/demo","file-name":"Env.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"empty","description":"()Lnoa/proxy/demo/Env;","class":"Env","package":"noa/proxy/demo","file-name":"Env.java","line-number":6,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"get","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"Env","package":"noa/proxy/demo","file-name":"Env.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exparray","description":"()Lcamllight/parser/CLParser$ExparrayContext;","class":"CLParser$ExparrayContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2731,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$ExparrayContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2734,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"CLParser$ExparrayContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2728,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionContext;","class":"CLNoColParser$FunctionappContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2226,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$FunctionappContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2220,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnocollections/parser/CLNoColParser$FunctionappContext;","class":"CLNoColParser$FunctionappContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2223,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$PattmatchcurriedContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2326,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoSEParser$PattmatchcurriedContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2332,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattmatchcurriedContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2329,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"()Ljava/util/List;","class":"CLParser$DecloptionalvartypesContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1491,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"vartype","description":"(I)Lcamllight/parser/CLParser$VartypeContext;","class":"CLParser$DecloptionalvartypesContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1494,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declnewtype","description":"()Lcamllight/parser/CLParser$DeclnewtypeContext;","class":"CLParser$DecloptionalvartypesContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1488,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLParser$PattmatchcurriedContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2644,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$PattmatchcurriedContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2638,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattmatchcurriedContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2641,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Ljava/util/List;","class":"DemoParser$ExpContext","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"NUM","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"DemoParser$ExpContext","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":78,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"(I)Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser$ExpContext","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":80,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattmatchcurriedContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2607,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$PattmatchcurriedContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2604,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoRecParser$PattmatchcurriedContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2610,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionContext;","class":"CLNoRecParser$FunctionappContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2758,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$FunctionappContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2752,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$FunctionappContext;","class":"CLNoRecParser$FunctionappContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2755,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$FunctionappContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2786,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"functionapp","description":"()Lcamllight/parser/CLParser$FunctionappContext;","class":"CLParser$FunctionappContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2789,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"function","description":"()Lcamllight/parser/CLParser$FunctionContext;","class":"CLParser$FunctionappContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2792,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"testBuilder","description":"(Ljava/lang/String;)V","class":"Demo","package":"noa/syntax/demo","file-name":"Demo.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"parse","description":"(Ljava/lang/String;Lnoa/syntax/demo/AllAlg;)Ljava/lang/Object;","class":"Demo","package":"noa/syntax/demo","file-name":"Demo.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"Demo","package":"noa/syntax/demo","file-name":"Demo.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"(I)Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PattmatchcurriedContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Ljava/util/List;","class":"CLNoColParser$PattmatchcurriedContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2136,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$PattmatchcurriedContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2130,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$3","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":201,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$2","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":173,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"visit","description":"(Lcom/oracle/truffle/api/nodes/Node;)Z","class":"FNCLexicalScope$1","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":90,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$VarianttypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2554,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$VarianttypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2552,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equal","description":"(Ljava/lang/Object;Ljava/lang/Object;)Lio/usethesource/vallang/IBool;","class":"BoolEqualNode","package":"funcons/truffle/values","file-name":"BoolEqualNode.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equal","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IBool;","class":"BoolEqualNode","package":"funcons/truffle/values","file-name":"BoolEqualNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$RecordpattappendixContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1856,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$RecordpattappendixContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1854,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DecltypeappendixContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1314,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DecltypeappendixContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1316,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser$DeclorexpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":853,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$DeclorexpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":850,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser$DeclorexpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":819,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$DeclorexpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":816,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"undefined","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleNullFactory","package":"funcons/truffle/values","file-name":"TruffleNullFactory.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"null_","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleNullFactory","package":"funcons/truffle/values","file-name":"TruffleNullFactory.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"test","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCFunctionMessageResolution$CheckFunction","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolution.java","line-number":49,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchsingleContext;","class":"CLNoRecParser$PattmatchContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":112,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattmatchContext;","class":"CLNoRecParser$PattmatchContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":115,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"compareTo","description":"(Lnoa/syntax/PGen$Tk;)I","class":"PGen$Tk","package":"noa/syntax","file-name":"PGen.java","line-number":73,"classification":"not-covered","detected":[],"not-detected":["1","0"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"1","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"0","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"ToDot$Edge","package":"noa/proxy","file-name":"ToDot.java","line-number":64,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclorexpContext;","class":"CLNoColParser$DeclimplContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1413,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclimplContext;","class":"CLNoColParser$DeclimplContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1416,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;)I","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$KeyInfoNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":282,"classification":"not-covered","detected":[],"not-detected":["0","1"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"0","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"1","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DecllabeltypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":275,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DecllabeltypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":273,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":88,"classification":"not-covered","detected":[],"not-detected":["false","true"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattmatchsingleContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":952,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$PattmatchsingleContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":949,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"parse","description":"(Ljava/lang/String;Lcamllightnocollections/NoCollectionsAlg;)Ljava/lang/Object;","class":"CamlLightNoCollections","package":"camllightnocollections","file-name":"CamlLightNoCollections.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Ljava/lang/String;Lcamllightnocollections/NoCollectionsAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLightNoCollections","package":"camllightnocollections","file-name":"CamlLightNoCollections.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lit","description":"(I)Lnoa/proxy/demo/IEval;","class":"EvalArith","package":"noa/proxy/demo","file-name":"EvalArith.java","line-number":7,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"add","description":"(Lnoa/proxy/demo/IEval;Lnoa/proxy/demo/IEval;)Lnoa/proxy/demo/IEval;","class":"EvalArith","package":"noa/proxy/demo","file-name":"EvalArith.java","line-number":12,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattmatchsingleContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":975,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$PattmatchsingleContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":972,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"supply","description":"(Lfuncons/carriers/IEval;Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"SupplyGivenFactory","package":"funcons/interpreter/entities","file-name":"SupplyGivenFactory.java","line-number":14,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)"],"succeeding-tests":[]}]},{"name":"given","description":"()Lfuncons/carriers/IEval;","class":"SupplyGivenFactory","package":"funcons/interpreter/entities","file-name":"SupplyGivenFactory.java","line-number":9,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)"],"succeeding-tests":[]}]},{"name":"compareTo","description":"(Lnoa/syntax/Alt;)I","class":"Alt","package":"noa/syntax","file-name":"Alt.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["1","0"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"1","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"0","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclimplContext;","class":"CLNoSEParser$DeclimplContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1559,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclorexpContext;","class":"CLNoSEParser$DeclimplContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1556,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"parse","description":"(Ljava/lang/String;Lcamllightnorecursion/NoRecAlg;)Ljava/lang/Object;","class":"CamlLightNoRecursion","package":"camllightnorecursion","file-name":"CamlLightNoRecursion.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Ljava/lang/String;Lcamllightnorecursion/NoRecAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLightNoRecursion","package":"camllightnorecursion","file-name":"CamlLightNoRecursion.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchContext;","class":"CLNoColParser$PattmatchContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":111,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnocollections/parser/CLNoColParser$PattmatchsingleContext;","class":"CLNoColParser$PattmatchContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":108,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DeclexceptionappendixContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2439,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DeclexceptionappendixContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2441,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FunctionsObject","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionLiteralNode","package":"funcons/truffle/functions","file-name":"FunctionLiteralNode.java","line-number":42,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"setCallTarget","description":"(Lcom/oracle/truffle/api/RootCallTarget;)V","class":"FunctionLiteralNode","package":"funcons/truffle/functions","file-name":"FunctionLiteralNode.java","line-number":53,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$RecordsingleContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1261,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$RecordsingleContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1263,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattlistContext;","class":"CLNoRecParser$PattlistContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":889,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PattlistContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":892,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$HeadtaillistpattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1201,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$HeadtaillistpattContext;","class":"CLNoRecParser$HeadtaillistpattContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1198,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$VarianttypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2276,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$VarianttypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2274,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"supply","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleSupplyGivenFactory","package":"funcons/truffle/entities","file-name":"TruffleSupplyGivenFactory.java","line-number":18,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"given","description":"()Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleSupplyGivenFactory","package":"funcons/truffle/entities","file-name":"TruffleSupplyGivenFactory.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"askEnv","description":"()Lnoa/context/env/Env;","class":"WithEnv","package":"noa/context/env","file-name":"WithEnv.java","line-number":16,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"local","description":"(Lnoa/context/env/Env;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"WithEnv","package":"noa/context/env","file-name":"WithEnv.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$HeadtaillistpattContext;","class":"CLNoSEParser$HeadtaillistpattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1175,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$HeadtaillistpattContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1178,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intToFloat","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntoFloatConversionFactory","package":"funcons/interpreter/auxiliary","file-name":"IntoFloatConversionFactory.java","line-number":14,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)"],"succeeding-tests":[]}]},{"name":"floatToInt","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"IntoFloatConversionFactory","package":"funcons/interpreter/auxiliary","file-name":"IntoFloatConversionFactory.java","line-number":19,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)"],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DeclexceptionappendixContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3007,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DeclexceptionappendixContext","package":"camllight/parser","file-name":"CLParser.java","line-number":3005,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllight/parser/CLParser$PattmatchContext;","class":"CLParser$PattmatchContext","package":"camllight/parser","file-name":"CLParser.java","line-number":112,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllight/parser/CLParser$PattmatchsingleContext;","class":"CLParser$PattmatchContext","package":"camllight/parser","file-name":"CLParser.java","line-number":109,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclorexpContext;","class":"CLNoRecParser$DeclimplContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1633,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclimplContext;","class":"CLNoRecParser$DeclimplContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1636,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatch","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchContext;","class":"CLNoSEParser$PattmatchContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":113,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattmatchsingle","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattmatchsingleContext;","class":"CLNoSEParser$PattmatchContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":110,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Fwd","package":"funcons/values/recursion","file-name":"Fwd.java","line-number":27,"classification":"partially-tested","detected":["true"],"not-detected":["false"],"tests":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"SURVIVED","mutator":"false","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"killing-tests":[],"succeeding-tests":[]},{"status":"KILLED","mutator":"true","tests-run":1,"tests":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"killing-tests":["tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)"],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DecltypeappendixContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1305,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DecltypeappendixContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1303,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"intToFloat","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntoFloatConversionFactory","package":"funcons/truffle/auxiliary","file-name":"TruffleIntoFloatConversionFactory.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"floatToInt","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TruffleIntoFloatConversionFactory","package":"funcons/truffle/auxiliary","file-name":"TruffleIntoFloatConversionFactory.java","line-number":18,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllight/parser/CLParser$PattlistContext;","class":"CLParser$PattlistContext","package":"camllight/parser","file-name":"CLParser.java","line-number":900,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattlistContext","package":"camllight/parser","file-name":"CLParser.java","line-number":903,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$RecordpattappendixContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1820,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$RecordpattappendixContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1822,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"accessWithTarget","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;)Ljava/lang/Object;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":162,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$KeyInfoSubNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":192,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"headtaillistpatt","description":"()Lcamllight/parser/CLParser$HeadtaillistpattContext;","class":"CLParser$HeadtaillistpattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1209,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$HeadtaillistpattContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1212,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Token","package":"funcons/values/types","file-name":"Token.java","line-number":23,"classification":"tested","detected":["false","true"],"not-detected":[],"tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"false","tests-run":2,"tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"true","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"recordPattAppendix","description":"(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"RecordPattAlg","package":"camllight/algebras/patts","file-name":"RecordPattAlg.java","line-number":30,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing-tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"succeeding-tests":[]}]},{"name":"recordPatt","description":"(Ljava/lang/String;Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"RecordPattAlg","package":"camllight/algebras/patts","file-name":"RecordPattAlg.java","line-number":21,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"killing-tests":["tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)"],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$DecllabeltypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":272,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$DecllabeltypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":274,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"id","description":"(Ljava/lang/String;)Ljava/lang/Object;","class":"LetAlg","package":"camllight/algebras/exprs","file-name":"LetAlg.java","line-number":12,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)"],"succeeding-tests":[]}]},{"name":"letInExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"LetAlg","package":"camllight/algebras/exprs","file-name":"LetAlg.java","line-number":22,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)"],"killing-tests":["tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)"],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PattmatchsingleContext","package":"camllight/parser","file-name":"CLParser.java","line-number":986,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$PattmatchsingleContext","package":"camllight/parser","file-name":"CLParser.java","line-number":983,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DeclexceptionappendixContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2971,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DeclexceptionappendixContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2973,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$DeclorexpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":839,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser$DeclorexpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":842,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser$DeclorexpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":780,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$DeclorexpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":777,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$LetExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1435,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclContext;","class":"CLNoRecParser$LetExpContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1438,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"FunconException","package":"funcons/values/signals","file-name":"FunconException.java","line-number":21,"classification":"partially-tested","detected":["false"],"not-detected":["true"],"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"false","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]},{"status":"SURVIVED","mutator":"true","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"null_","description":"()Lfuncons/carriers/IEval;","class":"NullFactory","package":"funcons/interpreter/values","file-name":"NullFactory.java","line-number":14,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)"],"succeeding-tests":[]}]},{"name":"undefined","description":"()Lfuncons/carriers/IEval;","class":"NullFactory","package":"funcons/interpreter/values","file-name":"NullFactory.java","line-number":19,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)"],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DecllabeltypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":273,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DecllabeltypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":271,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declOrExpExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"ModuleAlg","package":"camllight/algebras/toplevel","file-name":"ModuleAlg.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declImpl","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ModuleAlg","package":"camllight/algebras/toplevel","file-name":"ModuleAlg.java","line-number":18,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)"],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"Undefined","package":"funcons/values","file-name":"Undefined.java","line-number":14,"classification":"partially-tested","detected":["false"],"not-detected":["true"],"tests":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"false","tests-run":1,"tests":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)"],"killing-tests":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)"],"succeeding-tests":[]},{"status":"SURVIVED","mutator":"true","tests-run":3,"tests":["tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)"],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnorecursion/parser/CLNoRecParser$ExpContext;","class":"CLNoRecParser$RecordsingleContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1250,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$RecordsingleContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1252,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCLexicalScope$VariableNamesObject","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":354,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FNCFunctionMessageResolutionForeign$CheckFunctionSubNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":231,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"testWithTarget","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$CheckFunctionSubNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":207,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pow","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"FloatFloatPowerOf","package":"funcons/truffle/values","file-name":"FloatFloatPowerOf.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pow","description":"(Lio/usethesource/vallang/IInteger;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"FloatFloatPowerOf","package":"funcons/truffle/values","file-name":"FloatFloatPowerOf.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"RunTimeFunconException","package":"funcons/values/signals","file-name":"RunTimeFunconException.java","line-number":21,"classification":"tested","detected":["true","false"],"not-detected":[],"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"true","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"false","tests-run":1,"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"killing-tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)"],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllight/parser/CLParser$ExpContext;","class":"CLParser$LetExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1446,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllight/parser/CLParser$DeclContext;","class":"CLParser$LetExpContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1449,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"PrintPrintNode","package":"funcons/truffle/auxiliary","file-name":"PrintPrintNode.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"print","description":"(Ljava/lang/String;Ljava/io/OutputStream;)V","class":"PrintPrintNode","package":"funcons/truffle/auxiliary","file-name":"PrintPrintNode.java","line-number":42,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"isInstance","description":"(Lcom/oracle/truffle/api/interop/TruffleObject;)Z","class":"FNCLexicalScope$VariablesMapObject","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":253,"classification":"not-covered","detected":[],"not-detected":["true","false"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"true","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]},{"status":"NO_COVERAGE","mutator":"false","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllight/parser/CLParser$DeclimplContext;","class":"CLParser$DeclimplContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1647,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declorexp","description":"()Lcamllight/parser/CLParser$DeclorexpContext;","class":"CLParser$DeclimplContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1644,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$ExpContext;","class":"CLNoSEParser$LetExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1358,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclContext;","class":"CLNoSEParser$LetExpContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1361,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"lookup","description":"(Ljava/lang/String;Z)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCFunctionRegistry","package":"funcons/truffle/nodes","file-name":"FNCFunctionRegistry.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"register","description":"(Ljava/lang/String;Lfuncons/truffle/nodes/FNCRootNode;)Lfuncons/truffle/nodes/FNCFunction;","class":"FNCFunctionRegistry","package":"funcons/truffle/nodes","file-name":"FNCFunctionRegistry.java","line-number":38,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$VarianttypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2588,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$VarianttypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2586,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$DecllabeltypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":277,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$DecllabeltypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":275,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$PattmatchsingleContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":858,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PattmatchsingleContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":861,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"noOp","description":"(Ljava/lang/Class;)Ljava/lang/Object;","class":"NoOp","package":"noa/proxy","file-name":"NoOp.java","line-number":10,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"invoke","description":"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;","class":"NoOp","package":"noa/proxy","file-name":"NoOp.java","line-number":18,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"parse","description":"(Ljava/lang/String;Lcamllightnosideeffects/NoSEAlg;)Ljava/lang/Object;","class":"CamlLightNoSideEffects","package":"camllightnosideeffects","file-name":"CamlLightNoSideEffects.java","line-number":23,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Ljava/lang/String;Lcamllightnosideeffects/NoSEAlg;)Lio/usethesource/vallang/IValue;","class":"CamlLightNoSideEffects","package":"camllightnosideeffects","file-name":"CamlLightNoSideEffects.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"equals","description":"(Ljava/lang/Object;)Z","class":"CLVariant","package":"funcons/values/cl","file-name":"CLVariant.java","line-number":29,"classification":"tested","detected":["true","false"],"not-detected":[],"tests":["tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"true","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]},{"status":"KILLED","mutator":"false","tests-run":1,"tests":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)"],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$DecltypeappendixContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1083,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$DecltypeappendixContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1085,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"let","description":"(Ljava/lang/String;Lnoa/proxy/demo/IEvalEnv;Lnoa/proxy/demo/IEvalEnv;)Lnoa/proxy/demo/IEvalEnv;","class":"EvalLet","package":"noa/proxy/demo","file-name":"EvalLet.java","line-number":12,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"var","description":"(Ljava/lang/String;)Lnoa/proxy/demo/IEvalEnv;","class":"EvalLet","package":"noa/proxy/demo","file-name":"EvalLet.java","line-number":7,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$VarianttypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2078,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$VarianttypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2080,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DeclexceptionappendixContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2635,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DeclexceptionappendixContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2637,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lcamllightnocollections/parser/CLNoColParser$ExpContext;","class":"CLNoColParser$LetExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1215,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclContext;","class":"CLNoColParser$LetExpContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1218,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PattlistContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":869,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattlist","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattlistContext;","class":"CLNoSEParser$PattlistContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":866,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"dereferenceExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"RefAlg","package":"camllight/algebras/exprs","file-name":"RefAlg.java","line-number":12,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)"],"killing-tests":["tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"succeeding-tests":[]}]},{"name":"refAssignExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"RefAlg","package":"camllight/algebras/exprs","file-name":"RefAlg.java","line-number":17,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)"],"killing-tests":["tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)"],"succeeding-tests":[]}]},{"name":"CONSTRTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$DecltypeappendixContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1226,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$DecltypeappendixContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1228,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclmonoContext;","class":"CLNoRecParser$AnddeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2518,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntDivide","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":146,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$String_","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":73,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeysSubNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":270,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllight/parser/CLParser$DeclmonoContext;","class":"CLParser$AnddeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2552,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorLengthNode","package":"funcons/truffle/collections","file-name":"VectorVectorLengthNode.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject$FunctionNamesMessageResolution$FunctionNamesGetSizeNode","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":108,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorNode2","package":"funcons/truffle/collections","file-name":"VectorVectorNode2.java","line-number":23,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntoFloatConversionFactory$FloatToInt","package":"funcons/truffle/auxiliary","file-name":"TruffleIntoFloatConversionFactory.java","line-number":43,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesGetSizeSubNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":189,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntIntSubstractNode","package":"funcons/truffle/values","file-name":"IntIntSubstractNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$GreaterEqual","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":111,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionAbsNode2","package":"funcons/truffle/functions","file-name":"FunctionAbsNode2.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$FreshFwds","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":89,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$CamlLightString","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":86,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exprTupleMulti","description":"(Ljava/util/List;)Ljava/lang/Object;","class":"TupleAlg","package":"camllight/algebras/exprs","file-name":"TupleAlg.java","line-number":13,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)"],"killing-tests":["tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)"],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorLength","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":94,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TuplePrefix","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":130,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllight/parser/CLParser$DecloptionalvartypesContext;","class":"CLParser$DeclnewtypeappendixContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1575,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$BoundValue","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":122,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$Vector2","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":81,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"CurryCurryNode","package":"funcons/truffle/functions","file-name":"CurryCurryNode.java","line-number":18,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"local","description":"(Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;","class":"ArrayDequeReader","package":"noa/context/env","file-name":"ArrayDequeReader.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Abs2","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":105,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"CLPGen","package":"camllight/parser","file-name":"CLPGen.java","line-number":8,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"ListProjectListNode","package":"funcons/truffle/collections","file-name":"ListProjectListNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnocollections/parser/CLNoColParser$PattContext;","class":"CLNoColParser$PatttupleContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1378,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapOverNode","package":"funcons/truffle/collections","file-name":"MapMapOverNode.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclimplContext;","class":"CLNoColParser$ProgContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2185,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"CLNoSEPGen","package":"camllightnosideeffects/parser","file-name":"CLNoSEPGen.java","line-number":8,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapReadSubNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":273,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectHasKeysSubNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":189,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$VartypeContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":324,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTypeFactory$Type","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":182,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$RecdeclmonoContext;","class":"CLNoSEParser$RecanddeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1709,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$IfTrue","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":64,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapReadNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":301,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringStringNode","package":"funcons/truffle/values","file-name":"StringStringNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$EmptylistContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":916,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Accum","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":168,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListLengthNode","package":"funcons/truffle/collections","file-name":"ListListLengthNode.java","line-number":23,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFloatFactory$Lit","package":"funcons/truffle/values","file-name":"TruffleFloatFactory.java","line-number":71,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionMatchFailureNode","package":"funcons/truffle/controlflow","file-name":"ExceptionMatchFailureNode.java","line-number":17,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Ljava/lang/Class;)Ljava/lang/Object;","class":"Print","package":"noa/proxy","file-name":"Print.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"SupplyGivenSupplyNode","package":"funcons/truffle/entities","file-name":"SupplyGivenSupplyNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleSupplyGivenFactory$Supply","package":"funcons/truffle/entities","file-name":"TruffleSupplyGivenFactory.java","line-number":39,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$PrefereOver","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":164,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectKeysNode","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":44,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariableNamesObject;I)Ljava/lang/Object;","class":"FNCLexicalScope$VariableNamesObject$VariableNamesMessageResolution$VarNamesReadNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":383,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesReadSubNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":149,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"(Lio/usethesource/vallang/IMap;Lio/usethesource/vallang/IValue;)Lio/usethesource/vallang/IValue;","class":"MapFactory$1","package":"funcons/interpreter/collections","file-name":"MapFactory.java","line-number":60,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)"],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapOver","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":120,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$StringAppend","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":60,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecursiveSetForwardsNode","package":"funcons/truffle/recursion","file-name":"RecursiveSetForwardsNode.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapWriteNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":321,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ListAppend","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":198,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Close","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":118,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"print","description":"(Lfuncons/carriers/IEval;)Lfuncons/carriers/IEval;","class":"PrintFactory","package":"funcons/interpreter/auxiliary","file-name":"PrintFactory.java","line-number":10,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclTypeDefEquals(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsWithVarTypes(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclRecordType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclLabelsAndVariantsMultiple(tests.reference.decls.GlobalAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)"],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllight/parser/CLParser$RecdeclmonoContext;","class":"CLParser$RecanddeclContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1820,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ListLength","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":160,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IReal;)Lio/usethesource/vallang/IReal;","class":"FloatFloatDivideNode","package":"funcons/truffle/values","file-name":"FloatFloatDivideNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariableNamesObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariableNamesObject$VariableNamesMessageResolution$VarNamesHasSizeNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":365,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"CLNoRecPGen","package":"camllightnorecursion/parser","file-name":"CLNoRecPGen.java","line-number":8,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$IdentContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":744,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ListPrefix","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":182,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Not","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":81,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlWhileTrueNode","package":"funcons/truffle/controlflow","file-name":"LogicControlWhileTrueNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapUpdate","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":90,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorSelectNode","package":"funcons/truffle/collections","file-name":"VectorVectorSelectNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTuplePrefixMatchNode","package":"funcons/truffle/collections","file-name":"TupleTuplePrefixMatchNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapKeysSubNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":313,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"RecursiveFwdNode","package":"funcons/truffle/recursion","file-name":"RecursiveFwdNode.java","line-number":12,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllight/parser/CLParser$DeclimplContext;","class":"CLParser$ProgContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2693,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCFunction;[Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolution$FNCForeignFunctionExecuteNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolution.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"FNCFunctionMessageResolution$FNCForeignIsExecutableNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolution.java","line-number":41,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCUndefinedFunctionRootNode","package":"funcons/truffle/functions","file-name":"FNCUndefinedFunctionRootNode.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlEffectNode","package":"funcons/truffle/controlflow","file-name":"LogicControlEffectNode.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"exp","description":"()Lnoa/syntax/demo/DemoParser$ExpContext;","class":"DemoParser$ProgContext","package":"noa/syntax/demo","file-name":"DemoParser.java","line-number":223,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnorecursion/parser/CLNoRecParser$PattContext;","class":"CLNoRecParser$PatttupleContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1598,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"conversion","description":"(Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntoFloatConversionIntToFloatNode","package":"funcons/truffle/auxiliary","file-name":"IntoFloatConversionIntToFloatNode.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionElseNode","package":"funcons/truffle/controlflow","file-name":"ExceptionElseNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariableNamesMessageResolutionForeign$VarNamesHasSizeSubNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":229,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapGet","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":135,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTypeFactory$UnknownType","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":154,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"DemoPGen","package":"noa/syntax/demo","file-name":"DemoPGen.java","line-number":8,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declOrExpExp","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"TestableModuleAlg","package":"camllight/algebras/toplevel","file-name":"TestableModuleAlg.java","line-number":13,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testEmptyArray(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLNot(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testConstExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.ExpAlgTest.testIdExp(tests.reference.exprs.ExpAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyListConstant(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ControlAlgTest.testSeq(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testWhileTrue(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntSub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.constants.ConstantsAlgTest.testEmptyList(tests.reference.constants.ConstantsAlgTest)","tests.reference.constants.ConstantsAlgTest.testInt_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySingle(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.ExpAlgTest.testTypedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatAddExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntAdd(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntDivide(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMultiply(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntUnarySub(tests.reference.exprs.IntCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpListSingle(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.TupleAlgTest.testExprTupleMulti(tests.reference.exprs.TupleAlgTest)","tests.reference.exprs.ArrayAlgTest.testArraySelect(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testNotEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testIfElse(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatDivideExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattWildcard(tests.reference.patts.PattAlgTest)","tests.reference.constants.ConstantsAlgTest.testFloat_(tests.reference.constants.ConstantsAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreaterEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmallerEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatMultiplyExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ListAlgTest.testExpList(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatch(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testSmaller(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayMulti(tests.reference.exprs.ArrayAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testEqual(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ExpAlgTest.testBeginEndExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchStripe(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclEnumException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.PattAlgTest.testPattConstant(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.constants.ConstantsAlgTest.testChar_(tests.reference.constants.ConstantsAlgTest)","tests.reference.decls.BindAlgTest.testDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLAnd(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testLOr(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.exprs.ControlAlgTest.testFor_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ControlAlgTest.testMatchWith(tests.reference.exprs.ControlAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewEnumType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunctionId(tests.reference.exprs.FunctionAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTypeId(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatSubtractExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.FunctionAlgTest.testFuncAplication(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.PattAlgTest.testOptionalPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclNewConstrType(tests.reference.decls.GlobalAlgTest)","tests.reference.exprs.IntCalcAlgTest.testIntMod(tests.reference.exprs.IntCalcAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testBracketedType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testFunctionType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.ControlAlgTest.testIf_(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatPowerExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.exprs.ControlAlgTest.testForDownto(tests.reference.exprs.ControlAlgTest)","tests.reference.exprs.ExceptionAlgTest.testRaiseWithArgumentExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.FloatCalcAlgTest.testFloatNegateExp(tests.reference.exprs.FloatCalcAlgTest)","tests.reference.patts.PattAlgTest.testPattType(tests.reference.patts.PattAlgTest)","tests.reference.exprs.ExpAlgTest.testBracketedExp(tests.reference.exprs.ExpAlgTest)","tests.reference.exprs.FunctionAlgTest.testFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.ListPattAlgTest.testEmptyListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testTupleType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.exprs.LetAlgTest.testLetInExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testHeadTailListExp(tests.reference.exprs.ListAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordSelectExp(tests.reference.exprs.RecordAlgTest)","tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.typeexprs.TypeExpAlgTest.testVarType(tests.reference.typeexprs.TypeExpAlgTest)","tests.reference.patts.PattAlgTest.testPattId(tests.reference.patts.PattAlgTest)","tests.reference.exprs.LetAlgTest.testLetExp(tests.reference.exprs.LetAlgTest)","tests.reference.exprs.ListAlgTest.testListConcatExp(tests.reference.exprs.ListAlgTest)","tests.reference.decls.GlobalAlgTest.testDeclConstrException(tests.reference.decls.GlobalAlgTest)","tests.reference.patts.ListPattAlgTest.testPattList(tests.reference.patts.ListPattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.patts.PattAlgTest.testBracketedPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.ListPattAlgTest.testHeadTailListPatt(tests.reference.patts.ListPattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstr(tests.reference.patts.PattAlgTest)","tests.reference.decls.BindAlgTest.testAndDecl(tests.reference.decls.BindAlgTest)","tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)","tests.reference.exprs.RefAlgTest.testDereferenceExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.BoolLogicAlgTest.testGreater(tests.reference.exprs.BoolLogicAlgTest)","tests.reference.patts.RecordPattAlgTest.testRecordPatt(tests.reference.patts.RecordPattAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMono(tests.reference.decls.BindAlgTest)","tests.reference.exprs.RefAlgTest.testRefAssignExp(tests.reference.exprs.RefAlgTest)","tests.reference.exprs.FunctionAlgTest.testBeginEndFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.ArrayAlgTest.testArrayAssign(tests.reference.exprs.ArrayAlgTest)","tests.reference.patts.PattAlgTest.testPattAs(tests.reference.patts.PattAlgTest)","tests.reference.exprs.FunctionAlgTest.testBracketedFunction(tests.reference.exprs.FunctionAlgTest)","tests.reference.exprs.RecordAlgTest.testRecordAssignExp(tests.reference.exprs.RecordAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.constants.ConstantsAlgTest.testBool(tests.reference.constants.ConstantsAlgTest)"],"killing-tests":["tests.reference.constants.ConstantsAlgTest.testNull_(tests.reference.constants.ConstantsAlgTest)"],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleCurryFactory$Curry","package":"funcons/truffle/functions","file-name":"TruffleCurryFactory.java","line-number":88,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"NullNullNode","package":"funcons/truffle/values","file-name":"NullNullNode.java","line-number":12,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleStringFactory$CamlLightChar","package":"funcons/truffle/values","file-name":"TruffleStringFactory.java","line-number":99,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DeclimplContext;","class":"CLNoRecParser$ProgContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2659,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"union","description":"(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;","class":"Union","package":"noa/proxy","file-name":"Union.java","line-number":10,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$Else_","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":125,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$BindValue","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":138,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectReadSubNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":230,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"CurryCurryNNode","package":"funcons/truffle/functions","file-name":"CurryCurryNNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntoFloatConversionFactory$IntToFloat","package":"funcons/truffle/auxiliary","file-name":"TruffleIntoFloatConversionFactory.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TupleHead","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":143,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCMainRootNode","package":"funcons/truffle/nodes","file-name":"FNCMainRootNode.java","line-number":18,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BoolNotNode","package":"funcons/truffle/values","file-name":"BoolNotNode.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declimpl","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclimplContext;","class":"CLNoSEParser$ProgContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2381,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$Tuple0","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":100,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$WhileTrue","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":97,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntMultiplyNode","package":"funcons/truffle/values","file-name":"IntIntMultiplyNode.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleNullFactory$Null_","package":"funcons/truffle/values","file-name":"TruffleNullFactory.java","line-number":27,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;Ljava/lang/String;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectKeyInfoNode","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":53,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject$FunctionNamesMessageResolution$FunctionNamesHasSizeNode","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":99,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionFailNode","package":"funcons/truffle/controlflow","file-name":"ExceptionFailNode.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorNode","package":"funcons/truffle/collections","file-name":"VectorVectorNode.java","line-number":15,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntNegate","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":116,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntMultiply","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":131,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorAssign","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":122,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"print","description":"(Lfuncons/truffle/nodes/FNCExecuteNode;)Lfuncons/truffle/nodes/FNCExecuteNode;","class":"TrufflePrintFactory","package":"funcons/truffle/auxiliary","file-name":"TrufflePrintFactory.java","line-number":14,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"addIInteger","description":"(Lio/usethesource/vallang/IReal;Lio/usethesource/vallang/IInteger;)Lio/usethesource/vallang/IReal;","class":"IntIntAddNode","package":"funcons/truffle/values","file-name":"IntIntAddNode.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$List","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":167,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringStringAppendNode","package":"funcons/truffle/values","file-name":"StringStringAppendNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllight/parser/CLParser$PattContext;","class":"CLParser$PatttupleContext","package":"camllight/parser","file-name":"CLParser.java","line-number":1609,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleProjectNode","package":"funcons/truffle/collections","file-name":"TupleProjectNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapDomainNode","package":"funcons/truffle/collections","file-name":"MapMapDomainNode.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"NullUndefinedNode","package":"funcons/truffle/values","file-name":"NullUndefinedNode.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;","class":"ToString","package":"noa/proxy","file-name":"ToString.java","line-number":8,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleAssignFactory$AssignedValue","package":"funcons/truffle/entities","file-name":"TruffleAssignFactory.java","line-number":65,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnocollections/parser/CLNoColParser$TypeContext;","class":"CLNoColParser$TupletypelistContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2309,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declRec","description":"(Ljava/lang/Object;)Ljava/lang/Object;","class":"RecBindAlg","package":"camllight/algebras/decls","file-name":"RecBindAlg.java","line-number":14,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$IdentContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":783,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"AssignAssignNode","package":"funcons/truffle/entities","file-name":"AssignAssignNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatFloatSubstractNode","package":"funcons/truffle/values","file-name":"FloatFloatSubstractNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$IdentContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":806,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$Seq","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":82,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"execute","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FNCFunctionMessageResolutionForeign$CheckFunctionSubNode$LanguageCheckRootNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":217,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleLogicControlFactory$For_","package":"funcons/truffle/controlflow","file-name":"TruffleLogicControlFactory.java","line-number":116,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"stringAppendExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"StringAlg","package":"camllight/algebras/exprs","file-name":"StringAlg.java","line-number":11,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"killing-tests":["tests.reference.exprs.StringAlgTest.testStringAppendExp(tests.reference.exprs.StringAlgTest)"],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Id","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":151,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTupleHeadNode","package":"funcons/truffle/collections","file-name":"TupleTupleHeadNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllight/parser/CLParser$TypeContext;","class":"CLParser$TupletypelistContext","package":"camllight/parser","file-name":"CLParser.java","line-number":2875,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnorecursion/parser/CLNoRecParser$TypeContext;","class":"CLNoRecParser$TupletypelistContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":2841,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Scope","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":109,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTypeFactory$TypeVar","package":"funcons/truffle/types","file-name":"TruffleTypeFactory.java","line-number":168,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TrufflePrintFactory$Print","package":"funcons/truffle/auxiliary","file-name":"TrufflePrintFactory.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapDomain","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":148,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariableNamesMessageResolutionForeign$VarNamesReadSubNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":149,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionNamesMessageResolutionForeign$FunctionNamesHasSizeSubNode","package":"funcons/truffle/nodes","file-name":"FunctionNamesMessageResolutionForeign.java","line-number":229,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnocollections/parser/CLNoColParser$DeclmonoContext;","class":"CLNoColParser$AnddeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":2044,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoColParser$EmptylistContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":825,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleTypeFactory$TupleType","package":"funcons/truffle/types","file-name":"TruffleTupleTypeFactory.java","line-number":58,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;","class":"Propagate","package":"noa/proxy","file-name":"Propagate.java","line-number":20,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"IntLitNode","package":"funcons/truffle/values","file-name":"IntLitNode.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListNode","package":"funcons/truffle/collections","file-name":"ListListNode.java","line-number":12,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;","class":"Sharing","package":"noa/proxy","file-name":"Sharing.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Apply","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":135,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectHasKeysNode","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":35,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntAdd","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":73,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$MatchFailure","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":97,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapHasKeysSubNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":232,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Bool","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":68,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringCamlLightStringNode","package":"funcons/truffle/values","file-name":"StringCamlLightStringNode.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapNode","package":"funcons/truffle/collections","file-name":"MapMapNode.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$VartypeContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":328,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariableNamesMessageResolutionForeign$VarNamesGetSizeSubNode","package":"funcons/truffle/nodes","file-name":"VariableNamesMessageResolutionForeign.java","line-number":189,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject;Ljava/lang/String;)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionsObjectReadNode","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":67,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$Map","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":31,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FNCFunctionMessageResolutionForeign$FNCForeignFunctionExecuteSubNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":155,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$VartypeContext","package":"camllight/parser","file-name":"CLParser.java","line-number":325,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTupleNode","package":"funcons/truffle/collections","file-name":"TupleTupleNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FunctionsObjectMessageResolutionForeign$FunctionsObjectKeyInfoSubNode","package":"funcons/truffle/nodes","file-name":"FunctionsObjectMessageResolutionForeign.java","line-number":149,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnocollections/parser/CLNoColParser$RecdeclmonoContext;","class":"CLNoColParser$RecanddeclContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1566,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$Reclose","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":120,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleNullFactory$Undefined","package":"funcons/truffle/values","file-name":"TruffleNullFactory.java","line-number":34,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"VariablesMapMessageResolutionForeign$VarsMapWriteSubNode","package":"funcons/truffle/nodes","file-name":"VariablesMapMessageResolutionForeign.java","line-number":151,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"recdeclmono","description":"()Lcamllightnorecursion/parser/CLNoRecParser$RecdeclmonoContext;","class":"CLNoRecParser$RecanddeclContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1786,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$IdentContext","package":"camllight/parser","file-name":"CLParser.java","line-number":817,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TuplePrefixMatch","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":115,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$Throw_","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":110,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$Vector","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":51,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$SetForwards","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":102,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecordFactory$Field","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":123,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Environment","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":79,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"declmono","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DeclmonoContext;","class":"CLNoSEParser$AnddeclContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2240,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapUnionNode","package":"funcons/truffle/collections","file-name":"MapUnionNode.java","line-number":23,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleMapFactory$MapUnion","package":"funcons/truffle/collections","file-name":"TruffleMapFactory.java","line-number":105,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"undefinedFunction","description":"(Ljava/lang/String;)Lfuncons/truffle/functions/FNCUndefinedNameException;","class":"FNCUndefinedNameException","package":"funcons/truffle/functions","file-name":"FNCUndefinedNameException.java","line-number":5,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$FollowIfFwd","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":133,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapKeysNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":273,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleCurryFactory$CurryN","package":"funcons/truffle/functions","file-name":"TruffleCurryFactory.java","line-number":75,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"SupplyGivenGivenNode","package":"funcons/truffle/entities","file-name":"SupplyGivenGivenNode.java","line-number":13,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnocollections/parser/CLNoColParser$DecloptionalvartypesContext;","class":"CLNoColParser$DeclnewtypeappendixContext","package":"camllightnocollections/parser","file-name":"CLNoColParser.java","line-number":1344,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariablesMapObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariablesMapObject$VariablesMapMessageResolution$VarsMapHasKeysNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":263,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject;I)Ljava/lang/Object;","class":"FunctionsObject$FunctionsObjectMessageResolution$FunctionNamesObject$FunctionNamesMessageResolution$FunctionNamesReadNode","package":"funcons/truffle/nodes","file-name":"FunctionsObject.java","line-number":117,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"patt","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$PattContext;","class":"CLNoSEParser$PatttupleContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1521,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"eval","description":"()Lio/usethesource/vallang/IValue;","class":"IEval","package":"funcons/carriers","file-name":"IEval.java","line-number":15,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)","tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiateIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseMap(tests.reference.PolyTypeFactoryTest)","tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseDecl(tests.reference.PolyTypeFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.IntFactoryTest.testLit(tests.reference.IntFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)","tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BoolFactoryTest.testBool(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)","tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testType(tests.reference.TypeFactoryTest)","tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneralise(tests.reference.PolyTypeFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.BindingFactoryTest.testEnvironment(tests.reference.BindingFactoryTest)","tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiatePoly(tests.reference.PolyTypeFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)","tests.reference.FloatFactoryTest.testLit(tests.reference.FloatFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)","tests.reference.BoolFactoryTest.testNot(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testFail(tests.reference.ExceptionFactoryTest)","tests.reference.FloatFactoryTest.testFloatNegate(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testLit(tests.reference.FloatFactoryTest)","tests.reference.IntFactoryTest.testIntMultiply(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testLit(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testIntToFloat(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testProjectList(tests.reference.ListFactoryTest)","tests.reference.NullFactoryTest.testNull_(tests.reference.NullFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneralise(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseMap(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiateIfPoly(tests.reference.PolyTypeFactoryTest)","tests.reference.PrintFactoryTest.testPrint(tests.reference.PrintFactoryTest)","tests.reference.StringFactoryTest.testString(tests.reference.StringFactoryTest)","tests.reference.SupplyGivenFactoryTest.testGiven(tests.reference.SupplyGivenFactoryTest)","tests.reference.SupplyGivenFactoryTest.testSupply(tests.reference.SupplyGivenFactoryTest)","tests.reference.TypeFactoryTest.testTypeDef(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVector(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValue(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBoundValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testScope(tests.reference.BindingFactoryTest)","tests.reference.ExceptionFactoryTest.testMatchFailure(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testWhenTrue(tests.reference.ExceptionFactoryTest)","tests.reference.FloatFactoryTest.testFloatAdd(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatDivide(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatModulo(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatMultiply(tests.reference.FloatFactoryTest)","tests.reference.FloatFactoryTest.testFloatSubtract(tests.reference.FloatFactoryTest)","tests.reference.FunctionFactoryTest.testCompose(tests.reference.FunctionFactoryTest)","tests.reference.IntFactoryTest.testIntAdd(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntDivide(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntModulo(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntNegate(tests.reference.IntFactoryTest)","tests.reference.IntFactoryTest.testIntSubtract(tests.reference.IntFactoryTest)","tests.reference.IntFloatConversionFactoryTest.testFloatToInt(tests.reference.IntFloatConversionFactoryTest)","tests.reference.ListFactoryTest.testListHead(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListReverse(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListTail(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testIfTrue(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testSeq(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMap(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapGet(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapOver(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testAny(tests.reference.PatternFactoryTest)","tests.reference.PolyTypeFactoryTest.testGeneraliseDecl(tests.reference.PolyTypeFactoryTest)","tests.reference.PolyTypeFactoryTest.testInstantiatePoly(tests.reference.PolyTypeFactoryTest)","tests.reference.RecordFactoryTest.testField(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecord(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordOver(tests.reference.RecordFactoryTest)","tests.reference.RecordFactoryTest.testRecordSelect(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwd(tests.reference.RecursiveFactoryTest)","tests.reference.StringFactoryTest.testChar_(tests.reference.StringFactoryTest)","tests.reference.StringFactoryTest.testStringAppend(tests.reference.StringFactoryTest)","tests.reference.TupleFactoryTest.testTupleHead(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefix(tests.reference.TupleFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleTypePrefix(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testBoundType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testMeta(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testRestrictDomain(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTypeVar(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testTyped(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testUnknownType(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorSelect(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssignedValueIfVar(tests.reference.AssignFactoryTest)","tests.reference.BindingFactoryTest.testBindValue(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testClosure(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testEnvironment(tests.reference.BindingFactoryTest)","tests.reference.BindingFactoryTest.testNameId(tests.reference.BindingFactoryTest)","tests.reference.BoolFactoryTest.testBool(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialAppN(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatch_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testElse_(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testPreferOver(tests.reference.ExceptionFactoryTest)","tests.reference.ExceptionFactoryTest.testThrow_(tests.reference.ExceptionFactoryTest)","tests.reference.FunctionFactoryTest.testApply(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testIntClosedInterval(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testList(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListLength(tests.reference.ListFactoryTest)","tests.reference.ListFactoryTest.testListPrefix(tests.reference.ListFactoryTest)","tests.reference.LogicControlFactoryTest.testEffect(tests.reference.LogicControlFactoryTest)","tests.reference.LogicControlFactoryTest.testWhileTrue(tests.reference.LogicControlFactoryTest)","tests.reference.MapFactoryTest.testMapUnion(tests.reference.MapFactoryTest)","tests.reference.MapFactoryTest.testMapUpdate(tests.reference.MapFactoryTest)","tests.reference.NullFactoryTest.testUndefined(tests.reference.NullFactoryTest)","tests.reference.PatternFactoryTest.testPattAbs(tests.reference.PatternFactoryTest)","tests.reference.RecordFactoryTest.testRecordUnion(tests.reference.RecordFactoryTest)","tests.reference.TupleFactoryTest.testProject(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTuple(tests.reference.TupleFactoryTest)","tests.reference.TupleFactoryTest.testTupleTail(tests.reference.TupleFactoryTest)","tests.reference.TupleTypeFactoryTest.testProjectType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testClVariant(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testDepends(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNewType(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomTag(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testScopeNominalCoercion(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorLength(tests.reference.VectorFactoryTest)","tests.reference.BoolFactoryTest.testGreaterEqual(tests.reference.BoolFactoryTest)","tests.reference.BoolFactoryTest.testSmallerEqual(tests.reference.BoolFactoryTest)","tests.reference.CurryFactoryTest.testPartialApp(tests.reference.CurryFactoryTest)","tests.reference.CurryFactoryTest.testUncurry(tests.reference.CurryFactoryTest)","tests.reference.FunctionFactoryTest.testAbs(tests.reference.FunctionFactoryTest)","tests.reference.FunctionFactoryTest.testClose(tests.reference.FunctionFactoryTest)","tests.reference.ListFactoryTest.testListAppend(tests.reference.ListFactoryTest)","tests.reference.MapFactoryTest.testMapDomain(tests.reference.MapFactoryTest)","tests.reference.PatternFactoryTest.testBind(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testMatch(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattUnion(tests.reference.PatternFactoryTest)","tests.reference.TupleTypeFactoryTest.testTupleType(tests.reference.TupleTypeFactoryTest)","tests.reference.TypeFactoryTest.testPattAtType(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVector1(tests.reference.VectorFactoryTest)","tests.reference.VectorFactoryTest.testVectorAppend(tests.reference.VectorFactoryTest)","tests.reference.AssignFactoryTest.testAssign(tests.reference.AssignFactoryTest)","tests.reference.BoolFactoryTest.testSmaller(tests.reference.BoolFactoryTest)","tests.reference.ExceptionFactoryTest.testException(tests.reference.ExceptionFactoryTest)","tests.reference.ListFactoryTest.testListPrefixMatch(tests.reference.ListFactoryTest)","tests.reference.PatternFactoryTest.testOnly(tests.reference.PatternFactoryTest)","tests.reference.PatternFactoryTest.testPattNonBinding(tests.reference.PatternFactoryTest)","tests.reference.RecursiveFactoryTest.testFreshFwds(tests.reference.RecursiveFactoryTest)","tests.reference.StringFactoryTest.testCamlLightString(tests.reference.StringFactoryTest)","tests.reference.TypeFactoryTest.testFreshToken(tests.reference.TypeFactoryTest)","tests.reference.VectorFactoryTest.testVectorAssign(tests.reference.VectorFactoryTest)","tests.reference.BindingFactoryTest.testAccum(tests.reference.BindingFactoryTest)","tests.reference.ListFactoryTest.testListPrefixPatt(tests.reference.ListFactoryTest)","tests.reference.TypeFactoryTest.testNomVal(tests.reference.TypeFactoryTest)","tests.reference.TypeFactoryTest.testNomValSelect(tests.reference.TypeFactoryTest)","tests.reference.CurryFactoryTest.testCurryN(tests.reference.CurryFactoryTest)","tests.reference.FloatFactoryTest.testFloatPowerOf(tests.reference.FloatFactoryTest)","tests.reference.LogicControlFactoryTest.testFor_(tests.reference.LogicControlFactoryTest)","tests.reference.StringFactoryTest.testCamlLightChar(tests.reference.StringFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixPatt(tests.reference.TupleFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowIfFwd(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursive(tests.reference.RecursiveFactoryTest)","tests.reference.RecursiveFactoryTest.testRecursiveTyped(tests.reference.RecursiveFactoryTest)","tests.reference.TupleFactoryTest.testTuplePrefixMatch(tests.reference.TupleFactoryTest)","tests.reference.TypeFactoryTest.testVariantMatch(tests.reference.TypeFactoryTest)","tests.reference.RecursiveFactoryTest.testSetForwards(tests.reference.RecursiveFactoryTest)","tests.reference.FunctionFactoryTest.testApplyToEach(tests.reference.FunctionFactoryTest)","tests.reference.RecursiveFactoryTest.testReclose(tests.reference.RecursiveFactoryTest)","tests.reference.CurryFactoryTest.testCurry(tests.reference.CurryFactoryTest)","tests.reference.ExceptionFactoryTest.testCatchElseRethrow(tests.reference.ExceptionFactoryTest)","tests.reference.RecordFactoryTest.testRecordMatch(tests.reference.RecordFactoryTest)","tests.reference.RecursiveFactoryTest.testFollowFwd(tests.reference.RecursiveFactoryTest)","tests.reference.BoolFactoryTest.testGreater(tests.reference.BoolFactoryTest)","tests.reference.AssignFactoryTest.testAlloc(tests.reference.AssignFactoryTest)"],"killing-tests":["tests.reference.BindingFactoryTest.testId(tests.reference.BindingFactoryTest)"],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlForNode","package":"funcons/truffle/controlflow","file-name":"LogicControlForNode.java","line-number":32,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"LogicControlSeqNode","package":"funcons/truffle/controlflow","file-name":"LogicControlSeqNode.java","line-number":23,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleTupleFactory$TupleTail","package":"funcons/truffle/collections","file-name":"TruffleTupleFactory.java","line-number":156,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"getForeignAccess","description":"()Lcom/oracle/truffle/api/interop/ForeignAccess;","class":"FNCFunction","package":"funcons/truffle/nodes","file-name":"FNCFunction.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBindingFactory$Closure","package":"funcons/truffle/entities","file-name":"TruffleBindingFactory.java","line-number":94,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleListFactory$ProjectList","package":"funcons/truffle/collections","file-name":"TruffleListFactory.java","line-number":147,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnorecursion/parser/CLNoRecParser$DecloptionalvartypesContext;","class":"CLNoRecParser$DeclnewtypeappendixContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":1564,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecursiveFreshFwdsNode","package":"funcons/truffle/recursion","file-name":"RecursiveFreshFwdsNode.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoRecParser$EmptylistContext","package":"camllightnorecursion/parser","file-name":"CLNoRecParser.java","line-number":939,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleSupplyGivenFactory$Given","package":"funcons/truffle/entities","file-name":"TruffleSupplyGivenFactory.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"main","description":"([Ljava/lang/String;)V","class":"CLNoColPGen","package":"camllightnocollections/parser","file-name":"CLNoColPGen.java","line-number":9,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BindingBindValueNode","package":"funcons/truffle/entities","file-name":"BindingBindValueNode.java","line-number":28,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleFunctionFactory$Abs","package":"funcons/truffle/functions","file-name":"TruffleFunctionFactory.java","line-number":90,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"access","description":"(Lfuncons/truffle/nodes/FNCLexicalScope$VariableNamesObject;)Ljava/lang/Object;","class":"FNCLexicalScope$VariableNamesObject$VariableNamesMessageResolution$VarNamesGetSizeNode","package":"funcons/truffle/nodes","file-name":"FNCLexicalScope.java","line-number":373,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"MapMapGetNode","package":"funcons/truffle/collections","file-name":"MapMapGetNode.java","line-number":23,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleAssignFactory$Assign","package":"funcons/truffle/entities","file-name":"TruffleAssignFactory.java","line-number":52,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListPrefixNode","package":"funcons/truffle/collections","file-name":"ListListPrefixNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BindingBoundValueNode","package":"funcons/truffle/entities","file-name":"BindingBoundValueNode.java","line-number":22,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Equal","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":126,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"decloptionalvartypes","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$DecloptionalvartypesContext;","class":"CLNoSEParser$DeclnewtypeappendixContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":1487,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ExceptionThrowNode","package":"funcons/truffle/controlflow","file-name":"ExceptionThrowNode.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"BindingClosureNode","package":"funcons/truffle/entities","file-name":"BindingClosureNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleBoolFactory$Greater","package":"funcons/truffle/values","file-name":"TruffleBoolFactory.java","line-number":96,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"ListListAppendNode","package":"funcons/truffle/collections","file-name":"ListListAppendNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTupleTailNode","package":"funcons/truffle/collections","file-name":"TupleTupleTailNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$Lit","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":88,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorAssignNode","package":"funcons/truffle/collections","file-name":"VectorVectorAssignNode.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"tryWithExp","description":"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;","class":"ExceptionAlg","package":"camllight/algebras/exprs","file-name":"ExceptionAlg.java","line-number":11,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"killing-tests":["tests.reference.exprs.ExceptionAlgTest.testTryWithExp(tests.reference.exprs.ExceptionAlgTest)"],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecursiveFactory$FreshFwd","package":"funcons/truffle/recursion","file-name":"TruffleRecursiveFactory.java","line-number":76,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"create","description":"(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/IdentityHashMap;Ljava/util/Set;)Ljava/lang/Object;","class":"ToDot","package":"noa/proxy","file-name":"ToDot.java","line-number":80,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"type","description":"()Lcamllightnosideeffects/parser/CLNoSEParser$TypeContext;","class":"CLNoSEParser$TupletypelistContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":2505,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"StringCamlLightCharNode","package":"funcons/truffle/values","file-name":"StringCamlLightCharNode.java","line-number":19,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FloatLitNode","package":"funcons/truffle/values","file-name":"FloatLitNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"EMPTYLISTTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLParser$EmptylistContext","package":"camllight/parser","file-name":"CLParser.java","line-number":950,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorSelect","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":141,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleIntFactory$IntSubstract","package":"funcons/truffle/values","file-name":"TruffleIntFactory.java","line-number":103,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleVectorFactory$VectorAppend","package":"funcons/truffle/collections","file-name":"TruffleVectorFactory.java","line-number":66,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecordFieldNode","package":"funcons/truffle/collections","file-name":"RecordFieldNode.java","line-number":21,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"FunctionCloseNode","package":"funcons/truffle/functions","file-name":"FunctionCloseNode.java","line-number":26,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"pattTuple","description":"(Ljava/lang/Object;Ljava/util/List;)Ljava/lang/Object;","class":"TuplePattAlg","package":"camllight/algebras/patts","file-name":"TuplePattAlg.java","line-number":17,"classification":"tested","detected":["null"],"not-detected":[],"tests":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)"],"mutations":[{"status":"KILLED","mutator":"null","tests-run":1,"tests":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)","tests.reference.exprs.FunctionAlgTest.testCurriedFunc(tests.reference.exprs.FunctionAlgTest)","tests.reference.decls.BindAlgTest.testDeclBindMonoFunc(tests.reference.decls.BindAlgTest)","tests.reference.patts.PattAlgTest.testPattConstrPatt(tests.reference.patts.PattAlgTest)","tests.reference.patts.PattMatchAlgTest.testPattMatchCurriedMulti(tests.reference.patts.PattMatchAlgTest)","tests.reference.decls.RecBindAlgTest.testDeclRec(tests.reference.decls.RecBindAlgTest)"],"killing-tests":["tests.reference.patts.TuplePattAlgTest.testPattTuple(tests.reference.patts.TuplePattAlgTest)"],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleRecordFactory$RecordMatch","package":"funcons/truffle/collections","file-name":"TruffleRecordFactory.java","line-number":110,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"TupleTuplePrefixNode","package":"funcons/truffle/collections","file-name":"TupleTuplePrefixNode.java","line-number":29,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"RecordRecordMatchNode","package":"funcons/truffle/collections","file-name":"RecordRecordMatchNode.java","line-number":24,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeVoid","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)V","class":"MapMapUpdateNode","package":"funcons/truffle/collections","file-name":"MapMapUpdateNode.java","line-number":30,"classification":"not-covered","detected":[],"not-detected":["void"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"void","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"VectorVectorAppendNode","package":"funcons/truffle/collections","file-name":"VectorVectorAppendNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"executeGeneric","description":"(Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;","class":"BindingScopeNode","package":"funcons/truffle/entities","file-name":"BindingScopeNode.java","line-number":25,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"createRoot","description":"()Lcom/oracle/truffle/api/nodes/RootNode;","class":"FNCFunctionMessageResolutionForeign$FNCForeignIsExecutableSubNode","package":"funcons/truffle/functions","file-name":"FNCFunctionMessageResolutionForeign.java","line-number":195,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"IDTOKEN","description":"()Lorg/antlr/v4/runtime/tree/TerminalNode;","class":"CLNoSEParser$VartypeContext","package":"camllightnosideeffects/parser","file-name":"CLNoSEParser.java","line-number":326,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]},{"name":"buildAST","description":"(Lfuncons/truffle/nodes/FNCLanguage;)Lfuncons/truffle/nodes/FNCStatementNode;","class":"TruffleExceptionFactory$Fail","package":"funcons/truffle/controlflow","file-name":"TruffleExceptionFactory.java","line-number":147,"classification":"not-covered","detected":[],"not-detected":["null"],"tests":[],"mutations":[{"status":"NO_COVERAGE","mutator":"null","tests-run":0,"tests":[],"killing-tests":[],"succeeding-tests":[]}]}],"analysis":{"time":104082,"mutators":["void","null","empty","true","false","0","1","(short)0","(short)1","(byte)0","(byte)1","0L","1L","0.0","1.0","0.0f","1.0f","'\\40'","'A'","\"\"","\"A\""]}}