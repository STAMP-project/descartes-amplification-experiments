package org.eaxy.usage;


public class ElementBuilderTest {
    @org.junit.Test
    public void shouldSerializeEmptyElement() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldSerializeEmptyElement()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeEmptyElement()|0", org.eaxy.Element.class, org.eaxy.Xml.el("foo")).toXML())).isEqualTo("<foo />");
    }

    @org.junit.Test
    public void shouldSerializeElementWithText() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldSerializeElementWithText()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeElementWithText()|1", org.eaxy.Element.class, org.eaxy.Xml.el("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Node>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeElementWithText()|0", org.eaxy.Node.class, org.eaxy.Xml.text("hello world")))).toXML())).isEqualTo("<foo>hello world</foo>");
    }

    @org.junit.Test
    public void shouldSerializeNestedElements() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldSerializeNestedElements()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeNestedElements()|2", org.eaxy.Element.class, org.eaxy.Xml.el("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeNestedElements()|0", org.eaxy.Element.class, org.eaxy.Xml.el("bar", "hello")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeNestedElements()|1", org.eaxy.Element.class, org.eaxy.Xml.el("baz", "world")))).toXML())).isEqualTo("<foo><bar>hello</bar><baz>world</baz></foo>");
    }

    @org.junit.Test
    public void shouldSerializeAttributes() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributes()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributes()|4", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributes()|3", org.eaxy.Element.class, org.eaxy.Xml.el("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributes()|2", org.eaxy.Element.class, org.eaxy.Xml.el("bar", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Node>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributes()|0", org.eaxy.Node.class, org.eaxy.Xml.text("gz")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributes()|1", org.eaxy.Attribute.class, org.eaxy.Xml.attr("href", "http://a.com")))))).attr("alt", "test")).toXML())).isEqualTo("<foo alt=\"test\"><bar href=\"http://a.com\">gz</bar></foo>");
    }

    @org.junit.Test
    public void shouldGetAllAttributes() {
        java.util.Map<java.lang.String, java.lang.String> attrs = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|4", java.util.Map.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|3", org.eaxy.Element.class, org.eaxy.Xml.el("element", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|0", org.eaxy.Attribute.class, org.eaxy.Xml.attr("abc", "a")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|1", org.eaxy.Attribute.class, org.eaxy.Xml.attr("xyz", "b")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|2", org.eaxy.Attribute.class, org.eaxy.Xml.attr("def", "c")))).attrs());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|8", org.assertj.core.api.IterableAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|7", org.assertj.core.api.IterableAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|6", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|5", java.util.Map.class, attrs).keySet()))).containsExactly("abc", "xyz", "def"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|12", org.assertj.core.api.IterableAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|11", org.assertj.core.api.IterableAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|10", java.util.Collection.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Map<java.lang.String, java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldGetAllAttributes()|9", java.util.Map.class, attrs).values()))).containsExactly("a", "b", "c"));
    }

    @org.junit.Test
    public void shouldCreateAttributes() throws java.lang.Exception {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributes()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributes()|1", org.eaxy.Element.class, org.eaxy.Xml.el("element", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributes()|0", org.eaxy.Attribute.class, org.eaxy.Xml.attr("a", "b")))).hasAttr("a"))).isTrue();
    }

    @org.junit.Test
    public void shouldSerializeAttributesWithSpecialChars() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributesWithSpecialChars()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributesWithSpecialChars()|1", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributesWithSpecialChars()|0", org.eaxy.Element.class, org.eaxy.Xml.el("foo")).attr("attr", "This is \"<\" - a less than sign")).attr("attr"))).isEqualTo("This is \"<\" - a less than sign");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributesWithSpecialChars()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributesWithSpecialChars()|4", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldSerializeAttributesWithSpecialChars()|3", org.eaxy.Element.class, org.eaxy.Xml.el("foo")).attr("attr", "This is \"<\" - a less than sign")).toXML())).isEqualTo("<foo attr=\"This is &quot;&lt;&quot; - a less than sign\" />");
    }

    @org.junit.Test
    public void shouldCreateAttributesAsArguments() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributesAsArguments()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributesAsArguments()|1", org.eaxy.Element.class, org.eaxy.Xml.el("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributesAsArguments()|0", org.eaxy.Attribute.class, org.eaxy.Xml.attr("attr", "This is \"<\" - a less than sign")))).attr("attr"))).isEqualTo("This is \"<\" - a less than sign");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributesAsArguments()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributesAsArguments()|4", org.eaxy.Element.class, org.eaxy.Xml.el("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateAttributesAsArguments()|3", org.eaxy.Attribute.class, org.eaxy.Xml.attr("attr", "This is \"<\" - a less than sign")))).toXML())).isEqualTo("<foo attr=\"This is &quot;&lt;&quot; - a less than sign\" />");
    }

    @org.junit.Test
    public void shouldCreateDocument() throws java.lang.Exception {
        org.eaxy.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateDocument()|1", org.eaxy.Document.class, org.eaxy.Xml.doc(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateDocument()|0", org.eaxy.Element.class, org.eaxy.Xml.el("empty"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateDocument()|2", org.eaxy.Document.class, doc).setVersion("1.1");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateDocument()|3", org.eaxy.Document.class, doc).setEncoding("iso-8859-1");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldCreateDocument()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateDocument()|5", org.eaxy.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldCreateDocument()|4", org.eaxy.Document.class, doc).copy()).toXML())).contains("<?xml version=\"1.1\" encoding=\"iso-8859-1\"?>");
    }

    @org.junit.Test
    public void shouldPrintElementWithNameSpace() {
        org.eaxy.Namespace SOAP_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintElementWithNameSpace()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://soap.com"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintElementWithNameSpace()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintElementWithNameSpace()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintElementWithNameSpace()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintElementWithNameSpace()|1", org.eaxy.Namespace.class, SOAP_NS).el("Envelope")).copy()).toXML())).isEqualTo("<Envelope xmlns=\"http://soap.com\" />");
    }

    @org.junit.Test
    public void shouldPrintNamespacePrefix() {
        org.eaxy.Namespace SOAP_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintNamespacePrefix()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://soap.com", "SOAP"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintNamespacePrefix()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintNamespacePrefix()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintNamespacePrefix()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintNamespacePrefix()|1", org.eaxy.Namespace.class, SOAP_NS).el("Envelope")).copy()).toXML())).isEqualTo("<SOAP:Envelope xmlns:SOAP=\"http://soap.com\" />");
    }

    @org.junit.Test
    public void shouldPrintAttributeNamespaces() {
        org.eaxy.Namespace A1_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("uri:a1", "a"));
        org.eaxy.Namespace A2_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|1", org.eaxy.Namespace.class, new org.eaxy.Namespace("uri:a2", "b"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|6", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|2", org.eaxy.Namespace.class, A1_NS).el("foo")).attr(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|5", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintAttributeNamespaces()|4", org.eaxy.Namespace.class, A2_NS).name("bar")), "test")).copy()).toXML())).isEqualTo("<a:foo xmlns:a=\"uri:a1\" xmlns:b=\"uri:a2\" b:bar=\"test\" />");
    }

    @org.junit.Test
    public void shouldOnlyPrintNamespaceOnce() {
        org.eaxy.Namespace A_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("uri:a", "a"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|9", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|1", org.eaxy.Namespace.class, A_NS).el("foo")).attr(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|4", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|3", org.eaxy.Namespace.class, A_NS).name("first")), "one")).attr(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|7", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldOnlyPrintNamespaceOnce()|6", org.eaxy.Namespace.class, A_NS).name("second")), "two")).copy()).toXML())).isEqualTo("<a:foo xmlns:a=\"uri:a\" a:first=\"one\" a:second=\"two\" />");
    }

    @org.junit.Test
    public void shouldNotPrintNestedNamespaces() {
        org.eaxy.Namespace SOAP_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://soap.com", "SOAP"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|1", org.eaxy.Namespace.class, SOAP_NS).el("Envelope", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|2", org.eaxy.Namespace.class, SOAP_NS).el("Header")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|4", org.eaxy.Namespace.class, SOAP_NS).el("Body", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|6", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintNestedNamespaces()|5", org.eaxy.Namespace.class, SOAP_NS).el("SubBody")))))).toXML())).isEqualTo("<SOAP:Envelope xmlns:SOAP=\"http://soap.com\"><SOAP:Header /><SOAP:Body><SOAP:SubBody /></SOAP:Body></SOAP:Envelope>");
    }

    @org.junit.Test
    public void shouldNotPrintAncestorNamespace() {
        org.eaxy.Namespace A_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://a.com", "a"));
        org.eaxy.Namespace B_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|1", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://b.com", "b"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|2", org.eaxy.Namespace.class, A_NS).el("Ancestor", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|6", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|3", org.eaxy.Namespace.class, B_NS).el("Child", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldNotPrintAncestorNamespace()|4", org.eaxy.Namespace.class, A_NS).el("GrandChild")))))).toXML())).isEqualTo(("<a:Ancestor xmlns:a=\"http://a.com\">" + ("<b:Child xmlns:b=\"http://b.com\"><a:GrandChild /></b:Child>" + "</a:Ancestor>")));
    }

    @org.junit.Test
    public void shouldPrintSiblingNamespaces() {
        org.eaxy.Namespace SOAP_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintSiblingNamespaces()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://soap.com", "S"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintSiblingNamespaces()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintSiblingNamespaces()|5", org.eaxy.Element.class, org.eaxy.Xml.el("Super", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintSiblingNamespaces()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintSiblingNamespaces()|1", org.eaxy.Namespace.class, SOAP_NS).el("Envelope")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintSiblingNamespaces()|4", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintSiblingNamespaces()|3", org.eaxy.Namespace.class, SOAP_NS).el("Body")))).toXML())).isEqualTo("<Super><S:Envelope xmlns:S=\"http://soap.com\" /><S:Body xmlns:S=\"http://soap.com\" /></Super>");
    }

    @org.junit.Test
    public void shouldEscapeHtmlCharacters() {
        org.eaxy.Element element = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldEscapeHtmlCharacters()|0", org.eaxy.Element.class, org.eaxy.Xml.el("Element", "Text with <, > and &"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldEscapeHtmlCharacters()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldEscapeHtmlCharacters()|1", org.eaxy.Element.class, element).toXML())).isEqualTo("<Element>Text with &lt;, &gt; and &amp;</Element>");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldEscapeHtmlCharacters()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldEscapeHtmlCharacters()|3", org.eaxy.Element.class, element).text())).isEqualTo("Text with <, > and &");
    }

    @org.junit.Test
    public void shouldMapElementsOverList() {
        java.util.List<java.lang.String> data = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|0", java.util.List.class, java.util.Arrays.asList("a", "b", "c"));
        org.eaxy.Element element = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|5", org.eaxy.Element.class, org.eaxy.Xml.el("ul", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Content[]>observeState("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|4", org.eaxy.Content[].class, org.eaxy.Xml.map(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<java.lang.String>>observeState("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|1", java.util.List.class, data), ( s) -> eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|3", org.eaxy.Element.class, org.eaxy.Xml.el("li", eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|2", s)))))));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldMapElementsOverList()|6", org.eaxy.Element.class, element).toXML())).isEqualTo("<ul><li>a</li><li>b</li><li>c</li></ul>");
    }

    @org.junit.Test
    public void shouldPrintIndentedXml() throws java.lang.Exception {
        org.eaxy.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|6", org.eaxy.Document.class, org.eaxy.Xml.doc(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|5", org.eaxy.Element.class, org.eaxy.Xml.el("root", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|0", org.eaxy.Element.class, org.eaxy.Xml.el("first", "with some text")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|1", org.eaxy.Element.class, org.eaxy.Xml.el("empty")).attr("foo", "bar")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|4", org.eaxy.Element.class, org.eaxy.Xml.el("second", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|3", org.eaxy.Element.class, org.eaxy.Xml.el("nested", "Indented at level 2"))))))));
        java.lang.String nl = org.eaxy.Document.LINE_SEPARATOR;
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|7", org.eaxy.Document.class, doc).toIndentedXML("***"))).isEqualTo(((((((((((((((("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|9", nl))) + "<root>") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|10", nl))) + "***<first>with some text</first>") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|11", nl))) + "***<empty foo=\"bar\" />") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|12", nl))) + "***<second>") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|13", nl))) + "******<nested>Indented at level 2</nested>") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|14", nl))) + "***</second>") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|15", nl))) + "</root>") + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldPrintIndentedXml()|16", nl))));
    }

    @org.junit.Test(expected = org.eaxy.MalformedXMLException.class)
    public void shouldRejectIncompleteXml() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldRejectIncompleteXml()|0", org.eaxy.Document.class, org.eaxy.Xml.xml("<unclosed-element>Unclosed"));
        } catch (org.eaxy.MalformedXMLException a1553410516671) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.eaxy.usage.ElementBuilderTest|shouldRejectIncompleteXml()|!", a1553410516671);
            throw a1553410516671;
        }
    }

    @org.junit.Test(expected = org.eaxy.MalformedXMLException.class)
    public void shouldRejectUnmatchedXml() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldRejectUnmatchedXml()|0", org.eaxy.Document.class, org.eaxy.Xml.xml("<open-tag>Malformed</close-tag>"));
        } catch (org.eaxy.MalformedXMLException a1553410516672) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.eaxy.usage.ElementBuilderTest|shouldRejectUnmatchedXml()|!", a1553410516672);
            throw a1553410516672;
        }
    }

    @org.junit.Test(expected = org.eaxy.MalformedXMLException.class)
    public void shouldRejectDoubleRootedXml() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldRejectDoubleRootedXml()|0", org.eaxy.Document.class, org.eaxy.Xml.xml("<first-root /><second-root />"));
        } catch (org.eaxy.MalformedXMLException a1553410516671) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("org.eaxy.usage.ElementBuilderTest|shouldRejectDoubleRootedXml()|!", a1553410516671);
            throw a1553410516671;
        }
    }

    @org.junit.Test
    public void shouldUseNamespacesDeclaredInParent() {
        org.eaxy.Namespace SOAP_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://soap.com", "S"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|9", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|6", org.eaxy.Element.class, org.eaxy.Xml.el("Super", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|1", org.eaxy.Namespace.class, SOAP_NS), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|2", org.eaxy.Namespace.class, SOAP_NS).el("Envelope")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldUseNamespacesDeclaredInParent()|4", org.eaxy.Namespace.class, SOAP_NS).el("Body")))).copy()).toXML()))).getRootElement()).toXML())).isEqualTo("<Super xmlns:S=\"http://soap.com\"><S:Envelope /><S:Body /></Super>");
    }

    @org.junit.Test
    public void shouldReadXml() {
        org.eaxy.Namespace SOAP_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://soap.com", "S"));
        org.eaxy.Namespace INNER_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|1", org.eaxy.Namespace.class, new org.eaxy.Namespace("uri:inner", "i"));
        java.lang.String xml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|9", org.eaxy.Element.class, org.eaxy.Xml.el("Super", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|2", org.eaxy.Namespace.class, SOAP_NS), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|4", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|3", org.eaxy.Namespace.class, SOAP_NS).el("Envelope")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|5", org.eaxy.Namespace.class, SOAP_NS).el("Body", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|6", org.eaxy.Namespace.class, INNER_NS).el("content", "some string")))))).copy()).toXML());
        org.eaxy.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|13", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|12", xml)));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|15", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|14", org.eaxy.Document.class, doc).getRootElement()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadXml()|17", xml));
    }

    @org.junit.Test
    public void shouldHandleAttributesOnNamespaces() throws java.lang.Exception {
        // <a:foo xmlns:a="uri:a" a:first="one" a:second="two" />
        org.eaxy.Namespace A_NS = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|0", org.eaxy.Namespace.class, new org.eaxy.Namespace("uri:a", "a"));
        org.eaxy.Element xml = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|6", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|1", org.eaxy.Namespace.class, A_NS).el("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|3", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|2", org.eaxy.Namespace.class, A_NS).attr("first", "one")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|5", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|4", org.eaxy.Namespace.class, A_NS).attr("second", "two"))));
        org.eaxy.Document doc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|10", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|7", org.eaxy.Element.class, xml).copy()).toXML())));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|12", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldHandleAttributesOnNamespaces()|11", org.eaxy.Document.class, doc).getRootElement()).toXML())).isEqualTo("<a:foo xmlns:a=\"uri:a\" a:first=\"one\" a:second=\"two\" />");
    }

    @org.junit.Test
    public void shouldReadDocument() {
        java.lang.String xml = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + (org.eaxy.Document.LINE_SEPARATOR)) + "<super>Some text<!-- only a comment --></super>";
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDocument()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadDocument()|2", org.eaxy.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadDocument()|1", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDocument()|0", xml))).copy()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDocument()|4", xml));
    }

    @org.junit.Test
    public void shouldReadDocType() {
        java.lang.String docType = "<!DOCTYPE MedlineCitationSet PUBLIC \"-//NLM//DTD Medline Citation, 1st January, 2012//EN\" \"http://www.nlm.nih.gov/databases/dtd/nlmmedlinecitationset_120101.dtd\">";
        java.lang.String xml = ((("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + (org.eaxy.Document.LINE_SEPARATOR)) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDocType()|0", docType))) + (org.eaxy.Document.LINE_SEPARATOR)) + "<super>Some text<!-- only a comment --></super>";
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDocType()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadDocType()|3", org.eaxy.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadDocType()|2", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDocType()|1", xml))).copy()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDocType()|5", xml));
    }

    @org.junit.Test
    public void shouldReadEncoding() throws java.lang.Exception {
        java.lang.String xml = ("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" + (org.eaxy.Document.LINE_SEPARATOR)) + "<empty />";
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadEncoding()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadEncoding()|4", org.eaxy.Document.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadEncoding()|3", org.eaxy.Document.class, org.eaxy.StaxReader.read(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.ByteArrayInputStream>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadEncoding()|2", java.io.ByteArrayInputStream.class, new java.io.ByteArrayInputStream(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadEncoding()|1", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadEncoding()|0", xml).getBytes()))), null)).copy()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadEncoding()|6", xml));
    }

    @org.junit.Test
    public void shouldReadXmlComment() {
        java.lang.String xml = "<super>Some text<!-- only a comment --></super>";
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadXmlComment()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXmlComment()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadXmlComment()|1", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadXmlComment()|0", xml))).getRootElement()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadXmlComment()|4", xml));
    }

    @org.junit.Test
    public void shouldTranslateWithAttributeNamespaces() throws java.lang.Exception {
        java.lang.String text = "<msg:message xmlns:msg=\"http://eaxy.org/test/mailmessage\" msg:type=\"email\" other=\"true\" />";
        org.eaxy.Element email = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|2", org.eaxy.Document.class, org.eaxy.StaxReader.read(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringReader>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|1", java.io.StringReader.class, new java.io.StringReader(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|0", text))))).getRootElement());
        org.w3c.dom.Document dom = eu.stamp_project.reneri.instrumentation.StateObserver.<org.w3c.dom.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|6", org.w3c.dom.Document.class, org.eaxy.Xml.toDom(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|5", org.eaxy.Document.class, new org.eaxy.Document(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|4", org.eaxy.Element.class, email)))));
        org.eaxy.Element transformed = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|9", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|8", org.eaxy.Document.class, org.eaxy.Xml.fromDom(eu.stamp_project.reneri.instrumentation.StateObserver.<org.w3c.dom.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|7", org.w3c.dom.Document.class, dom))).getRootElement());
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|10", org.eaxy.Element.class, transformed).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldTranslateWithAttributeNamespaces()|12", org.eaxy.Element.class, email).toXML()));
    }

    @org.junit.Test
    public void shouldReadWithAttributeNamespaces() throws java.lang.Exception {
        java.lang.String text = "<msg:message xmlns:msg=\"http://eaxy.org/test/mailmessage\" msg:type=\"email\" other=\"true\" />";
        org.eaxy.Element email = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|2", org.eaxy.Document.class, org.eaxy.StaxReader.read(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.StringReader>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|1", java.io.StringReader.class, new java.io.StringReader(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|0", text))))).getRootElement());
        org.eaxy.QualifiedName attrName = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|4", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName("http://eaxy.org/test/mailmessage", "msg:type"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|5", org.eaxy.Element.class, email).attr(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|6", org.eaxy.QualifiedName.class, attrName)))).isEqualTo("email");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|8", org.eaxy.Element.class, email).attr(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadWithAttributeNamespaces()|9", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName("other"))))).isEqualTo("true");
    }

    @org.junit.Test
    public void shouldReadCDATA() {
        java.lang.String xml = "<super>Some text<![CDATA[ some cdata text ]]></super>";
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadCDATA()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadCDATA()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadCDATA()|1", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadCDATA()|0", xml))).getRootElement()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadCDATA()|4", xml));
    }

    @org.junit.Test
    public void shouldReadPrefixedNamespace() {
        java.lang.String xml = "<s:super xmlns:s=\"uri:test\"><s:sub>some data</s:sub></s:super>";
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|1", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|0", xml))).getRootElement()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|4", xml));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|9", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|6", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|5", xml))).find(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|8", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadPrefixedNamespace()|7", org.eaxy.Namespace.class, new org.eaxy.Namespace("uri:test", "s")).name("sub")))).single()).text())).isEqualTo("some data");
    }

    @org.junit.Test
    public void shouldReadDefaultNamespace() {
        java.lang.String xml = "<super xmlns=\"uri:test\">some data</super>";
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDefaultNamespace()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadDefaultNamespace()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadDefaultNamespace()|2", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadDefaultNamespace()|1", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDefaultNamespace()|0", xml))).getRootElement()).copy()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadDefaultNamespace()|5", xml));
    }

    @org.junit.Test
    public void shouldReadHtml() {
        java.lang.String xml = eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|7", org.eaxy.Element.class, org.eaxy.Xml.el("html", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|6", org.eaxy.Element.class, org.eaxy.Xml.el("body", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|5", org.eaxy.Element.class, org.eaxy.Xml.el("div", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Node>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|0", org.eaxy.Node.class, org.eaxy.Xml.text("Me thinks")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|1", org.eaxy.Element.class, org.eaxy.Xml.el("i", "it")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Node>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|2", org.eaxy.Node.class, org.eaxy.Xml.text("looks")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|3", org.eaxy.Element.class, org.eaxy.Xml.el("strong", "like a")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Node>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|4", org.eaxy.Node.class, org.eaxy.Xml.text("weasel")))))))).copy()).toXML());
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|12", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|11", org.eaxy.Document.class, org.eaxy.Xml.xml(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|10", xml))).getRootElement()).toXML())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.usage.ElementBuilderTest|shouldReadHtml()|14", xml));
    }
}

