package org.eaxy.experimental;


public class SampleXmlBuilderTest {
    @org.junit.Test
    public void shouldGenerateMessageFromWsdl() throws java.io.IOException {
        org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|0", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder("xsd/greath-reservation.wsdl"));
        org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition operation = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|3", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|2", org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|1", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).service("reservationService")).operation("opCheckAvailability"));
        org.eaxy.Validator validator = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|5", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|4", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).getValidator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|9", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|6", org.eaxy.Validator.class, validator).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|7", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).randomInput("gh"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|13", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|10", org.eaxy.Validator.class, validator).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|12", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateMessageFromWsdl()|11", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).randomOutput("gh"))));
    }

    @org.junit.Test
    public void shouldGenerateAttributeValues() throws java.io.IOException {
        org.eaxy.Document schemaDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|0", org.eaxy.Document.class, org.eaxy.Xml.readResource("/mailmessage.xsd"));
        org.eaxy.experimental.SampleXmlBuilder generator = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|2", org.eaxy.experimental.SampleXmlBuilder.class, new org.eaxy.experimental.SampleXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|1", org.eaxy.Document.class, schemaDoc), null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|3", org.eaxy.experimental.SampleXmlBuilder.class, generator).setFull(true);
        org.eaxy.Element element = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|4", org.eaxy.experimental.SampleXmlBuilder.class, generator).createRandomElement("message"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|7", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateAttributeValues()|6", org.eaxy.Element.class, element).find("recipients", "recipient")).first()).attr("type"))).isIn("email", "phone");
    }

    @org.junit.Test
    public void shouldGenerateManyElementsWhenAppropriate() throws java.lang.Exception {
        org.eaxy.Document schemaDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|0", org.eaxy.Document.class, org.eaxy.Xml.readResource("/mailmessage.xsd"));
        org.eaxy.experimental.SampleXmlBuilder generator = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|2", org.eaxy.experimental.SampleXmlBuilder.class, new org.eaxy.experimental.SampleXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|1", org.eaxy.Document.class, schemaDoc), "msg"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|3", org.eaxy.experimental.SampleXmlBuilder.class, generator).setFull(true);
        org.eaxy.Element element = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|4", org.eaxy.experimental.SampleXmlBuilder.class, generator).createRandomElement("message"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|9", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|7", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|6", org.eaxy.experimental.SampleXmlBuilder.class, generator).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|8", org.eaxy.Element.class, element)));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|11", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateManyElementsWhenAppropriate()|10", org.eaxy.Element.class, element).find("recipients", "recipient")).size())).isGreaterThan(1);
    }

    @org.junit.Test
    public void shouldBuildFull() throws java.io.IOException {
        org.eaxy.experimental.SampleXmlBuilder generator = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|1", org.eaxy.experimental.SampleXmlBuilder.class, new org.eaxy.experimental.SampleXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|0", java.net.URL.class, getClass().getResource("/xsd/po.xsd")), "po"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|2", org.eaxy.experimental.SampleXmlBuilder.class, generator).setFull(true);
        org.eaxy.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|4", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|3", org.eaxy.experimental.SampleXmlBuilder.class, generator).createRandomElement("purchaseOrder"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|5", org.eaxy.Element.class, el).hasAttr("orderDate"))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<org.eaxy.Element>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|10", org.assertj.core.api.IterableAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<org.eaxy.Element>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|9", org.assertj.core.api.IterableAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|8", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|7", org.eaxy.Element.class, el).find("comment")))).isNotEmpty());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<org.eaxy.Element>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|16", org.assertj.core.api.IterableAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<org.eaxy.Element>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|15", org.assertj.core.api.IterableAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|14", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|13", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|12", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|11", org.eaxy.Element.class, el).find("items")).check()).find("item")))).isNotEmpty());
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|19", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|18", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|17", org.eaxy.Element.class, el).find("shipTo")).single()).attr("country"))).isEqualTo("US");
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|24", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|22", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|21", org.eaxy.experimental.SampleXmlBuilder.class, generator).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildFull()|23", org.eaxy.Element.class, el)));
    }

    @org.junit.Test
    public void shouldBuildMinimal() throws java.io.IOException {
        org.eaxy.Document schemaDoc = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|0", org.eaxy.Document.class, org.eaxy.Xml.readResource("/xsd/po.xsd"));
        org.eaxy.experimental.SampleXmlBuilder generator = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|2", org.eaxy.experimental.SampleXmlBuilder.class, new org.eaxy.experimental.SampleXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|1", org.eaxy.Document.class, schemaDoc), null));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|3", org.eaxy.experimental.SampleXmlBuilder.class, generator).setMinimal(true);
        org.eaxy.Element el = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|4", org.eaxy.experimental.SampleXmlBuilder.class, generator).createRandomElement("purchaseOrder"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|6", org.eaxy.Element.class, el).hasAttr("orderDate"))).isFalse();
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<org.eaxy.Element>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|10", org.assertj.core.api.IterableAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|9", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|8", org.eaxy.Element.class, el).find("comment")))).isEmpty();
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.IterableAssert<org.eaxy.Element>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|15", org.assertj.core.api.IterableAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|14", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|13", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|12", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|11", org.eaxy.Element.class, el).find("items")).check()).find("item")))).isEmpty();
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|19", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|17", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|16", org.eaxy.experimental.SampleXmlBuilder.class, generator).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldBuildMinimal()|18", org.eaxy.Element.class, el)));
    }

    @org.junit.Test
    public void shouldGenerateFromMultipleFiles() throws java.lang.Exception {
        // TODO: This used regex for SKU - would be very cool if we could support a simplified regex generator
        org.eaxy.experimental.SampleXmlBuilder generator = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|1", org.eaxy.experimental.SampleXmlBuilder.class, new org.eaxy.experimental.SampleXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|0", java.net.URL.class, getClass().getResource("/xsd/ipo.xsd")), "ipo"));
        org.eaxy.Element element = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|3", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|2", org.eaxy.experimental.SampleXmlBuilder.class, generator).createRandomElement("purchaseOrder"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|5", org.eaxy.Validator.class, new org.eaxy.Validator(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.String[]>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|4", java.lang.String[].class, new java.lang.String[]{ "xsd/ipo.xsd" }))).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|6", org.eaxy.Element.class, element)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|11", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|9", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|8", org.eaxy.experimental.SampleXmlBuilder.class, generator).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateFromMultipleFiles()|10", org.eaxy.Element.class, element)));
    }

    @org.junit.Test
    public void shouldGenerateRandomInputMessage() throws java.io.IOException {
        org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|1", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|0", java.net.URL.class, getClass().getResource("/xsd/StockQuoteService.wsdl"))));
        org.eaxy.Element input = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|4", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|3", org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|2", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).service("StockQuoteService")).operation("GetLastTradePrice")).randomInput("m"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|6", org.eaxy.Element.class, input).tagName())).isEqualTo("TradePriceRequest");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|9", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomInputMessage()|8", org.eaxy.Element.class, input).find("tickerSymbol")).single()).text())).isNotEmpty();
    }

    @org.junit.Test
    public void shouldGenerateRandomOutputMessage() throws java.io.IOException {
        org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|1", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|0", java.net.URL.class, getClass().getResource("/xsd/StockQuoteService.wsdl"))));
        org.eaxy.Element output = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|4", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|3", org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|2", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).service("StockQuoteService")).operation("GetLastTradePrice")).randomOutput("m"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|6", org.eaxy.Element.class, output).tagName())).isEqualTo("TradePrice");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|9", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|8", org.eaxy.Element.class, output).find("price")).single()).text())).isNotEmpty();
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|16", java.lang.Float.parseFloat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|14", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|13", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateRandomOutputMessage()|12", org.eaxy.Element.class, output).find("price")).single()).text())));
    }

    @org.junit.Test
    public void shouldGetSoapAction() throws java.io.IOException {
        org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|1", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|0", org.eaxy.Document.class, org.eaxy.Xml.readResource("/xsd/StockQuoteService.wsdl"))));
        org.eaxy.Element output = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|4", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|3", org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|2", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).getService()).soapAction("http://example.com/GetLastTradePrice")).randomOutput("m"));
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|6", org.eaxy.Element.class, output).tagName())).isEqualTo("TradePrice");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|9", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|8", org.eaxy.Element.class, output).find("price")).single()).text())).isNotEmpty();
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|16", java.lang.Float.parseFloat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|14", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|13", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGetSoapAction()|12", org.eaxy.Element.class, output).find("price")).single()).text())));
    }

    private static final org.eaxy.Namespace SOAP = new org.eaxy.Namespace("http://schemas.xmlsoap.org/soap/envelope/");

    @org.junit.Test
    public void shouldRespondToSoapCall() throws java.io.IOException {
        org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|1", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|0", org.eaxy.Document.class, org.eaxy.Xml.readResource("/xsd/StockQuoteService.wsdl"))));
        org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition operation = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|4", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|3", org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|2", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).getService()).operation("GetLastTradePrice"));
        org.eaxy.Element input = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|12", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|5", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Envelope", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|6", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Header")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|11", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|8", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Body", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|9", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).randomInput("m"))))));
        java.lang.String soapAction = "http://example.com/GetLastTradePrice";
        org.eaxy.Element soapOutput = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|16", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|13", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).processRequest(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|14", soapAction), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|15", org.eaxy.Element.class, input)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|22", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|19", org.assertj.core.api.ObjectAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|18", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|17", org.eaxy.Element.class, soapOutput).getName()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|21", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|20", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).name("Envelope"))));
        org.eaxy.Element output = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|27", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.ElementSet>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|26", org.eaxy.ElementSet.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|23", org.eaxy.Element.class, soapOutput).find(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|25", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|24", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).name("Body")), "TradePrice")).single());
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|31", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|29", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|28", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldRespondToSoapCall()|30", org.eaxy.Element.class, output)));
    }

    @org.junit.Test
    public void shouldValidateSoapInput() throws java.io.IOException {
        final org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|1", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|0", org.eaxy.Document.class, org.eaxy.Xml.readResource("/xsd/StockQuoteService.wsdl"))));
        org.eaxy.Element input = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|2", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Envelope", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|4", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|3", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Header")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|7", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|5", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Body", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|6", org.eaxy.Element.class, org.eaxy.Xml.el("wrongElement", "Some content"))))));
        java.lang.String soapAction = "\"http://example.com/GetLastTradePrice\"";
        org.assertj.core.api.Assertions.assertThatThrownBy(() -> eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|12", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|9", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).processRequest(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|10", soapAction), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapInput()|11", org.eaxy.Element.class, input)))).isInstanceOf(org.eaxy.SchemaValidationException.class).hasMessageContaining("wrongElement");
    }

    @org.junit.Test
    public void shouldGenerateCurrencyConversion() throws java.io.IOException {
        org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|3", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URL>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|2", java.net.URL.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|1", java.net.URI.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|0", java.io.File.class, new java.io.File("src/test/xml/wsdl-suite/currencyconvertor-multischema.wsdl")).toURI()).toURL())));
        org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition operation = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|6", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|5", org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|4", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).service("CurrencyConvertor")).operation("ConversionRate"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|11", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|8", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|7", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|10", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|9", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).randomInput("msg"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|16", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|13", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|12", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|15", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateCurrencyConversion()|14", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).randomOutput("msg"))));
    }

    @org.junit.Test
    public void shouldValidateSoapEnvelope() throws java.io.IOException {
        org.eaxy.experimental.SampleSoapXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|1", org.eaxy.experimental.SampleSoapXmlBuilder.class, new org.eaxy.experimental.SampleSoapXmlBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|0", org.eaxy.Document.class, org.eaxy.Xml.readResource("/xsd/StockQuoteService.wsdl"))));
        org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition operation = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|4", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|3", org.eaxy.experimental.SampleSoapXmlBuilder.SoapServiceDefinition.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|2", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).getService()).operation("GetLastTradePrice"));
        java.lang.String soapAction = "http://example.com/GetLastTradePrice";
        org.eaxy.Element input = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|6", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|5", org.eaxy.experimental.SampleSoapXmlBuilder.SoapOperationDefinition.class, operation).randomInput("msg"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|16", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|7", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).processRequest(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|8", soapAction), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|15", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|9", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Envelope", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|11", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|10", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Header")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|14", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|12", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Body", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|13", org.eaxy.Element.class, input)))))));
        org.assertj.core.api.Assertions.assertThatThrownBy(() -> eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|24", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|17", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).processRequest(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|18", soapAction), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|23", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|19", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Envelope", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|21", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|20", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Header")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|22", org.eaxy.Element.class, input)))))).isInstanceOf(org.eaxy.NonMatchingPathException.class).hasMessageContaining("http://schemas.xmlsoap.org/soap/envelope/\":Body");
        org.assertj.core.api.Assertions.assertThatThrownBy(() -> eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|32", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleSoapXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|25", org.eaxy.experimental.SampleSoapXmlBuilder.class, builder).processRequest(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|26", soapAction), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|31", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|27", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Ennvelopp", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|30", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|28", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.SOAP).el("Body", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldValidateSoapEnvelope()|29", org.eaxy.Element.class, input)))))))).isInstanceOf(org.eaxy.NonMatchingPathException.class).hasMessageContaining("http://schemas.xmlsoap.org/soap/envelope/\":Envelope");
    }

    private static final org.eaxy.Namespace XS = new org.eaxy.Namespace("http://www.w3.org/2001/XMLSchema", "xs");

    @org.junit.Test
    public void shouldGenerateComplexTypeFromOtherSchema() throws java.io.IOException {
        org.eaxy.Element rootSchema = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|5", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|0", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("schema", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|1", org.eaxy.Attribute.class, org.eaxy.Xml.attr("targetNamespace", "http://eaxy.org/response")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|2", org.eaxy.Attribute.class, org.eaxy.Xml.attr("elementFormDefault", "qualified")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|3", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://eaxy.org/response", "tns")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|4", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://eaxy.org/a", "a"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|23", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|6", org.eaxy.Element.class, rootSchema).addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|9", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|8", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|7", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("import")).attr("namespace", "http://eaxy.org/a")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|18", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|10", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("complexType", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|11", org.eaxy.Attribute.class, org.eaxy.Xml.attr("name", "Response")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|17", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|12", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("sequence", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|16", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|15", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|14", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|13", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("Result")).type("a:Result")))))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|22", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|21", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|20", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|19", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("Response")).type("tns:Response"))));
        org.eaxy.Element elementSchema = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|29", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|24", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("schema", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|25", org.eaxy.Attribute.class, org.eaxy.Xml.attr("targetNamespace", "http://eaxy.org/a")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|26", org.eaxy.Attribute.class, org.eaxy.Xml.attr("elementFormDefault", "qualified")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|27", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://eaxy.org/name", "name")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|28", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://eaxy.org/a", "tns"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|56", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|30", org.eaxy.Element.class, elementSchema).addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|33", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|32", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|31", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("import")).attr("namespace", "http://eaxy.org/name")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|51", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|34", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("complexType", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|35", org.eaxy.Attribute.class, org.eaxy.Xml.attr("name", "Result")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|50", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|36", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("sequence", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|41", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|40", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|39", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|38", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|37", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("RequestId")).type("xs:string")).attr("minOccurs", "0")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|45", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|44", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|43", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|42", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("FullNameEl")).type("name:FullName")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|49", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|48", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|47", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|46", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("UserId")).type("xs:string")))))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|55", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|54", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|53", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|52", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("Result")).type("tns:Result"))));
        org.eaxy.Element nameSchema = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|61", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|57", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("schema", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|58", org.eaxy.Attribute.class, org.eaxy.Xml.attr("targetNamespace", "http://eaxy.org/name")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|59", org.eaxy.Attribute.class, org.eaxy.Xml.attr("elementFormDefault", "qualified")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|60", org.eaxy.Namespace.class, new org.eaxy.Namespace("http://eaxy.org/name", "tns"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|81", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|62", org.eaxy.Element.class, nameSchema).addAll(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|76", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|63", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("complexType", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|64", org.eaxy.Attribute.class, org.eaxy.Xml.attr("name", "FullName")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|75", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|65", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("sequence", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|70", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|69", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|68", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|67", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|66", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("FirstName")).type("xs:string")).attr("minOccurs", "0")), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|74", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|73", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|72", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|71", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("LastName")).type("xs:string")))))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|80", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|79", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|78", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|77", org.eaxy.Namespace.class, org.eaxy.experimental.SampleXmlBuilderTest.XS).el("element")).name("FullName")).type("tns:FullName"))));
        org.eaxy.experimental.SampleXmlBuilder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|89", org.eaxy.experimental.SampleXmlBuilder.class, new org.eaxy.experimental.SampleXmlBuilder("msg", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|83", org.eaxy.Document.class, new org.eaxy.Document(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|82", org.eaxy.Element.class, rootSchema))), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<org.eaxy.Document>>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|88", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|85", org.eaxy.Document.class, new org.eaxy.Document(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|84", org.eaxy.Element.class, elementSchema))), eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Document>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|87", org.eaxy.Document.class, new org.eaxy.Document(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|86", org.eaxy.Element.class, nameSchema)))))));
        org.eaxy.Element msg = eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|91", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|90", org.eaxy.experimental.SampleXmlBuilder.class, builder).createRandomElement("Response"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|95", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Validator>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|93", org.eaxy.Validator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.experimental.SampleXmlBuilder>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|92", org.eaxy.experimental.SampleXmlBuilder.class, builder).getValidator()).validate(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.experimental.SampleXmlBuilderTest|shouldGenerateComplexTypeFromOtherSchema()|94", org.eaxy.Element.class, msg)));
    }
}

