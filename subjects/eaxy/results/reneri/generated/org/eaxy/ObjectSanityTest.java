package org.eaxy;


public class ObjectSanityTest {
    private final org.eaxy.Namespace NS = new org.eaxy.Namespace("http://foo.com", "a1");

    private final org.eaxy.Namespace NS_OTHER_PREFIX = new org.eaxy.Namespace("http://foo.com", "a2");

    private final org.eaxy.Namespace OTHER_NS = new org.eaxy.Namespace("uri:somethingElse", "a2");

    @org.junit.Test
    public void elementsShouldHaveDecentToString() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|elementsShouldHaveDecentToString()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Element>observeState("org.eaxy.ObjectSanityTest|elementsShouldHaveDecentToString()|1", org.eaxy.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|elementsShouldHaveDecentToString()|0", org.eaxy.Namespace.class, NS).el("tag-name")).toString())).contains("tag-name").contains(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|elementsShouldHaveDecentToString()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|elementsShouldHaveDecentToString()|3", org.eaxy.Namespace.class, NS).prefix()));
    }

    @org.junit.Test
    public void namespaceShouldHaveDecentToString() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|namespaceShouldHaveDecentToString()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|namespaceShouldHaveDecentToString()|0", org.eaxy.Namespace.class, NS).toString())).contains(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|namespaceShouldHaveDecentToString()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|namespaceShouldHaveDecentToString()|2", org.eaxy.Namespace.class, NS).getPrefix())).contains(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|namespaceShouldHaveDecentToString()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|namespaceShouldHaveDecentToString()|4", org.eaxy.Namespace.class, NS).getUri()));
    }

    @org.junit.Test
    public void attributesShouldHaveDecentToString() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveDecentToString()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveDecentToString()|1", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveDecentToString()|0", org.eaxy.Namespace.class, NS).attr("attr-name", "the value")).toString())).contains("attr-name").contains(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveDecentToString()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveDecentToString()|3", org.eaxy.Namespace.class, NS).getUri())).contains("the value");
    }

    @org.junit.Test
    public void qualifiedNamesShouldEqualWhenNamespaceAndNameEquals() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|14", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|13", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|11", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|8", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|5", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.QualifiedName>>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|2", org.assertj.core.api.ObjectAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|1", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|0", org.eaxy.Namespace.class, NS), "foo")))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|4", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|3", org.eaxy.Namespace.class, NS), "foo")))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|7", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|6", org.eaxy.Namespace.class, NS_OTHER_PREFIX), "foo")))).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|10", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|9", org.eaxy.Namespace.class, OTHER_NS), "foo")))).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldEqualWhenNamespaceAndNameEquals()|12", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName("foo")))).isNotEqualTo(null));
    }

    @org.junit.Test
    public void qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|1", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|0", org.eaxy.Namespace.class, NS), "foo")).hashCode())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|4", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|3", org.eaxy.Namespace.class, NS), "foo")).hashCode())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|7", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|6", org.eaxy.Namespace.class, NS_OTHER_PREFIX), "foo")).hashCode())).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|10", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|9", org.eaxy.Namespace.class, OTHER_NS), "foo")).hashCode())).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNamesShouldHaveSameHashcodeWhenNamespaceAndNameEquals()|12", org.eaxy.QualifiedName.class, new org.eaxy.QualifiedName("foo")).hashCode()));
    }

    @org.junit.Test
    public void qualifiedNameShouldShowCanonicName() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|qualifiedNameShouldShowCanonicName()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNameShouldShowCanonicName()|1", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNameShouldShowCanonicName()|0", org.eaxy.Namespace.class, NS).name("test")).toString())).isEqualTo("\"http://foo.com\":test");
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|qualifiedNameShouldShowCanonicName()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.QualifiedName>observeState("org.eaxy.ObjectSanityTest|qualifiedNameShouldShowCanonicName()|4", org.eaxy.QualifiedName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|qualifiedNameShouldShowCanonicName()|3", org.eaxy.Namespace.class, org.eaxy.Namespace.NO_NAMESPACE).name("localName")).toString())).isEqualTo("localName");
    }

    @org.junit.Test
    public void attributesShouldMatchWhenNameAndValueMatches() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.Attribute>>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|18", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.Attribute>>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|17", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.Attribute>>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|14", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.Attribute>>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|11", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.Attribute>>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|8", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.Attribute>>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|5", org.assertj.core.api.ObjectAssert.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.assertj.core.api.ObjectAssert<org.eaxy.Attribute>>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|2", org.assertj.core.api.ObjectAssert.class, org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|1", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|0", org.eaxy.Namespace.class, NS).attr("href", "something")))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|4", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|3", org.eaxy.Namespace.class, NS).attr("href", "something")))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|7", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|6", org.eaxy.Namespace.class, NS_OTHER_PREFIX).attr("href", "something")))).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|10", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|9", org.eaxy.Namespace.class, OTHER_NS).attr("href", "something")))).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|13", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|12", org.eaxy.Namespace.class, NS).attr("src", "something")))).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|16", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldMatchWhenNameAndValueMatches()|15", org.eaxy.Namespace.class, NS).attr("href", "something else")))).isNotEqualTo(null));
    }

    @org.junit.Test
    public void attributesShouldHaveSameHashCodeWhenNameAndValueMatches() {
        org.assertj.core.api.Assertions.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|1", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|0", org.eaxy.Namespace.class, NS).attr("href", "something")).hashCode())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|4", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|3", org.eaxy.Namespace.class, NS).attr("href", "something")).hashCode())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|7", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|6", org.eaxy.Namespace.class, NS_OTHER_PREFIX).attr("href", "something")).hashCode())).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|10", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|9", org.eaxy.Namespace.class, OTHER_NS).attr("href", "something")).hashCode())).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|13", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|12", org.eaxy.Namespace.class, NS).attr("src", "something")).hashCode())).isNotEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Attribute>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|16", org.eaxy.Attribute.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.eaxy.Namespace>observeState("org.eaxy.ObjectSanityTest|attributesShouldHaveSameHashCodeWhenNameAndValueMatches()|15", org.eaxy.Namespace.class, NS).attr("href", "something else")).hashCode()));
    }
}

