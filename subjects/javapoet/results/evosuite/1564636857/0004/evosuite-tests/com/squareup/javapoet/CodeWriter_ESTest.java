/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 05:26:45 GMT 2019
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeWriter;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class CodeWriter_ESTest extends CodeWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      CodeWriter codeWriter0 = new CodeWriter(charArrayWriter0, "1_03Pu=Bu", linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fieldSpecs == null");
      HashMap<String, ClassName> hashMap0 = new HashMap<String, ClassName>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      CodeWriter codeWriter0 = new CodeWriter(mockPrintWriter0, "fieldSpecs == null", hashMap0, linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CodeWriter codeWriter0 = new CodeWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        codeWriter0.popPackage();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // package not set
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }
}
