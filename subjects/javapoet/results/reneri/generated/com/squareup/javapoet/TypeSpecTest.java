/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


@org.junit.runner.RunWith(org.junit.runners.JUnit4.class)
public final class TypeSpecTest {
    private final java.lang.String tacosPackage = "com.squareup.tacos";

    private static final java.lang.String donutsPackage = "com.squareup.donuts";

    @org.junit.Rule
    public final com.google.testing.compile.CompilationRule compilation = new com.google.testing.compile.CompilationRule();

    private javax.lang.model.element.TypeElement getElement(java.lang.Class<?> clazz) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.TypeSpecTest|getElement(java.lang.Class)|3", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.TypeSpecTest|getElement(java.lang.Class)|1", javax.lang.model.util.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.TypeSpecTest|getElement(java.lang.Class)|0", com.google.testing.compile.CompilationRule.class, compilation).getElements()).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|getElement(java.lang.Class)|2", clazz.getCanonicalName())));
    }

    @org.junit.Test
    public void basic() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|basic()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|basic()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|basic()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|basic()|8", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|basic()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|basic()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|basic()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|basic()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|basic()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|basic()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|basic()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).returns(java.lang.String.class)).addCode("return $S;\n", "taco")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|basic()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|basic()|12", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|basic()|11", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  @Override\n") + "  public final String toString() {\n") + "    return \"taco\";\n") + "  }\n") + "}\n")));
        org.junit.Assert.assertEquals(472949424, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|basic()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|basic()|14", com.squareup.javapoet.TypeSpec.class, taco).hashCode()));// update expected number if source changes

    }

    @org.junit.Test
    public void interestingTypes() throws java.lang.Exception {
        com.squareup.javapoet.TypeName listOfAny = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|2", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|1", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.lang.Object.class))));
        com.squareup.javapoet.TypeName listOfExtends = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|5", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|4", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.io.Serializable.class))));
        com.squareup.javapoet.TypeName listOfSuper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|8", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|7", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.supertypeOf(java.lang.String.class))));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|16", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|15", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|9", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|10", com.squareup.javapoet.TypeName.class, listOfAny), "extendsObject")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|12", com.squareup.javapoet.TypeName.class, listOfExtends), "extendsSerializable")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|14", com.squareup.javapoet.TypeName.class, listOfSuper), "superString")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|19", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|interestingTypes()|18", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interestingTypes()|17", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.io.Serializable;\n") + "import java.lang.String;\n") + "import java.util.List;\n") + "\n") + "class Taco {\n") + "  List<?> extendsObject;\n") + "\n") + "  List<? extends Serializable> extendsSerializable;\n") + "\n") + "  List<? super String> superString;\n") + "}\n")));
    }

    @org.junit.Test
    public void anonymousInnerClass() throws java.lang.Exception {
        com.squareup.javapoet.ClassName foo = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|0", tacosPackage), "Foo"));
        com.squareup.javapoet.ClassName bar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|2", tacosPackage), "Bar"));
        com.squareup.javapoet.ClassName thingThang = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|4", tacosPackage), "Thing", "Thang"));
        com.squareup.javapoet.TypeName thingThangOfFooBar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|9", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|6", com.squareup.javapoet.ClassName.class, thingThang), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|7", com.squareup.javapoet.ClassName.class, foo), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|8", com.squareup.javapoet.ClassName.class, bar)));
        com.squareup.javapoet.ClassName thung = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|11", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|10", tacosPackage), "Thung"));
        com.squareup.javapoet.ClassName simpleThung = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|13", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|12", tacosPackage), "SimpleThung"));
        com.squareup.javapoet.TypeName thungOfSuperBar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|17", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|14", com.squareup.javapoet.ClassName.class, thung), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|16", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.supertypeOf(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|15", com.squareup.javapoet.ClassName.class, bar)))));
        com.squareup.javapoet.TypeName thungOfSuperFoo = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|21", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|18", com.squareup.javapoet.ClassName.class, thung), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|20", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.supertypeOf(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|19", com.squareup.javapoet.ClassName.class, foo)))));
        com.squareup.javapoet.TypeName simpleThungOfBar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|24", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|22", com.squareup.javapoet.ClassName.class, simpleThung), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|23", com.squareup.javapoet.ClassName.class, bar)));
        com.squareup.javapoet.ParameterSpec thungParameter = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|29", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|28", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|26", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|25", com.squareup.javapoet.TypeName.class, thungOfSuperFoo), "thung")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|27", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).build());
        com.squareup.javapoet.TypeSpec aSimpleThung = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|44", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|43", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|34", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|32", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|31", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$N", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|30", com.squareup.javapoet.ParameterSpec.class, thungParameter))))).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|33", com.squareup.javapoet.TypeName.class, simpleThungOfBar))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|42", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|41", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|40", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|38", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|36", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|35", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("doSomething")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|37", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|39", com.squareup.javapoet.ClassName.class, bar), "bar")).addCode("/* code snippets */\n")).build()))).build());
        com.squareup.javapoet.TypeSpec aThingThang = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|60", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|59", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|47", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|45", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|46", com.squareup.javapoet.TypeName.class, thingThangOfFooBar))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|58", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|57", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|55", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|53", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|51", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|49", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|48", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("call")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|50", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|52", com.squareup.javapoet.TypeName.class, thungOfSuperBar))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|54", com.squareup.javapoet.ParameterSpec.class, thungParameter))).addCode("return $L;\n", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|56", com.squareup.javapoet.TypeSpec.class, aSimpleThung))).build()))).build());
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|72", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|71", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|61", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|70", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|69", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|67", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|63", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|62", com.squareup.javapoet.TypeName.class, thingThangOfFooBar), "NAME")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|64", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|65", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|66", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).initializer("$L", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|68", com.squareup.javapoet.TypeSpec.class, aThingThang))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|75", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|74", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousInnerClass()|73", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "\n") + "class Taco {\n") + "  static final Thing.Thang<Foo, Bar> NAME = new Thing.Thang<Foo, Bar>() {\n") + "    @Override\n") + "    public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n") + "      return new SimpleThung<Bar>(thung) {\n") + "        @Override\n") + "        public void doSomething(Bar bar) {\n") + "          /* code snippets */\n") + "        }\n") + "      };\n") + "    }\n") + "  };\n") + "}\n")));
    }

    @org.junit.Test
    public void annotatedParameters() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec service = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|35", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|34", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Foo")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|33", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|32", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|31", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|25", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|16", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addParameter(long.class, "id")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|9", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|8", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|5", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(java.lang.String.class, "one")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|6", tacosPackage), "Ping")))).build()))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|15", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|14", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|11", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(java.lang.String.class, "two")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|13", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|12", tacosPackage), "Ping")))).build()))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|24", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|23", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|17", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(java.lang.String.class, "three")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|22", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|21", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|20", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|19", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|18", tacosPackage), "Pong")))).addMember("value", "$S", "pong")).build()))).build()))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|30", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|29", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|26", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(java.lang.String.class, "four")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|28", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|27", tacosPackage), "Ping")))).build()))).addCode("/* code snippets */\n")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|38", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|37", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedParameters()|36", com.squareup.javapoet.TypeSpec.class, service))))).isEqualTo(("" + ((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "class Foo {\n") + "  public Foo(long id, @Ping String one, @Ping String two, @Pong(\"pong\") String three,\n") + "      @Ping String four) {\n") + "    /* code snippets */\n") + "  }\n") + "}\n")));
    }

    /**
     * We had a bug where annotations were preventing us from doing the right thing when resolving
     * imports. https://github.com/square/javapoet/issues/422
     */
    @org.junit.Test
    public void annotationsAndJavaLangTypes() throws java.lang.Exception {
        com.squareup.javapoet.ClassName freeRange = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("javax.annotation", "FreeRange"));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("EthicalTaco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|6", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.String.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|5", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|4", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|3", com.squareup.javapoet.ClassName.class, freeRange))).build()))), "meat")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|10", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsAndJavaLangTypes()|9", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "import javax.annotation.FreeRange;\n") + "\n") + "class EthicalTaco {\n") + "  @FreeRange String meat;\n") + "}\n")));
    }

    @org.junit.Test
    public void retrofitStyleInterface() throws java.lang.Exception {
        com.squareup.javapoet.ClassName observable = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|0", tacosPackage), "Observable"));
        com.squareup.javapoet.ClassName fooBar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|2", tacosPackage), "FooBar"));
        com.squareup.javapoet.ClassName thing = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|4", tacosPackage), "Thing"));
        com.squareup.javapoet.ClassName things = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|6", tacosPackage), "Things"));
        com.squareup.javapoet.ClassName map = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.util", "Map"));
        com.squareup.javapoet.ClassName string = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|9", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "String"));
        com.squareup.javapoet.ClassName headers = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|11", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|10", tacosPackage), "Headers"));
        com.squareup.javapoet.ClassName post = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|13", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|12", tacosPackage), "POST"));
        com.squareup.javapoet.ClassName body = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|15", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|14", tacosPackage), "Body"));
        com.squareup.javapoet.ClassName queryMap = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|17", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|16", tacosPackage), "QueryMap"));
        com.squareup.javapoet.ClassName header = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|19", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|18", tacosPackage), "Header"));
        com.squareup.javapoet.TypeSpec service = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|71", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|70", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|20", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Service")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|69", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|68", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|59", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|47", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|39", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|35", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|30", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|24", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|21", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("fooBar")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|22", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|23", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|29", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|28", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|27", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|26", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|25", com.squareup.javapoet.ClassName.class, headers))).addMember("value", "$S", "Accept: application/json")).addMember("value", "$S", "User-Agent: foobar")).build()))).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|34", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|33", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|32", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|31", com.squareup.javapoet.ClassName.class, post))).addMember("value", "$S", "/foo/bar")).build()))).returns(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|38", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|36", com.squareup.javapoet.ClassName.class, observable), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|37", com.squareup.javapoet.ClassName.class, fooBar))))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|46", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|45", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|43", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|42", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|40", com.squareup.javapoet.ClassName.class, things), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|41", com.squareup.javapoet.ClassName.class, thing))), "things")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|44", com.squareup.javapoet.ClassName.class, body))).build()))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|58", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|57", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|52", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|51", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|48", com.squareup.javapoet.ClassName.class, map), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|49", com.squareup.javapoet.ClassName.class, string), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|50", com.squareup.javapoet.ClassName.class, string))), "query")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|56", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|55", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|54", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|53", com.squareup.javapoet.ClassName.class, queryMap))).addMember("encodeValues", "false")).build()))).build()))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|67", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|66", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|61", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|60", com.squareup.javapoet.ClassName.class, string), "authorization")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|65", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|64", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|63", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|62", com.squareup.javapoet.ClassName.class, header))).addMember("value", "$S", "Authorization")).build()))).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|74", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|73", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|retrofitStyleInterface()|72", com.squareup.javapoet.TypeSpec.class, service))))).isEqualTo(("" + (((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "import java.util.Map;\n") + "\n") + "interface Service {\n") + "  @Headers({\n") + "      \"Accept: application/json\",\n") + "      \"User-Agent: foobar\"\n") + "  })\n") + "  @POST(\"/foo/bar\")\n") + "  Observable<FooBar> fooBar(@Body Things<Thing> things,\n") + "      @QueryMap(encodeValues = false) Map<String, String> query,\n") + "      @Header(\"Authorization\") String authorization);\n") + "}\n")));
    }

    @org.junit.Test
    public void annotatedField() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|14", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|12", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|11", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|3", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "thing", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|10", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|9", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|6", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedField()|4", tacosPackage), "JsonAdapter")))).addMember("value", "$T.class", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedField()|7", tacosPackage), "Foo")))).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|17", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedField()|16", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedField()|15", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  @JsonAdapter(Foo.class)\n") + "  private final String thing;\n") + "}\n")));
    }

    @org.junit.Test
    public void annotatedClass() throws java.lang.Exception {
        com.squareup.javapoet.ClassName someType = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedClass()|0", tacosPackage), "SomeType"));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|14", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Foo")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|10", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|9", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|8", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|7", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|5", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedClass()|3", tacosPackage), "Something")))).addMember("hi", "$T.$N", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|6", com.squareup.javapoet.ClassName.class, someType), "FIELD")).addMember("hey", "$L", 12)).addMember("hello", "$S", "goodbye")).build()))).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|12", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|17", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotatedClass()|16", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotatedClass()|15", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "@Something(\n") + "    hi = SomeType.FIELD,\n") + "    hey = 12,\n") + "    hello = \"goodbye\"\n") + ")\n") + "public class Foo {\n") + "}\n")));
    }

    @org.junit.Test
    public void addAnnotationDisallowsNull() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Foo")).addAnnotation(((com.squareup.javapoet.AnnotationSpec) (null))));
            org.junit.Assert.fail();
        } catch (java.lang.NullPointerException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.NullPointerException>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|2", java.lang.NullPointerException.class, expected))).hasMessageThat()).isEqualTo("annotationSpec == null");
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|5", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Foo")).addAnnotation(((com.squareup.javapoet.ClassName) (null))));
            org.junit.Assert.fail();
        } catch (java.lang.NullPointerException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|9", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|8", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.NullPointerException>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|7", java.lang.NullPointerException.class, expected))).hasMessageThat()).isEqualTo("type == null");
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|10", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Foo")).addAnnotation(((java.lang.Class<?>) (null))));
            org.junit.Assert.fail();
        } catch (java.lang.NullPointerException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|14", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|13", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.NullPointerException>observeState("com.squareup.javapoet.TypeSpecTest|addAnnotationDisallowsNull()|12", java.lang.NullPointerException.class, expected))).hasMessageThat()).isEqualTo("clazz == null");
        }
    }

    @org.junit.Test
    public void enumWithSubclassing() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec roshambo = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|33", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|32", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|28", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|23", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|20", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("Roshambo")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addEnumConstant("ROCK", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("")).addJavadoc("Avalanche!\n")).build()))).addEnumConstant("PAPER", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|16", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|15", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|7", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("$S", "flat")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|14", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|13", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|12", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|8", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|10", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(java.lang.String.class)).addCode("return $S;\n", "paper airplane!")).build()))).build()))).addEnumConstant("SCISSORS", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|19", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|18", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("$S", "peace sign")).build()))).addField(java.lang.String.class, "handPosition", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|21", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|22", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|27", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|26", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|25", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|24", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).addParameter(java.lang.String.class, "handPosition")).addCode("this.handPosition = handPosition;\n")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|31", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|30", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|29", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).addCode("this($S);\n", "fist")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|36", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|35", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithSubclassing()|34", com.squareup.javapoet.TypeSpec.class, roshambo))))).isEqualTo(("" + ((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "\n") + "public enum Roshambo {\n") + "  /**\n") + "   * Avalanche!\n") + "   */\n") + "  ROCK,\n") + "\n") + "  PAPER(\"flat\") {\n") + "    @Override\n") + "    public String toString() {\n") + "      return \"paper airplane!\";\n") + "    }\n") + "  },\n") + "\n") + "  SCISSORS(\"peace sign\");\n") + "\n") + "  private final String handPosition;\n") + "\n") + "  Roshambo(String handPosition) {\n") + "    this.handPosition = handPosition;\n") + "  }\n") + "\n") + "  Roshambo() {\n") + "    this(\"fist\");\n") + "  }\n") + "}\n")));
    }

    /**
     * https://github.com/square/javapoet/issues/193
     */
    @org.junit.Test
    public void enumsMayDefineAbstractMethods() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec roshambo = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|18", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("Tortilla")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addEnumConstant("CORN", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|8", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|4", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("fold")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|6", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).build()))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|16", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|15", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|12", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("fold")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|13", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|14", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|21", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|20", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumsMayDefineAbstractMethods()|19", com.squareup.javapoet.TypeSpec.class, roshambo))))).isEqualTo(("" + (((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "\n") + "public enum Tortilla {\n") + "  CORN {\n") + "    @Override\n") + "    public void fold() {\n") + "    }\n") + "  };\n") + "\n") + "  public abstract void fold();\n") + "}\n")));
    }

    @org.junit.Test
    public void enumConstantsRequired() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumConstantsRequired()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumConstantsRequired()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("Roshambo")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    @org.junit.Test
    public void onlyEnumsMayHaveEnumConstants() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|onlyEnumsMayHaveEnumConstants()|2", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|onlyEnumsMayHaveEnumConstants()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|onlyEnumsMayHaveEnumConstants()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Roshambo")).addEnumConstant("ROCK")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
    }

    @org.junit.Test
    public void enumWithMembersButNoConstructorCall() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec roshambo = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|12", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("Roshambo")).addEnumConstant("SPOCK", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|8", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|2", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(java.lang.String.class)).addCode("return $S;\n", "west side")).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|14", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithMembersButNoConstructorCall()|13", com.squareup.javapoet.TypeSpec.class, roshambo))))).isEqualTo(("" + (((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "\n") + "enum Roshambo {\n") + "  SPOCK {\n") + "    @Override\n") + "    public String toString() {\n") + "      return \"west side\";\n") + "    }\n") + "  }\n") + "}\n")));
    }

    /**
     * https://github.com/square/javapoet/issues/253
     */
    @org.junit.Test
    public void enumWithAnnotatedValues() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec roshambo = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("Roshambo")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addEnumConstant("ROCK", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("")).addAnnotation(java.lang.Deprecated.class)).build()))).addEnumConstant("PAPER")).addEnumConstant("SCISSORS")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|11", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumWithAnnotatedValues()|10", com.squareup.javapoet.TypeSpec.class, roshambo))))).isEqualTo(("" + ((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Deprecated;\n") + "\n") + "public enum Roshambo {\n") + "  @Deprecated\n") + "  ROCK,\n") + "\n") + "  PAPER,\n") + "\n") + "  SCISSORS\n") + "}\n")));
    }

    @org.junit.Test
    public void methodThrows() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|26", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|25", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|19", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|5", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|3", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("throwOne")).addException(java.io.IOException.class)).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|12", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|7", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("throwTwo")).addException(java.io.IOException.class)).addException(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|10", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|methodThrows()|9", tacosPackage), "SourCreamException")))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|18", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|17", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|16", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|14", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("abstractThrow")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|15", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).addException(java.io.IOException.class)).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|24", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|23", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|22", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|20", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("nativeThrow")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|21", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.NATIVE))).addException(java.io.IOException.class)).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|29", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|methodThrows()|28", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodThrows()|27", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.io.IOException;\n") + "\n") + "abstract class Taco {\n") + "  void throwOne() throws IOException {\n") + "  }\n") + "\n") + "  void throwTwo() throws IOException, SourCreamException {\n") + "  }\n") + "\n") + "  abstract void abstractThrow() throws IOException;\n") + "\n") + "  native void nativeThrow() throws IOException;\n") + "}\n")));
    }

    @org.junit.Test
    public void typeVariables() throws java.lang.Exception {
        com.squareup.javapoet.TypeVariableName t = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|0", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("T"));
        com.squareup.javapoet.TypeVariableName p = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|1", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("P", java.lang.Number.class));
        com.squareup.javapoet.ClassName location = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|typeVariables()|2", tacosPackage), "Location"));
        com.squareup.javapoet.TypeSpec typeSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|51", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|50", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|28", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|18", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|16", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|14", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|4", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Location")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|5", com.squareup.javapoet.TypeVariableName.class, t))).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|7", com.squareup.javapoet.TypeVariableName.class, p))).addSuperinterface(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|11", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|9", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Comparable.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|10", com.squareup.javapoet.TypeVariableName.class, p))))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|13", com.squareup.javapoet.TypeVariableName.class, t), "label")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|15", com.squareup.javapoet.TypeVariableName.class, p), "x")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|17", com.squareup.javapoet.TypeVariableName.class, p), "y")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|27", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|26", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|25", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|23", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|22", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|20", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|19", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("compareTo")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|21", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(int.class)).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|24", com.squareup.javapoet.TypeVariableName.class, p), "p")).addCode("return 0;\n")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|49", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|48", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|47", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|45", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|43", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|41", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|36", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|34", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|32", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|29", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("of")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|30", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|31", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|33", com.squareup.javapoet.TypeVariableName.class, t))).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|35", com.squareup.javapoet.TypeVariableName.class, p))).returns(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|40", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|37", com.squareup.javapoet.ClassName.class, location), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|38", com.squareup.javapoet.TypeVariableName.class, t), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|39", com.squareup.javapoet.TypeVariableName.class, p))))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|42", com.squareup.javapoet.TypeVariableName.class, t), "label")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|44", com.squareup.javapoet.TypeVariableName.class, p), "x")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|46", com.squareup.javapoet.TypeVariableName.class, p), "y")).addCode("throw new $T($S);\n", java.lang.UnsupportedOperationException.class, "TODO")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|54", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|typeVariables()|53", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariables()|52", com.squareup.javapoet.TypeSpec.class, typeSpec))))).isEqualTo(("" + (((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Comparable;\n") + "import java.lang.Number;\n") + "import java.lang.Override;\n") + "import java.lang.UnsupportedOperationException;\n") + "\n") + "class Location<T, P extends Number> implements Comparable<P> {\n") + "  T label;\n") + "\n") + "  P x;\n") + "\n") + "  P y;\n") + "\n") + "  @Override\n") + "  public int compareTo(P p) {\n") + "    return 0;\n") + "  }\n") + "\n") + "  public static <T, P extends Number> Location<T, P> of(T label, P x, P y) {\n") + "    throw new UnsupportedOperationException(\"TODO\");\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void typeVariableWithBounds() {
        com.squareup.javapoet.AnnotationSpec a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|2", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|1", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "A")))).build());
        com.squareup.javapoet.TypeVariableName p = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|3", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("P", java.lang.Number.class));
        com.squareup.javapoet.TypeVariableName q = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|6", com.squareup.javapoet.TypeVariableName.class, ((com.squareup.javapoet.TypeVariableName) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|4", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("Q", java.lang.Number.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|5", com.squareup.javapoet.AnnotationSpec.class, a)))));
        com.squareup.javapoet.TypeSpec typeSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|18", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|15", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|7", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Location")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|9", com.squareup.javapoet.TypeVariableName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|8", com.squareup.javapoet.TypeVariableName.class, p).withBounds(java.lang.Comparable.class)))).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|12", com.squareup.javapoet.TypeVariableName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|11", com.squareup.javapoet.TypeVariableName.class, q).withBounds(java.lang.Comparable.class)))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|14", com.squareup.javapoet.TypeVariableName.class, p), "x")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|16", com.squareup.javapoet.TypeVariableName.class, q), "y")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|21", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|20", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|typeVariableWithBounds()|19", com.squareup.javapoet.TypeSpec.class, typeSpec))))).isEqualTo(("" + ((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Comparable;\n") + "import java.lang.Number;\n") + "\n") + "class Location<P extends Number & Comparable, @A Q extends Number & Comparable> {\n") + "  P x;\n") + "\n") + "  @A Q y;\n") + "}\n")));
    }

    @org.junit.Test
    public void classImplementsExtends() throws java.lang.Exception {
        com.squareup.javapoet.ClassName taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|0", tacosPackage), "Taco"));
        com.squareup.javapoet.ClassName food = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "Food"));
        com.squareup.javapoet.TypeSpec typeSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|15", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|14", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|8", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.AbstractSet.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|7", com.squareup.javapoet.ClassName.class, food))))).addSuperinterface(java.io.Serializable.class)).addSuperinterface(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|13", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|11", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Comparable.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|12", com.squareup.javapoet.ClassName.class, taco))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|18", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|17", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsExtends()|16", com.squareup.javapoet.TypeSpec.class, typeSpec))))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "import java.io.Serializable;\n") + "import java.lang.Comparable;\n") + "import java.util.AbstractSet;\n") + "\n") + "abstract class Taco extends AbstractSet<Food> ") + "implements Serializable, Comparable<Taco> {\n") + "}\n")));
    }

    @org.junit.Test
    public void classImplementsNestedClass() throws java.lang.Exception {
        com.squareup.javapoet.ClassName outer = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|0", tacosPackage), "Outer"));
        com.squareup.javapoet.ClassName inner = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|3", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|2", com.squareup.javapoet.ClassName.class, outer).nestedClass("Inner"));
        com.squareup.javapoet.ClassName callable = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.concurrent.Callable.class));
        com.squareup.javapoet.TypeSpec typeSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|15", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|14", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|5", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Outer")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|8", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|6", com.squareup.javapoet.ClassName.class, callable), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|7", com.squareup.javapoet.ClassName.class, inner))))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|13", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|10", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Inner")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|11", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|18", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|17", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classImplementsNestedClass()|16", com.squareup.javapoet.TypeSpec.class, typeSpec))))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "import java.util.concurrent.Callable;\n") + "\n") + "class Outer extends Callable<Outer.Inner> {\n") + "  static class Inner {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void enumImplements() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec typeSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|3", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("Food")).addSuperinterface(java.io.Serializable.class)).addSuperinterface(java.lang.Cloneable.class)).addEnumConstant("LEAN_GROUND_BEEF")).addEnumConstant("SHREDDED_CHEESE")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|enumImplements()|7", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|enumImplements()|6", com.squareup.javapoet.TypeSpec.class, typeSpec))))).isEqualTo(("" + ((((((((("package com.squareup.tacos;\n" + "\n") + "import java.io.Serializable;\n") + "import java.lang.Cloneable;\n") + "\n") + "enum Food implements Serializable, Cloneable {\n") + "  LEAN_GROUND_BEEF,\n") + "\n") + "  SHREDDED_CHEESE\n") + "}\n")));
    }

    @org.junit.Test
    public void interfaceExtends() throws java.lang.Exception {
        com.squareup.javapoet.ClassName taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|0", tacosPackage), "Taco"));
        com.squareup.javapoet.TypeSpec typeSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|3", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Taco")).addSuperinterface(java.io.Serializable.class)).addSuperinterface(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|6", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Comparable.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|5", com.squareup.javapoet.ClassName.class, taco))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|10", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceExtends()|9", com.squareup.javapoet.TypeSpec.class, typeSpec))))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "import java.io.Serializable;\n") + "import java.lang.Comparable;\n") + "\n") + "interface Taco extends Serializable, Comparable<Taco> {\n") + "}\n")));
    }

    @org.junit.Test
    public void nestedClasses() throws java.lang.Exception {
        com.squareup.javapoet.ClassName taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|0", tacosPackage), "Combo", "Taco"));
        com.squareup.javapoet.ClassName topping = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|2", tacosPackage), "Combo", "Taco", "Topping"));
        com.squareup.javapoet.ClassName chips = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|4", tacosPackage), "Combo", "Chips"));
        com.squareup.javapoet.ClassName sauce = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|6", tacosPackage), "Combo", "Sauce"));
        com.squareup.javapoet.TypeSpec typeSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|54", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|53", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|43", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|32", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|8", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Combo")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|9", com.squareup.javapoet.ClassName.class, taco), "taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|11", com.squareup.javapoet.ClassName.class, chips), "chips")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|31", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|30", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|23", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|21", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|15", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|13", com.squareup.javapoet.ClassName.class, taco).simpleName()))).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|16", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|20", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|18", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|19", com.squareup.javapoet.ClassName.class, topping))), "toppings")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|22", com.squareup.javapoet.ClassName.class, sauce), "sauce")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|29", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|28", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|27", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|26", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|24", com.squareup.javapoet.ClassName.class, topping).simpleName()))).addEnumConstant("SHREDDED_CHEESE")).addEnumConstant("LEAN_GROUND_BEEF")).build()))).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|42", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|41", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|39", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|37", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|35", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|33", com.squareup.javapoet.ClassName.class, chips).simpleName()))).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|36", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|38", com.squareup.javapoet.ClassName.class, topping), "topping")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|40", com.squareup.javapoet.ClassName.class, sauce), "dippingSauce")).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|52", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|51", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|50", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|49", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|48", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|47", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|46", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|45", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|44", com.squareup.javapoet.ClassName.class, sauce).simpleName()))).addEnumConstant("SOUR_CREAM")).addEnumConstant("SALSA")).addEnumConstant("QUESO")).addEnumConstant("MILD")).addEnumConstant("FIRE")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|57", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nestedClasses()|56", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nestedClasses()|55", com.squareup.javapoet.TypeSpec.class, typeSpec))))).isEqualTo(("" + (((((((((((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.util.List;\n") + "\n") + "class Combo {\n") + "  Taco taco;\n") + "\n") + "  Chips chips;\n") + "\n") + "  static class Taco {\n") + "    List<Topping> toppings;\n") + "\n") + "    Sauce sauce;\n") + "\n") + "    enum Topping {\n") + "      SHREDDED_CHEESE,\n") + "\n") + "      LEAN_GROUND_BEEF\n") + "    }\n") + "  }\n") + "\n") + "  static class Chips {\n") + "    Taco.Topping topping;\n") + "\n") + "    Sauce dippingSauce;\n") + "  }\n") + "\n") + "  enum Sauce {\n") + "    SOUR_CREAM,\n") + "\n") + "    SALSA,\n") + "\n") + "    QUESO,\n") + "\n") + "    MILD,\n") + "\n") + "    FIRE\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void annotation() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec annotation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|11", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("MyAnnotation")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|9", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|3", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("test")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|5", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).defaultValue("$L", 0)).returns(int.class)).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotation()|13", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotation()|12", com.squareup.javapoet.TypeSpec.class, annotation))))).isEqualTo(("" + (((("package com.squareup.tacos;\n" + "\n") + "public @interface MyAnnotation {\n") + "  int test() default 0;\n") + "}\n")));
    }

    @org.junit.Test
    public void innerAnnotationInAnnotationDeclaration() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec bar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("Bar")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("value")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).defaultValue("@$T", java.lang.Deprecated.class)).returns(java.lang.Deprecated.class)).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|11", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|innerAnnotationInAnnotationDeclaration()|10", com.squareup.javapoet.TypeSpec.class, bar))))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Deprecated;\n") + "\n") + "@interface Bar {\n") + "  Deprecated value() default @Deprecated;\n") + "}\n")));
    }

    @org.junit.Test
    public void annotationWithFields() {
        com.squareup.javapoet.FieldSpec field = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|6", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|5", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|4", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|0", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(int.class, "FOO")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).initializer("$L", 101)).build());
        com.squareup.javapoet.TypeSpec anno = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|7", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("Anno")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|8", com.squareup.javapoet.FieldSpec.class, field))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|12", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationWithFields()|11", com.squareup.javapoet.TypeSpec.class, anno))))).isEqualTo(("" + (((("package com.squareup.tacos;\n" + "\n") + "@interface Anno {\n") + "  int FOO = 101;\n") + "}\n")));
    }

    @org.junit.Test
    public void classCannotHaveDefaultValueForMethod() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Tacos")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|6", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("test")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultValueForMethod()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).defaultValue("0")).returns(int.class)).build()))).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
    }

    @org.junit.Test
    public void classCannotHaveDefaultMethods() throws java.lang.Exception {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|12", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Tacos")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|10", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("test")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.DEFAULT))).returns(int.class)).addCode(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|8", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|7", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classCannotHaveDefaultMethods()|6", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("return 0")).build()))).build()))).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
    }

    @org.junit.Test
    public void interfaceStaticMethods() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec bar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|12", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Tacos")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|10", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("test")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).returns(int.class)).addCode(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|8", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|7", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|6", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("return 0")).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|14", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceStaticMethods()|13", com.squareup.javapoet.TypeSpec.class, bar))))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "interface Tacos {\n") + "  static int test() {\n") + "    return 0;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void interfaceDefaultMethods() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec bar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|12", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Tacos")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|10", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("test")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.DEFAULT))).returns(int.class)).addCode(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|8", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|7", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|6", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("return 0")).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|14", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceDefaultMethods()|13", com.squareup.javapoet.TypeSpec.class, bar))))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "interface Tacos {\n") + "  default int test() {\n") + "    return 0;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void referencedAndDeclaredSimpleNamesConflict() throws java.lang.Exception {
        com.squareup.javapoet.FieldSpec internalTop = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|3", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|2", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|0", tacosPackage), "Top")), "internalTop")).build());
        com.squareup.javapoet.FieldSpec internalBottom = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|7", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|6", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|4", tacosPackage), "Top", "Middle", "Bottom")), "internalBottom")).build());
        com.squareup.javapoet.FieldSpec externalTop = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|10", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|9", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(com.squareup.javapoet.TypeSpecTest.donutsPackage, "Top")), "externalTop")).build());
        com.squareup.javapoet.FieldSpec externalBottom = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|13", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|12", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|11", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(com.squareup.javapoet.TypeSpecTest.donutsPackage, "Bottom")), "externalBottom")).build());
        com.squareup.javapoet.TypeSpec top = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|45", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|44", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|22", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|20", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|18", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|16", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|14", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Top")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|15", com.squareup.javapoet.FieldSpec.class, internalTop))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|17", com.squareup.javapoet.FieldSpec.class, internalBottom))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|19", com.squareup.javapoet.FieldSpec.class, externalTop))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|21", com.squareup.javapoet.FieldSpec.class, externalBottom))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|43", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|42", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|31", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|29", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|27", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|25", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|23", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Middle")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|24", com.squareup.javapoet.FieldSpec.class, internalTop))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|26", com.squareup.javapoet.FieldSpec.class, internalBottom))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|28", com.squareup.javapoet.FieldSpec.class, externalTop))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|30", com.squareup.javapoet.FieldSpec.class, externalBottom))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|41", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|40", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|38", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|36", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|34", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|32", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Bottom")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|33", com.squareup.javapoet.FieldSpec.class, internalTop))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|35", com.squareup.javapoet.FieldSpec.class, internalBottom))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|37", com.squareup.javapoet.FieldSpec.class, externalTop))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|39", com.squareup.javapoet.FieldSpec.class, externalBottom))).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|48", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|47", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|referencedAndDeclaredSimpleNamesConflict()|46", com.squareup.javapoet.TypeSpec.class, top))))).isEqualTo(("" + (((((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import com.squareup.donuts.Bottom;\n") + "\n") + "class Top {\n") + "  Top internalTop;\n") + "\n") + "  Middle.Bottom internalBottom;\n") + "\n") + "  com.squareup.donuts.Top externalTop;\n") + "\n") + "  Bottom externalBottom;\n") + "\n") + "  class Middle {\n") + "    Top internalTop;\n") + "\n") + "    Bottom internalBottom;\n") + "\n") + "    com.squareup.donuts.Top externalTop;\n") + "\n") + "    com.squareup.donuts.Bottom externalBottom;\n") + "\n") + "    class Bottom {\n") + "      Top internalTop;\n") + "\n") + "      Bottom internalBottom;\n") + "\n") + "      com.squareup.donuts.Top externalTop;\n") + "\n") + "      com.squareup.donuts.Bottom externalBottom;\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void simpleNamesConflictInThisAndOtherPackage() throws java.lang.Exception {
        com.squareup.javapoet.FieldSpec internalOther = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|3", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|2", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|0", tacosPackage), "Other")), "internalOther")).build());
        com.squareup.javapoet.FieldSpec externalOther = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|6", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|5", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(com.squareup.javapoet.TypeSpecTest.donutsPackage, "Other")), "externalOther")).build());
        com.squareup.javapoet.TypeSpec gen = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|12", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|7", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Gen")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|8", com.squareup.javapoet.FieldSpec.class, internalOther))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|10", com.squareup.javapoet.FieldSpec.class, externalOther))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|14", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNamesConflictInThisAndOtherPackage()|13", com.squareup.javapoet.TypeSpec.class, gen))))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "class Gen {\n") + "  Other internalOther;\n") + "\n") + "  com.squareup.donuts.Other externalOther;\n") + "}\n")));
    }

    @org.junit.Test
    public void simpleNameConflictsWithTypeVariable() {
        com.squareup.javapoet.ClassName inPackage = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "InPackage"));
        com.squareup.javapoet.ClassName otherType = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.other", "OtherType"));
        com.squareup.javapoet.ClassName methodInPackage = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "MethodInPackage"));
        com.squareup.javapoet.ClassName methodOtherType = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.other", "MethodOtherType"));
        com.squareup.javapoet.TypeSpec gen = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|56", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|55", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|50", com.squareup.javapoet.TypeSpec.Builder.class, // https://github.com/square/javapoet/pull/657#discussion_r205514292
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|45", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|34", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|27", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|16", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|4", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Gen")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|5", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("InPackage")))).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|7", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("OtherType")))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|11", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|10", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|9", com.squareup.javapoet.ClassName.class, inPackage), "inPackage")).build()))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|15", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|14", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|13", com.squareup.javapoet.ClassName.class, otherType), "otherType")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|26", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|25", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|23", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|21", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|19", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|17", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("withTypeVariables")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|18", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("MethodInPackage")))).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|20", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("MethodOtherType")))).addStatement("$T inPackage = null", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|22", com.squareup.javapoet.ClassName.class, methodInPackage))).addStatement("$T otherType = null", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|24", com.squareup.javapoet.ClassName.class, methodOtherType))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|33", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|32", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|30", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|28", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("withoutTypeVariables")).addStatement("$T inPackage = null", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|29", com.squareup.javapoet.ClassName.class, methodInPackage))).addStatement("$T otherType = null", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|31", com.squareup.javapoet.ClassName.class, methodOtherType))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|44", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|43", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|41", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|39", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|37", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|35", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("againWithTypeVariables")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|36", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("MethodInPackage")))).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|38", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("MethodOtherType")))).addStatement("$T inPackage = null", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|40", com.squareup.javapoet.ClassName.class, methodInPackage))).addStatement("$T otherType = null", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|42", com.squareup.javapoet.ClassName.class, methodOtherType))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|49", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|48", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|46", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("masksEnclosingTypeVariable")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|47", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("InPackage")))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|54", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|53", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|51", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("hasSimpleNameThatWasPreviouslyMasked")).addStatement("$T inPackage = null", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|52", com.squareup.javapoet.ClassName.class, inPackage))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|59", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|58", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|simpleNameConflictsWithTypeVariable()|57", com.squareup.javapoet.TypeSpec.class, gen))))).isEqualTo(("" + (((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import com.other.MethodOtherType;\n") + "\n") + "class Gen<InPackage, OtherType> {\n") + "  com.squareup.tacos.InPackage inPackage;\n") + "\n") + "  com.other.OtherType otherType;\n") + "\n") + "  <MethodInPackage, MethodOtherType> void withTypeVariables() {\n") + "    com.squareup.tacos.MethodInPackage inPackage = null;\n") + "    com.other.MethodOtherType otherType = null;\n") + "  }\n") + "\n") + "  void withoutTypeVariables() {\n") + "    MethodInPackage inPackage = null;\n") + "    MethodOtherType otherType = null;\n") + "  }\n") + "\n") + "  <MethodInPackage, MethodOtherType> void againWithTypeVariables() {\n") + "    com.squareup.tacos.MethodInPackage inPackage = null;\n") + "    com.other.MethodOtherType otherType = null;\n") + "  }\n") + "\n") + "  <InPackage> void masksEnclosingTypeVariable() {\n") + "  }\n") + "\n") + "  void hasSimpleNameThatWasPreviouslyMasked() {\n") + "    com.squareup.tacos.InPackage inPackage = null;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void originatingElementsIncludesThoseOfNestedTypes() {
        javax.lang.model.element.Element outerElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|0", javax.lang.model.element.Element.class, org.mockito.Mockito.mock(javax.lang.model.element.Element.class));
        javax.lang.model.element.Element innerElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|1", javax.lang.model.element.Element.class, org.mockito.Mockito.mock(javax.lang.model.element.Element.class));
        com.squareup.javapoet.TypeSpec outer = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Outer")).addOriginatingElement(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|3", javax.lang.model.element.Element.class, outerElement))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|5", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Inner")).addOriginatingElement(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|6", javax.lang.model.element.Element.class, innerElement))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.Ordered>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|16", com.google.common.truth.Ordered.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IterableSubject>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|13", com.google.common.truth.IterableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.Element>>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|12", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|11", com.squareup.javapoet.TypeSpec.class, outer).originatingElements))).containsExactly(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|14", javax.lang.model.element.Element.class, outerElement), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.TypeSpecTest|originatingElementsIncludesThoseOfNestedTypes()|15", javax.lang.model.element.Element.class, innerElement)));
    }

    @org.junit.Test
    public void intersectionType() {
        com.squareup.javapoet.TypeVariableName typeVariable = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|0", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("T", java.util.Comparator.class, java.io.Serializable.class));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|8", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|2", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("getComparator")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|3", com.squareup.javapoet.TypeVariableName.class, typeVariable))).returns(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|5", com.squareup.javapoet.TypeVariableName.class, typeVariable))).addCode("return null;\n")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|intersectionType()|12", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|intersectionType()|11", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((((("package com.squareup.tacos;\n" + "\n") + "import java.io.Serializable;\n") + "import java.util.Comparator;\n") + "\n") + "class Taco {\n") + "  <T extends Comparator & Serializable> T getComparator() {\n") + "    return null;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void arrayType() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|arrayType()|2", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|arrayType()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|arrayType()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(int[].class, "ints")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|arrayType()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|arrayType()|4", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|arrayType()|3", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  int[] ints;\n") + "}\n")));
    }

    @org.junit.Test
    public void javadoc() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|14", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addJavadoc("A hard or soft tortilla, loosely folded and filled with whatever {@link \n")).addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n", java.util.Random.class)).addJavadoc(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|3", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("and some {@link $T} cheese.\n", java.lang.String.class)))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|7", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|6", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|5", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(boolean.class, "soft")).addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|12", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|9", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("refold")).addJavadoc(("Folds the back of this taco to reduce sauce leakage.\n" + ("\n" + "<p>For {@link $T#KOREAN}, the front may also be folded.\n")), java.util.Locale.class)).addParameter(java.util.Locale.class, "locale")).build()))).build());
        // Mentioning a type in Javadoc will not cause an import to be added (java.util.Random here),
        // but the short name will be used if it's already imported (java.util.Locale here).
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|17", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|javadoc()|16", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|javadoc()|15", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.util.Locale;\n") + "\n") + "/**\n") + " * A hard or soft tortilla, loosely folded and filled with whatever {@link \n") + " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n") + " * and some {@link java.lang.String} cheese.\n") + " */\n") + "class Taco {\n") + "  /**\n") + "   * True for a soft flour tortilla; false for a crunchy corn tortilla.\n") + "   */\n") + "  boolean soft;\n") + "\n") + "  /**\n") + "   * Folds the back of this taco to reduce sauce leakage.\n") + "   *\n") + "   * <p>For {@link Locale#KOREAN}, the front may also be folded.\n") + "   */\n") + "  void refold(Locale locale) {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void annotationsInAnnotations() throws java.lang.Exception {
        com.squareup.javapoet.ClassName beef = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|0", tacosPackage), "Beef"));
        com.squareup.javapoet.ClassName chicken = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|2", tacosPackage), "Chicken"));
        com.squareup.javapoet.ClassName option = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|4", tacosPackage), "Option"));
        com.squareup.javapoet.ClassName mealDeal = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|6", tacosPackage), "MealDeal"));
        com.squareup.javapoet.TypeSpec menu = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|28", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|27", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|8", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Menu")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|26", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|25", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|18", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|11", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|10", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|9", com.squareup.javapoet.ClassName.class, mealDeal))).addMember("price", "$L", 500)).addMember("options", "$L", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|17", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|16", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|14", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|13", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|12", com.squareup.javapoet.ClassName.class, option))).addMember("name", "$S", "taco")).addMember("meat", "$T.class", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|15", com.squareup.javapoet.ClassName.class, beef))).build()))).addMember("options", "$L", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|24", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|23", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|21", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|20", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|19", com.squareup.javapoet.ClassName.class, option))).addMember("name", "$S", "quesadilla")).addMember("meat", "$T.class", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|22", com.squareup.javapoet.ClassName.class, chicken))).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|31", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|30", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationsInAnnotations()|29", com.squareup.javapoet.TypeSpec.class, menu))))).isEqualTo(("" + (((((((((("package com.squareup.tacos;\n" + "\n") + "@MealDeal(\n") + "    price = 500,\n") + "    options = {\n") + "        @Option(name = \"taco\", meat = Beef.class),\n") + "        @Option(name = \"quesadilla\", meat = Chicken.class)\n") + "    }\n") + ")\n") + "class Menu {\n") + "}\n")));
    }

    @org.junit.Test
    public void varargs() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taqueria = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|7", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taqueria")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|5", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("prepare")).addParameter(int.class, "workers")).addParameter(java.lang.Runnable[].class, "jobs")).varargs()).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|varargs()|9", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|varargs()|8", com.squareup.javapoet.TypeSpec.class, taqueria))))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Runnable;\n") + "\n") + "class Taqueria {\n") + "  void prepare(int workers, Runnable... jobs) {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void codeBlocks() throws java.lang.Exception {
        com.squareup.javapoet.CodeBlock ifBlock = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|4", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|3", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).beginControlFlow("if (!a.equals(b))")).addStatement("return i")).endControlFlow()).build());
        com.squareup.javapoet.CodeBlock methodBody = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|14", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|13", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|12", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|11", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|9", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|8", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|7", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|6", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|5", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("$T size = $T.min(listA.size(), listB.size())", int.class, java.lang.Math.class)).beginControlFlow("for ($T i = 0; i < size; i++)", int.class)).addStatement("$T $N = $N.get(i)", java.lang.String.class, "a", "listA")).addStatement("$T $N = $N.get(i)", java.lang.String.class, "b", "listB")).add("$L", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|10", com.squareup.javapoet.CodeBlock.class, ifBlock))).endControlFlow()).addStatement("return size")).build());
        com.squareup.javapoet.CodeBlock fieldBlock = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|24", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|23", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|22", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|21", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|20", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|19", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|18", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|17", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|16", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|15", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$>$>")).add("\n$T.<$T, $T>builder()$>$>", com.google.common.collect.ImmutableMap.class, java.lang.String.class, java.lang.String.class)).add("\n.add($S, $S)", '\'', "&#39;")).add("\n.add($S, $S)", '&', "&amp;")).add("\n.add($S, $S)", '<', "&lt;")).add("\n.add($S, $S)", '>', "&gt;")).add("\n.build()$<$<")).add("$<$<")).build());
        com.squareup.javapoet.FieldSpec escapeHtml = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|33", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|32", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|30", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|26", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|25", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.Map.class, java.lang.String.class, java.lang.String.class)), "ESCAPE_HTML")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|27", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|28", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|29", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).initializer(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|31", com.squareup.javapoet.CodeBlock.class, fieldBlock))).build());
        com.squareup.javapoet.TypeSpec util = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|47", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|46", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|36", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|34", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Util")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|35", com.squareup.javapoet.FieldSpec.class, escapeHtml))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|45", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|44", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|42", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|40", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|38", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|37", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("commonPrefixLength")).returns(int.class)).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|39", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.List.class, java.lang.String.class)), "listA")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|41", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.List.class, java.lang.String.class)), "listB")).addCode(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|43", com.squareup.javapoet.CodeBlock.class, methodBody))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|50", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|codeBlocks()|49", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|codeBlocks()|48", com.squareup.javapoet.TypeSpec.class, util))))).isEqualTo(("" + (((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import com.google.common.collect.ImmutableMap;\n") + "import java.lang.Math;\n") + "import java.lang.String;\n") + "import java.util.List;\n") + "import java.util.Map;\n") + "\n") + "class Util {\n") + "  private static final Map<String, String> ESCAPE_HTML = \n") + "      ImmutableMap.<String, String>builder()\n") + "          .add(\"\'\", \"&#39;\")\n") + "          .add(\"&\", \"&amp;\")\n") + "          .add(\"<\", \"&lt;\")\n") + "          .add(\">\", \"&gt;\")\n") + "          .build();\n") + "\n") + "  int commonPrefixLength(List<String> listA, List<String> listB) {\n") + "    int size = Math.min(listA.size(), listB.size());\n") + "    for (int i = 0; i < size; i++) {\n") + "      String a = listA.get(i);\n") + "      String b = listB.get(i);\n") + "      if (!a.equals(b)) {\n") + "        return i;\n") + "      }\n") + "    }\n") + "    return size;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void indexedElseIf() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("choices")).beginControlFlow("if ($1L != null || $1L == $2L)", "taco", "otherTaco")).addStatement("$T.out.println($S)", java.lang.System.class, "only one taco? NOO!")).nextControlFlow("else if ($1L.$3L && $2L.$3L)", "taco", "otherTaco", "isSupreme()")).addStatement("$T.out.println($S)", java.lang.System.class, "taco heaven")).endControlFlow()).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|11", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|indexedElseIf()|10", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.System;\n") + "\n") + "class Taco {\n") + "  void choices() {\n") + "    if (taco != null || taco == otherTaco) {\n") + "      System.out.println(\"only one taco? NOO!\");\n") + "    } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n") + "      System.out.println(\"taco heaven\");\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void elseIf() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("choices")).beginControlFlow("if (5 < 4) ")).addStatement("$T.out.println($S)", java.lang.System.class, "wat")).nextControlFlow("else if (5 < 6)")).addStatement("$T.out.println($S)", java.lang.System.class, "hello")).endControlFlow()).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|elseIf()|11", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|elseIf()|10", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.System;\n") + "\n") + "class Taco {\n") + "  void choices() {\n") + "    if (5 < 4)  {\n") + "      System.out.println(\"wat\");\n") + "    } else if (5 < 6) {\n") + "      System.out.println(\"hello\");\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void doWhile() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|7", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|5", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("loopForever")).beginControlFlow("do")).addStatement("$T.out.println($S)", java.lang.System.class, "hello")).endControlFlow("while (5 < 6)")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|doWhile()|9", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|doWhile()|8", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.System;\n") + "\n") + "class Taco {\n") + "  void loopForever() {\n") + "    do {\n") + "      System.out.println(\"hello\");\n") + "    } while (5 < 6);\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void inlineIndent() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|3", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("inlineIndent")).addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n", java.lang.System.class, "hello")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|inlineIndent()|7", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|inlineIndent()|6", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.System;\n") + "\n") + "class Taco {\n") + "  void inlineIndent() {\n") + "    if (3 < 4) {\n") + "      System.out.println(\"hello\");\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void defaultModifiersForInterfaceMembers() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|21", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|20", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|14", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|7", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|6", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|5", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|1", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "SHELL")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).initializer("$S", "crunchy corn")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|13", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|12", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|9", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("fold")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|10", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|11", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|19", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|18", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|15", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Topping")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|16", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|17", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|24", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|23", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForInterfaceMembers()|22", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "interface Taco {\n") + "  String SHELL = \"crunchy corn\";\n") + "\n") + "  void fold();\n") + "\n") + "  class Topping {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void defaultModifiersForMemberInterfacesAndEnums() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|17", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|16", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|4", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|3", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Meat")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|6", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Tortilla")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|7", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|15", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|14", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|11", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("Topping")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|12", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addEnumConstant("SALSA")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|20", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|19", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|defaultModifiersForMemberInterfacesAndEnums()|18", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  static class Meat {\n") + "  }\n") + "\n") + "  interface Tortilla {\n") + "  }\n") + "\n") + "  enum Topping {\n") + "    SALSA\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void membersOrdering() throws java.lang.Exception {
        // Hand out names in reverse-alphabetical order to defend against unexpected sorting.
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|37", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|36", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|32", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|28", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|25", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|20", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|3", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Members")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|2", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Z")).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|4", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Y")).build()))).addField(java.lang.String.class, "X", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|7", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addField(java.lang.String.class, "W")).addField(java.lang.String.class, "V", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|10", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addField(java.lang.String.class, "U")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|16", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|15", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|13", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("T")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|14", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|19", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|18", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("S")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|24", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|23", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|21", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("R")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|22", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|27", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|26", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("Q")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|31", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|30", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|29", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).addParameter(int.class, "p")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|35", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|34", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|33", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).addParameter(long.class, "o")).build()))).build());
        // Static fields, instance fields, constructors, methods, classes.
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|40", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|membersOrdering()|39", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|membersOrdering()|38", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "class Members {\n") + "  static String X;\n") + "\n") + "  static String V;\n") + "\n") + "  String W;\n") + "\n") + "  String U;\n") + "\n") + "  Members(int p) {\n") + "  }\n") + "\n") + "  Members(long o) {\n") + "  }\n") + "\n") + "  static void T() {\n") + "  }\n") + "\n") + "  void S() {\n") + "  }\n") + "\n") + "  static void R() {\n") + "  }\n") + "\n") + "  void Q() {\n") + "  }\n") + "\n") + "  class Z {\n") + "  }\n") + "\n") + "  class Y {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void nativeMethods() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|23", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|22", com.squareup.javapoet.TypeSpec.Builder.class, // GWT JSNI
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|5", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("nativeInt")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.NATIVE))).returns(int.class)).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|21", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|20", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|12", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|7", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("alert")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|8", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|9", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|10", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.NATIVE))).addParameter(java.lang.String.class, "msg")).addCode(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|19", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|18", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|17", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|16", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|15", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|14", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|13", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add(" /*-{\n")).indent()).addStatement("$$wnd.alert(msg)")).unindent()).add("}-*/")).build()))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|26", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nativeMethods()|25", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nativeMethods()|24", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  native int nativeInt();\n") + "\n") + "  public static native void alert(String msg) /*-{\n") + "    $wnd.alert(msg);\n") + "  }-*/;\n") + "}\n")));
    }

    @org.junit.Test
    public void nullStringLiteral() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|3", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|2", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|1", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "NULL")).initializer("$S", ((java.lang.Object) (null)))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|7", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nullStringLiteral()|6", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  String NULL = null;\n") + "}\n")));
    }

    @org.junit.Test
    public void annotationToString() throws java.lang.Exception {
        com.squareup.javapoet.AnnotationSpec annotation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationToString()|2", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationToString()|1", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationToString()|0", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(java.lang.SuppressWarnings.class)).addMember("value", "$S", "unused")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotationToString()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationToString()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationToString()|3", com.squareup.javapoet.AnnotationSpec.class, annotation).toString()))).isEqualTo("@java.lang.SuppressWarnings(\"unused\")");
    }

    @org.junit.Test
    public void codeBlockToString() throws java.lang.Exception {
        com.squareup.javapoet.CodeBlock codeBlock = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockToString()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockToString()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockToString()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("$T $N = $S.substring(0, 3)", java.lang.String.class, "s", "taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockToString()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|codeBlockToString()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockToString()|3", com.squareup.javapoet.CodeBlock.class, codeBlock).toString()))).isEqualTo("java.lang.String s = \"taco\".substring(0, 3);\n");
    }

    @org.junit.Test
    public void codeBlockAddStatementOfCodeBlockToString() throws java.lang.Exception {
        com.squareup.javapoet.CodeBlock contents = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|0", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T $N = $S.substring(0, 3)", java.lang.String.class, "s", "taco"));
        com.squareup.javapoet.CodeBlock statement = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|4", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|3", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|2", com.squareup.javapoet.CodeBlock.class, contents))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|codeBlockAddStatementOfCodeBlockToString()|5", com.squareup.javapoet.CodeBlock.class, statement).toString()))).isEqualTo("java.lang.String s = \"taco\".substring(0, 3);\n");
    }

    @org.junit.Test
    public void fieldToString() throws java.lang.Exception {
        com.squareup.javapoet.FieldSpec field = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|fieldToString()|3", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|fieldToString()|2", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|fieldToString()|1", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "s", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|fieldToString()|0", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).initializer("$S.substring(0, 3)", "taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|fieldToString()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|fieldToString()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|fieldToString()|4", com.squareup.javapoet.FieldSpec.class, field).toString()))).isEqualTo("final java.lang.String s = \"taco\".substring(0, 3);\n");
    }

    @org.junit.Test
    public void methodToString() throws java.lang.Exception {
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|6", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|1", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(java.lang.String.class)).addStatement("return $S", "taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|methodToString()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|methodToString()|7", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo(("" + ((("@java.lang.Override\n" + "public java.lang.String toString() {\n") + "  return \"taco\";\n") + "}\n")));
    }

    @org.junit.Test
    public void constructorToString() throws java.lang.Exception {
        com.squareup.javapoet.MethodSpec constructor = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|constructorToString()|3", tacosPackage), "Taco")), "taco")).addStatement("this.$N = $N", "taco", "taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|constructorToString()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|constructorToString()|8", com.squareup.javapoet.MethodSpec.class, constructor).toString()))).isEqualTo(("" + (("public Constructor(com.squareup.tacos.Taco taco) {\n" + "  this.taco = taco;\n") + "}\n")));
    }

    @org.junit.Test
    public void parameterToString() throws java.lang.Exception {
        com.squareup.javapoet.ParameterSpec parameter = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|7", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|6", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|4", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|2", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|parameterToString()|0", tacosPackage), "Taco")), "taco")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("javax.annotation", "Nullable")))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|parameterToString()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|parameterToString()|8", com.squareup.javapoet.ParameterSpec.class, parameter).toString()))).isEqualTo("@javax.annotation.Nullable final com.squareup.tacos.Taco taco");
    }

    @org.junit.Test
    public void classToString() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classToString()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classToString()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|classToString()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classToString()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classToString()|2", com.squareup.javapoet.TypeSpec.class, type).toString()))).isEqualTo(("" + ("class Taco {\n" + "}\n")));
    }

    @org.junit.Test
    public void anonymousClassToString() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("")).addSuperinterface(java.lang.Runnable.class)).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|6", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|2", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("run")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|anonymousClassToString()|9", com.squareup.javapoet.TypeSpec.class, type).toString()))).isEqualTo(("" + (((("new java.lang.Runnable() {\n" + "  @java.lang.Override\n") + "  public void run() {\n") + "  }\n") + "}")));
    }

    @org.junit.Test
    public void interfaceClassToString() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceClassToString()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|interfaceClassToString()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|interfaceClassToString()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|interfaceClassToString()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|interfaceClassToString()|2", com.squareup.javapoet.TypeSpec.class, type).toString()))).isEqualTo(("" + ("interface Taco {\n" + "}\n")));
    }

    @org.junit.Test
    public void annotationDeclarationToString() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationDeclarationToString()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|annotationDeclarationToString()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("Taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|annotationDeclarationToString()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|annotationDeclarationToString()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|annotationDeclarationToString()|2", com.squareup.javapoet.TypeSpec.class, type).toString()))).isEqualTo(("" + ("@interface Taco {\n" + "}\n")));
    }

    private java.lang.String toString(com.squareup.javapoet.TypeSpec typeSpec) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|toString(com.squareup.javapoet.TypeSpec)|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.TypeSpecTest|toString(com.squareup.javapoet.TypeSpec)|3", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.TypeSpecTest|toString(com.squareup.javapoet.TypeSpec)|2", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|toString(com.squareup.javapoet.TypeSpec)|0", tacosPackage), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|toString(com.squareup.javapoet.TypeSpec)|1", com.squareup.javapoet.TypeSpec.class, typeSpec))).build()).toString());
    }

    @org.junit.Test
    public void multilineStatement() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(java.lang.String.class)).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S", "Taco(", "beef,", "lettuce,", "cheese", ")")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multilineStatement()|11", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatement()|10", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  @Override\n") + "  public String toString() {\n") + "    return \"Taco(\"\n") + "        + \"beef,\"\n") + "        + \"lettuce,\"\n") + "        + \"cheese\"\n") + "        + \")\";\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void multilineStatementWithAnonymousClass() throws java.lang.Exception {
        com.squareup.javapoet.TypeName stringComparator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|0", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.Comparator.class, java.lang.String.class));
        com.squareup.javapoet.TypeName listOfString = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|1", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.List.class, java.lang.String.class));
        com.squareup.javapoet.TypeSpec prefixComparator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|15", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|14", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.anonymousClassBuilder("")).addSuperinterface(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|3", com.squareup.javapoet.TypeName.class, stringComparator))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|13", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|12", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|5", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("compare")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|7", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(int.class)).addParameter(java.lang.String.class, "a")).addParameter(java.lang.String.class, "b")).addStatement(("return a.substring(0, length)\n" + ".compareTo(b.substring(0, length))"))).build()))).build());
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|35", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|34", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|25", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|16", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|24", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|23", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|21", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|19", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|17", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("comparePrefix")).returns(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|18", com.squareup.javapoet.TypeName.class, stringComparator))).addParameter(int.class, "length", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|20", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addStatement("return $L", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|22", com.squareup.javapoet.TypeSpec.class, prefixComparator))).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|33", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|32", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|30", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|28", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|26", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("sortPrefix")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|27", com.squareup.javapoet.TypeName.class, listOfString), "list")).addParameter(int.class, "length", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|29", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addStatement("$T.sort(\nlist,\n$L)", java.util.Collections.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|31", com.squareup.javapoet.TypeSpec.class, prefixComparator))).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|38", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|37", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStatementWithAnonymousClass()|36", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "import java.util.Collections;\n") + "import java.util.Comparator;\n") + "import java.util.List;\n") + "\n") + "class Taco {\n") + "  Comparator<String> comparePrefix(final int length) {\n") + "    return new Comparator<String>() {\n") + "      @Override\n") + "      public int compare(String a, String b) {\n") + "        return a.substring(0, length)\n") + "            .compareTo(b.substring(0, length));\n") + "      }\n") + "    };\n") + "  }\n") + "\n") + "  void sortPrefix(List<String> list, final int length) {\n") + "    Collections.sort(\n") + "        list,\n") + "        new Comparator<String>() {\n") + "          @Override\n") + "          public int compare(String a, String b) {\n") + "            return a.substring(0, length)\n") + "                .compareTo(b.substring(0, length));\n") + "          }\n") + "        });\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void multilineStrings() throws java.lang.Exception {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|3", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|2", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|1", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "toppings")).initializer("$S", "shell\nbeef\nlettuce\ncheese\n")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multilineStrings()|7", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multilineStrings()|6", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  String toppings = \"shell\\n\"\n") + "      + \"beef\\n\"\n") + "      + \"lettuce\\n\"\n") + "      + \"cheese\\n\";\n") + "}\n")));
    }

    @org.junit.Test
    public void doubleFieldInitialization() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|3", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|2", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|1", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|0", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "listA")).initializer("foo")).initializer("bar")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|13", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|12", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|8", com.squareup.javapoet.FieldSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|4", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "listA")).initializer(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|7", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|6", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|5", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("foo")).build()))).initializer(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|11", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|10", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|doubleFieldInitialization()|9", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("bar")).build()))).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
    }

    @org.junit.Test
    public void nullAnnotationsAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullAnnotationsAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullAnnotationsAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addAnnotations(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullAnnotationsAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullAnnotationsAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullAnnotationsAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("annotationSpecs == null");
        }
    }

    @org.junit.Test
    public void multipleAnnotationAddition() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addAnnotations(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.AnnotationSpec>>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|6", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|3", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|2", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|1", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(java.lang.SuppressWarnings.class)).addMember("value", "$S", "unchecked")).build()), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|5", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|4", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(java.lang.Deprecated.class)).build()))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|10", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleAnnotationAddition()|9", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Deprecated;\n") + "import java.lang.SuppressWarnings;\n") + "\n") + "@SuppressWarnings(\"unchecked\")\n") + "@Deprecated\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void nullFieldsAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullFieldsAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullFieldsAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addFields(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullFieldsAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullFieldsAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullFieldsAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("fieldSpecs == null");
        }
    }

    @org.junit.Test
    public void multipleFieldAddition() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addFields(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.FieldSpec>>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|8", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|4", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|3", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(int.class, "ANSWER", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).build()), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|7", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|6", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.math.BigDecimal.class, "price", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|5", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE))).build()))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|12", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleFieldAddition()|11", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "import java.math.BigDecimal;\n") + "\n") + "class Taco {\n") + "  static final int ANSWER;\n") + "\n") + "  private BigDecimal price;\n") + "}\n")));
    }

    @org.junit.Test
    public void nullMethodsAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullMethodsAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullMethodsAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethods(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullMethodsAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullMethodsAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullMethodsAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("methodSpecs == null");
        }
    }

    @org.junit.Test
    public void multipleMethodAddition() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|17", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|16", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethods(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.MethodSpec>>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|15", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("getAnswer")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).returns(int.class)).addStatement("return $L", 42)).build()), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|14", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|13", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|12", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|8", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("getRandomQuantity")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|9", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(int.class)).addJavadoc("chosen by fair dice roll ;)")).addStatement("return $L", 4)).build()))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|20", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|19", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleMethodAddition()|18", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  public static int getAnswer() {\n") + "    return 42;\n") + "  }\n") + "\n") + "  /**\n") + "   * chosen by fair dice roll ;) */\n") + "  public int getRandomQuantity() {\n") + "    return 4;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void nullSuperinterfacesAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullSuperinterfacesAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullSuperinterfacesAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addSuperinterfaces(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullSuperinterfacesAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullSuperinterfacesAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullSuperinterfacesAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("superinterfaces == null");
        }
    }

    @org.junit.Test
    public void nullSingleSuperinterfaceAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullSingleSuperinterfaceAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullSingleSuperinterfaceAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addSuperinterface(((com.squareup.javapoet.TypeName) (null))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullSingleSuperinterfaceAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullSingleSuperinterfaceAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullSingleSuperinterfaceAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("superinterface == null");
        }
    }

    @org.junit.Test
    public void nullInSuperinterfaceIterableAddition() {
        java.util.List<com.squareup.javapoet.TypeName> superinterfaces = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|0", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|1", java.util.List.class, superinterfaces).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.List.class))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|4", java.util.List.class, superinterfaces).add(null));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|6", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addSuperinterfaces(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|7", java.util.List.class, superinterfaces)));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullInSuperinterfaceIterableAddition()|9", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("superinterface == null");
        }
    }

    @org.junit.Test
    public void multipleSuperinterfaceAddition() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addSuperinterfaces(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|3", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.io.Serializable.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.EventListener.class)))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|7", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleSuperinterfaceAddition()|6", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "import java.io.Serializable;\n") + "import java.util.EventListener;\n") + "\n") + "class Taco implements Serializable, EventListener {\n") + "}\n")));
    }

    @org.junit.Test
    public void nullModifiersAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullModifiersAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullModifiersAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addModifiers(((javax.lang.model.element.Modifier) (null))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullModifiersAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullModifiersAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullModifiersAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("modifiers contain null");
        }
    }

    @org.junit.Test
    public void nullTypeVariablesAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullTypeVariablesAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullTypeVariablesAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addTypeVariables(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullTypeVariablesAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullTypeVariablesAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullTypeVariablesAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("typeVariables == null");
        }
    }

    @org.junit.Test
    public void multipleTypeVariableAddition() {
        com.squareup.javapoet.TypeSpec location = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Location")).addTypeVariables(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeVariableName>>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|3", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|1", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("T")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|2", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("P", java.lang.Number.class)))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|7", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeVariableAddition()|6", com.squareup.javapoet.TypeSpec.class, location))))).isEqualTo(("" + ((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Number;\n") + "\n") + "class Location<T, P extends Number> {\n") + "}\n")));
    }

    @org.junit.Test
    public void nullTypesAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullTypesAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nullTypesAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addTypes(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nullTypesAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nullTypesAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nullTypesAddition()|2", java.lang.IllegalArgumentException.class, expected).getMessage()))).isEqualTo("typeSpecs == null");
        }
    }

    @org.junit.Test
    public void multipleTypeAddition() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|7", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addTypes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeSpec>>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|5", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|2", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Topping")).build()), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|4", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Sauce")).build()))))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|9", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|multipleTypeAddition()|8", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  class Topping {\n") + "  }\n") + "\n") + "  class Sauce {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void tryCatch() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|11", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|9", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("addTopping")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "Topping")), "topping")).beginControlFlow("try")).addCode("/* do something tricky with the topping */\n")).nextControlFlow("catch ($T e)", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "IllegalToppingException")))).endControlFlow()).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|tryCatch()|13", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|tryCatch()|12", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  void addTopping(Topping topping) {\n") + "    try {\n") + "      /* do something tricky with the topping */\n") + "    } catch (IllegalToppingException e) {\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void ifElse() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|13", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|11", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("isDelicious")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT), "count")).returns(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BOOLEAN))).beginControlFlow("if (count > 0)")).addStatement("return true")).nextControlFlow("else")).addStatement("return false")).endControlFlow()).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|16", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|ifElse()|15", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|ifElse()|14", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  boolean isDelicious(int count) {\n") + "    if (count > 0) {\n") + "      return true;\n") + "    } else {\n") + "      return false;\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void literalFromAnything() {
        java.lang.Object value = new java.lang.Object() {
            @java.lang.Override
            public java.lang.String toString() {
                return "foo";
            }
        };
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|literalFromAnything()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|literalFromAnything()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|literalFromAnything()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$L", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.TypeSpecTest|literalFromAnything()|1", java.lang.Object.class, value))).toString()))).isEqualTo("foo");
    }

    @org.junit.Test
    public void nameFromCharSequence() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nameFromCharSequence()|2", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nameFromCharSequence()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|nameFromCharSequence()|0", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$N", "text")).toString()))).isEqualTo("text");
    }

    @org.junit.Test
    public void nameFromField() {
        com.squareup.javapoet.FieldSpec field = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromField()|1", com.squareup.javapoet.FieldSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromField()|0", com.squareup.javapoet.FieldSpec.Builder.class, com.squareup.javapoet.FieldSpec.builder(java.lang.String.class, "field")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nameFromField()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nameFromField()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|nameFromField()|3", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$N", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.FieldSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromField()|2", com.squareup.javapoet.FieldSpec.class, field))).toString()))).isEqualTo("field");
    }

    @org.junit.Test
    public void nameFromParameter() {
        com.squareup.javapoet.ParameterSpec parameter = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromParameter()|1", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromParameter()|0", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(java.lang.String.class, "parameter")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nameFromParameter()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nameFromParameter()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|nameFromParameter()|3", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$N", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromParameter()|2", com.squareup.javapoet.ParameterSpec.class, parameter))).toString()))).isEqualTo("parameter");
    }

    @org.junit.Test
    public void nameFromMethod() {
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|4", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("method")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.ABSTRACT))).returns(java.lang.String.class)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|6", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$N", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromMethod()|5", com.squareup.javapoet.MethodSpec.class, method))).toString()))).isEqualTo("method");
    }

    @org.junit.Test
    public void nameFromType() {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromType()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromType()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Type")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nameFromType()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|nameFromType()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|nameFromType()|3", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$N", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|nameFromType()|2", com.squareup.javapoet.TypeSpec.class, type))).toString()))).isEqualTo("Type");
    }

    @org.junit.Test
    public void nameFromUnsupportedType() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromUnsupportedType()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|nameFromUnsupportedType()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$N", java.lang.String.class));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|nameFromUnsupportedType()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|nameFromUnsupportedType()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|nameFromUnsupportedType()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo(("expected name but was " + (java.lang.String.class)));
        }
    }

    @org.junit.Test
    public void stringFromAnything() {
        java.lang.Object value = new java.lang.Object() {
            @java.lang.Override
            public java.lang.String toString() {
                return "foo";
            }
        };
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|stringFromAnything()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|stringFromAnything()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|stringFromAnything()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$S", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.TypeSpecTest|stringFromAnything()|1", java.lang.Object.class, value))).toString()))).isEqualTo("\"foo\"");
    }

    @org.junit.Test
    public void stringFromNull() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|stringFromNull()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|stringFromNull()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|stringFromNull()|1", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$S", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object[]>observeState("com.squareup.javapoet.TypeSpecTest|stringFromNull()|0", java.lang.Object[].class, new java.lang.Object[]{ null }))).toString()))).isEqualTo("null");
    }

    @org.junit.Test
    public void typeFromTypeName() {
        com.squareup.javapoet.TypeName typeName = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeName()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeName()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|typeFromTypeName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeName()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeName()|1", com.squareup.javapoet.TypeName.class, typeName))).toString()))).isEqualTo("java.lang.String");
    }

    @org.junit.Test
    public void typeFromTypeMirror() {
        javax.lang.model.type.TypeMirror mirror = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeMirror()|1", javax.lang.model.type.TypeMirror.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeMirror()|0", javax.lang.model.element.TypeElement.class, getElement(java.lang.String.class)).asType());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeMirror()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|typeFromTypeMirror()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeMirror()|3", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeMirror()|2", javax.lang.model.type.TypeMirror.class, mirror))).toString()))).isEqualTo("java.lang.String");
    }

    @org.junit.Test
    public void typeFromTypeElement() {
        javax.lang.model.element.TypeElement element = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeElement()|0", javax.lang.model.element.TypeElement.class, getElement(java.lang.String.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeElement()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|typeFromTypeElement()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeElement()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.TypeSpecTest|typeFromTypeElement()|1", javax.lang.model.element.TypeElement.class, element))).toString()))).isEqualTo("java.lang.String");
    }

    @org.junit.Test
    public void typeFromReflectType() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeFromReflectType()|2", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|typeFromReflectType()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|typeFromReflectType()|0", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T", java.lang.String.class)).toString()))).isEqualTo("java.lang.String");
    }

    @org.junit.Test
    public void typeFromUnsupportedType() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeFromUnsupportedType()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|typeFromUnsupportedType()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$T", "java.lang.String"));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeFromUnsupportedType()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|typeFromUnsupportedType()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|typeFromUnsupportedType()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("expected type but was java.lang.String");
        }
    }

    @org.junit.Test
    public void tooFewArguments() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tooFewArguments()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|tooFewArguments()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$S"));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|tooFewArguments()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|tooFewArguments()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|tooFewArguments()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("index 1 for '$S' not in range (received 0 arguments)");
        }
    }

    @org.junit.Test
    public void unusedArgumentsRelative() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsRelative()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsRelative()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$L $L", "a", "b", "c"));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsRelative()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsRelative()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsRelative()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("unused arguments: expected 2, received 3");
        }
    }

    @org.junit.Test
    public void unusedArgumentsIndexed() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1L $2L", "a", "b", "c"));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("unused argument: $3");
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|6", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|5", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1L $1L $1L", "a", "b", "c"));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|9", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|8", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|7", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("unused arguments: $2, $3");
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|11", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|10", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$3L $1L $3L $1L $3L", "a", "b", "c", "d"));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|14", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|13", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.TypeSpecTest|unusedArgumentsIndexed()|12", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("unused arguments: $2, $4");
        }
    }

    @org.junit.Test
    public void superClassOnlyValidForClasses() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("A")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("E")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|6", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("I")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|superClassOnlyValidForClasses()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
    }

    @org.junit.Test
    public void invalidSuperClass() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("foo")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)))).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.Map.class))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|5", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("foo")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeSpecTest|invalidSuperClass()|6", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT)));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    @org.junit.Test
    public void staticCodeBlock() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|19", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|18", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(java.lang.String.class, "foo", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE))).addField(java.lang.String.class, "FOO", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|5", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addStaticBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|9", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|8", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|7", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("FOO = $S", "FOO")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|17", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|16", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|15", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|14", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|12", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|11", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|13", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(java.lang.String.class)).addCode("return FOO;\n")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|22", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|21", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|staticCodeBlock()|20", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  private static final String FOO;\n") + "\n") + "  static {\n") + "    FOO = \"FOO\";\n") + "  }\n") + "\n") + "  private String foo;\n") + "\n") + "  @Override\n") + "  public String toString() {\n") + "    return FOO;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void initializerBlockInRightPlace() {
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|26", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|25", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|21", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(java.lang.String.class, "foo", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE))).addField(java.lang.String.class, "FOO", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|5", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addStaticBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|9", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|8", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|7", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("FOO = $S", "FOO")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|12", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|11", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|20", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|19", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|18", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|17", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|15", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|14", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|16", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(java.lang.String.class)).addCode("return FOO;\n")).build()))).addInitializerBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|24", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|23", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|22", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("foo = $S", "FOO")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|29", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|28", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockInRightPlace()|27", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  private static final String FOO;\n") + "\n") + "  static {\n") + "    FOO = \"FOO\";\n") + "  }\n") + "\n") + "  private String foo;\n") + "\n") + "  {\n") + "    foo = \"FOO\";\n") + "  }\n") + "\n") + "  Taco() {\n") + "  }\n") + "\n") + "  @Override\n") + "  public String toString() {\n") + "    return FOO;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void initializersToBuilder() {
        // Tests if toBuilder() contains correct static and instance initializers
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|26", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|25", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|21", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(java.lang.String.class, "foo", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE))).addField(java.lang.String.class, "FOO", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|5", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL))).addStaticBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|9", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|8", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|7", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("FOO = $S", "FOO")).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|12", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|11", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|20", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|19", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|18", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|17", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|15", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|14", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("toString")).addAnnotation(java.lang.Override.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|16", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).returns(java.lang.String.class)).addCode("return FOO;\n")).build()))).addInitializerBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|24", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|23", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|22", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("foo = $S", "FOO")).build()))).build());
        com.squareup.javapoet.TypeSpec recreatedTaco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|29", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|28", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|27", com.squareup.javapoet.TypeSpec.class, taco).toBuilder()).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|32", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|31", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|30", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|34", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|33", com.squareup.javapoet.TypeSpec.class, recreatedTaco))));
        com.squareup.javapoet.TypeSpec initializersAdded = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|45", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|44", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|40", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|36", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|35", com.squareup.javapoet.TypeSpec.class, taco).toBuilder()).addInitializerBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|39", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|38", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|37", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("foo = $S", "instanceFoo")).build()))).addStaticBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|43", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|42", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|41", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("FOO = $S", "staticFoo")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|48", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|47", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|initializersToBuilder()|46", com.squareup.javapoet.TypeSpec.class, initializersAdded))))).isEqualTo(("" + ((((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Override;\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  private static final String FOO;\n") + "\n") + "  static {\n") + "    FOO = \"FOO\";\n") + "  }\n") + "  static {\n") + "    FOO = \"staticFoo\";\n") + "  }\n") + "\n") + "  private String foo;\n") + "\n") + "  {\n") + "    foo = \"FOO\";\n") + "  }\n") + "  {\n") + "    foo = \"instanceFoo\";\n") + "  }\n") + "\n") + "  Taco() {\n") + "  }\n") + "\n") + "  @Override\n") + "  public String toString() {\n") + "    return FOO;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void initializerBlockUnsupportedExceptionOnInterface() {
        com.squareup.javapoet.TypeSpec.Builder interfaceBuilder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnInterface()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("Taco"));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnInterface()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnInterface()|1", com.squareup.javapoet.TypeSpec.Builder.class, interfaceBuilder).addInitializerBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnInterface()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnInterface()|2", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).build())));
            org.junit.Assert.fail("Exception expected");
        } catch (java.lang.UnsupportedOperationException e) {
        }
    }

    @org.junit.Test
    public void initializerBlockUnsupportedExceptionOnAnnotation() {
        com.squareup.javapoet.TypeSpec.Builder annotationBuilder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnAnnotation()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("Taco"));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnAnnotation()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnAnnotation()|1", com.squareup.javapoet.TypeSpec.Builder.class, annotationBuilder).addInitializerBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnAnnotation()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.TypeSpecTest|initializerBlockUnsupportedExceptionOnAnnotation()|2", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).build())));
            org.junit.Assert.fail("Exception expected");
        } catch (java.lang.UnsupportedOperationException e) {
        }
    }

    @org.junit.Test
    public void lineWrapping() {
        com.squareup.javapoet.MethodSpec.Builder methodBuilder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("call"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|1", com.squareup.javapoet.MethodSpec.Builder.class, methodBuilder).addCode("$[call("));
        for (int i = 0; (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|lineWrapping()|3", i)) < 32; i++) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|4", com.squareup.javapoet.MethodSpec.Builder.class, methodBuilder).addParameter(java.lang.String.class, ("s" + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|lineWrapping()|5", i)))));
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|7", com.squareup.javapoet.MethodSpec.Builder.class, methodBuilder).addCode(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|lineWrapping()|9", ((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|lineWrapping()|8", i)) > 0 ? ",$W$S" : "$S")), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|lineWrapping()|10", i)));
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|13", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|12", com.squareup.javapoet.MethodSpec.Builder.class, methodBuilder).addCode(");$]\n"));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|18", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|14", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|16", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|15", com.squareup.javapoet.MethodSpec.Builder.class, methodBuilder).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|21", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|lineWrapping()|20", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|lineWrapping()|19", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((((((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.String;\n") + "\n") + "class Taco {\n") + "  void call(String s0, String s1, String s2, String s3, String s4, String s5, String s6, String s7,\n") + "      String s8, String s9, String s10, String s11, String s12, String s13, String s14, String s15,\n") + "      String s16, String s17, String s18, String s19, String s20, String s21, String s22,\n") + "      String s23, String s24, String s25, String s26, String s27, String s28, String s29,\n") + "      String s30, String s31) {\n") + "    call(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\",\n") + "        \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\");\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void lineWrappingWithZeroWidthSpace() {
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|5", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|1", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("call")).addCode("$[iAmSickOfWaitingInLine($Z")).addCode("it, has, been, far, too, long, of, a, wait, and, i, would, like, to, eat, ")).addCode("this, is, a, run, on, sentence")).addCode(");$]\n")).build());
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|6", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|7", com.squareup.javapoet.MethodSpec.class, method))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|11", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|lineWrappingWithZeroWidthSpace()|10", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  void call() {\n") + "    iAmSickOfWaitingInLine(\n") + "        it, has, been, far, too, long, of, a, wait, and, i, would, like, to, eat, this, is, a, run, on, sentence);\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void equalsAndHashCode() {
        com.squareup.javapoet.TypeSpec a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("taco")).build());
        com.squareup.javapoet.TypeSpec b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|3", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder("taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|7", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|4", com.squareup.javapoet.TypeSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|5", com.squareup.javapoet.TypeSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|10", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|8", com.squareup.javapoet.TypeSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|11", com.squareup.javapoet.TypeSpec.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|14", com.squareup.javapoet.TypeSpec.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|13", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|16", com.squareup.javapoet.TypeSpec.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|15", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|20", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|17", com.squareup.javapoet.TypeSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|18", com.squareup.javapoet.TypeSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|23", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|21", com.squareup.javapoet.TypeSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|24", com.squareup.javapoet.TypeSpec.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|28", com.squareup.javapoet.TypeSpec.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|27", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|26", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("taco")).addEnumConstant("SALSA")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|31", com.squareup.javapoet.TypeSpec.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|30", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|29", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder("taco")).addEnumConstant("SALSA")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|35", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|32", com.squareup.javapoet.TypeSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|33", com.squareup.javapoet.TypeSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|38", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|36", com.squareup.javapoet.TypeSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|40", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|39", com.squareup.javapoet.TypeSpec.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|42", com.squareup.javapoet.TypeSpec.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|41", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|44", com.squareup.javapoet.TypeSpec.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|43", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder("taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|48", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|47", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|45", com.squareup.javapoet.TypeSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|46", com.squareup.javapoet.TypeSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|51", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|50", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|49", com.squareup.javapoet.TypeSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|53", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|equalsAndHashCode()|52", com.squareup.javapoet.TypeSpec.class, b).hashCode()));
    }

    @org.junit.Test
    public void classNameFactories() {
        com.squareup.javapoet.ClassName className = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.example", "Example"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classNameFactories()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|3", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|1", com.squareup.javapoet.ClassName.class, className))).build()).name))).isEqualTo("Example");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classNameFactories()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|7", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.interfaceBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|6", com.squareup.javapoet.ClassName.class, className))).build()).name))).isEqualTo("Example");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|16", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classNameFactories()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|14", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|13", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|12", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.enumBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|11", com.squareup.javapoet.ClassName.class, className))).addEnumConstant("A")).build()).name))).isEqualTo("Example");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|21", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeSpecTest|classNameFactories()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|19", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|18", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.annotationBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeSpecTest|classNameFactories()|17", com.squareup.javapoet.ClassName.class, className))).build()).name))).isEqualTo("Example");
    }
}

