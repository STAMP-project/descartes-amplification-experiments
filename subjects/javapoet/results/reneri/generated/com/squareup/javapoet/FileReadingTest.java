/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


@org.junit.runner.RunWith(org.junit.runners.JUnit4.class)
public class FileReadingTest {
    // Used for storing compilation output.
    @org.junit.Rule
    public final org.junit.rules.TemporaryFolder temporaryFolder = new org.junit.rules.TemporaryFolder();

    @org.junit.Test
    public void javaFileObjectUri() {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|6", java.net.URI.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|5", javax.tools.JavaFileObject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|2", com.squareup.javapoet.TypeSpec.class, type))).build()).toJavaFileObject()).toUri())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|7", java.net.URI.class, java.net.URI.create("Test.java")));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|12", java.net.URI.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|11", javax.tools.JavaFileObject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|10", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|9", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|8", com.squareup.javapoet.TypeSpec.class, type))).build()).toJavaFileObject()).toUri())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|13", java.net.URI.class, java.net.URI.create("foo/Test.java")));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|18", java.net.URI.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|17", javax.tools.JavaFileObject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|16", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|15", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.example", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|14", com.squareup.javapoet.TypeSpec.class, type))).build()).toJavaFileObject()).toUri())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.net.URI>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectUri()|19", java.net.URI.class, java.net.URI.create("com/example/Test.java")));
    }

    @org.junit.Test
    public void javaFileObjectKind() {
        com.squareup.javapoet.JavaFile javaFile = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|3", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|2", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build()))).build());
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject.Kind>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|6", javax.tools.JavaFileObject.Kind.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|5", javax.tools.JavaFileObject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|4", com.squareup.javapoet.JavaFile.class, javaFile).toJavaFileObject()).getKind())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject.Kind>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectKind()|7", javax.tools.JavaFileObject.Kind.class, javax.tools.JavaFileObject.Kind.SOURCE));
    }

    @org.junit.Test
    public void javaFileObjectCharacterContent() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).addJavadoc("Pi\u00f1ata\u00a1")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|3", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|2", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("fooBar")).build()))).build());
        com.squareup.javapoet.JavaFile javaFile = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|8", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|7", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|6", com.squareup.javapoet.TypeSpec.class, type))).build());
        javax.tools.JavaFileObject javaFileObject = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|10", javax.tools.JavaFileObject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|9", com.squareup.javapoet.JavaFile.class, javaFile).toJavaFileObject());
        // We can never have encoding issues (everything is in process)
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|12", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|11", javax.tools.JavaFileObject.class, javaFileObject).getCharContent(true))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|13", com.squareup.javapoet.JavaFile.class, javaFile).toString()));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.CharSequence>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|16", java.lang.CharSequence.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|15", javax.tools.JavaFileObject.class, javaFileObject).getCharContent(false))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|18", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectCharacterContent()|17", com.squareup.javapoet.JavaFile.class, javaFile).toString()));
    }

    @org.junit.Test
    public void javaFileObjectInputStreamIsUtf8() throws java.io.IOException {
        com.squareup.javapoet.JavaFile javaFile = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|3", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|2", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build()))).addFileComment("Pi\u00f1ata\u00a1")).build());
        byte[] bytes = eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|8", byte[].class, com.google.common.io.ByteStreams.toByteArray(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.InputStream>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|7", java.io.InputStream.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|6", javax.tools.JavaFileObject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|5", com.squareup.javapoet.JavaFile.class, javaFile).toJavaFileObject()).openInputStream())));
        // JavaPoet always uses UTF-8.
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.PrimitiveByteArraySubject>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|10", com.google.common.truth.PrimitiveByteArraySubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|9", byte[].class, bytes))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|14", byte[].class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|11", com.squareup.javapoet.JavaFile.class, javaFile).toString()).getBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("com.squareup.javapoet.FileReadingTest|javaFileObjectInputStreamIsUtf8()|13", java.nio.charset.Charset.class, java.nio.charset.StandardCharsets.UTF_8))));
    }

    @org.junit.Test
    public void compileJavaFile() throws java.lang.Exception {
        final java.lang.String value = "Hello World!";
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|13", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addSuperinterface(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|3", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.concurrent.Callable.class, java.lang.String.class)))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|11", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|5", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("call")).returns(java.lang.String.class)).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|7", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC))).addStatement("return $S", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileReadingTest|compileJavaFile()|9", value))).build()))).build());
        com.squareup.javapoet.JavaFile javaFile = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|16", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|15", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|14", com.squareup.javapoet.TypeSpec.class, type))).build());
        javax.tools.JavaCompiler compiler = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaCompiler>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|17", javax.tools.JavaCompiler.class, javax.tools.ToolProvider.getSystemJavaCompiler());
        javax.tools.DiagnosticCollector<javax.tools.JavaFileObject> diagnosticCollector = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.DiagnosticCollector<javax.tools.JavaFileObject>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|18", javax.tools.DiagnosticCollector.class, new javax.tools.DiagnosticCollector<>());
        javax.tools.StandardJavaFileManager fileManager = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.StandardJavaFileManager>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|23", javax.tools.StandardJavaFileManager.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaCompiler>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|19", javax.tools.JavaCompiler.class, compiler).getStandardFileManager(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.DiagnosticCollector<javax.tools.JavaFileObject>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|20", javax.tools.DiagnosticCollector.class, diagnosticCollector), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Locale>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|21", java.util.Locale.class, java.util.Locale.getDefault()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|22", java.nio.charset.Charset.class, java.nio.charset.StandardCharsets.UTF_8)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.StandardJavaFileManager>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|24", javax.tools.StandardJavaFileManager.class, fileManager).setLocation(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.StandardLocation>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|25", javax.tools.StandardLocation.class, javax.tools.StandardLocation.CLASS_OUTPUT), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.io.File>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|28", java.util.Set.class, java.util.Collections.singleton(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|27", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|26", org.junit.rules.TemporaryFolder.class, temporaryFolder).newFolder()))));
        javax.tools.JavaCompiler.CompilationTask task = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaCompiler.CompilationTask>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|37", javax.tools.JavaCompiler.CompilationTask.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaCompiler>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|29", javax.tools.JavaCompiler.class, compiler).getTask(null, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.StandardJavaFileManager>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|30", javax.tools.StandardJavaFileManager.class, fileManager), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.DiagnosticCollector<javax.tools.JavaFileObject>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|31", javax.tools.DiagnosticCollector.class, diagnosticCollector), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|32", java.util.Set.class, java.util.Collections.emptySet()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|33", java.util.Set.class, java.util.Collections.emptySet()), eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<javax.tools.JavaFileObject>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|36", java.util.Set.class, java.util.Collections.singleton(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|35", javax.tools.JavaFileObject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|34", com.squareup.javapoet.JavaFile.class, javaFile).toJavaFileObject())))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|40", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileReadingTest|compileJavaFile()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaCompiler.CompilationTask>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|38", javax.tools.JavaCompiler.CompilationTask.class, task).call()))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IterableSubject>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|42", com.google.common.truth.IterableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.DiagnosticCollector<javax.tools.JavaFileObject>>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|41", javax.tools.DiagnosticCollector.class, diagnosticCollector).getDiagnostics())).isEmpty();
        java.lang.ClassLoader loader = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.ClassLoader>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|45", java.lang.ClassLoader.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.StandardJavaFileManager>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|43", javax.tools.StandardJavaFileManager.class, fileManager).getClassLoader(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.StandardLocation>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|44", javax.tools.StandardLocation.class, javax.tools.StandardLocation.CLASS_OUTPUT)));
        java.util.concurrent.Callable<?> test = java.lang.Class.forName("foo.Test", true, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.ClassLoader>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|46", java.lang.ClassLoader.class, loader)).asSubclass(java.util.concurrent.Callable.class).getDeclaredConstructor().newInstance();
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|48", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.FileReadingTest|compileJavaFile()|47", java.lang.reflect.Method.class, java.util.concurrent.Callable.class.getMethod("call")).invoke(test))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileReadingTest|compileJavaFile()|49", value));
    }
}

