/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public final class NameAllocatorTest {
    @org.junit.Test
    public void usage() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|usage()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo", 1)))).isEqualTo("foo");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|usage()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|4", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("bar", 2)))).isEqualTo("bar");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|usage()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|7", com.squareup.javapoet.NameAllocator.class, nameAllocator).get(1)))).isEqualTo("foo");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|usage()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|usage()|10", com.squareup.javapoet.NameAllocator.class, nameAllocator).get(2)))).isEqualTo("bar");
    }

    @org.junit.Test
    public void nameCollision() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollision()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollision()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollision()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollision()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo")))).isEqualTo("foo");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollision()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollision()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollision()|4", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo")))).isEqualTo("foo_");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollision()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollision()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollision()|7", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo")))).isEqualTo("foo__");
    }

    @org.junit.Test
    public void nameCollisionWithTag() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo", 1)))).isEqualTo("foo");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|4", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo", 2)))).isEqualTo("foo_");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|7", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo", 3)))).isEqualTo("foo__");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|10", com.squareup.javapoet.NameAllocator.class, nameAllocator).get(1)))).isEqualTo("foo");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|13", com.squareup.javapoet.NameAllocator.class, nameAllocator).get(2)))).isEqualTo("foo_");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|18", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|nameCollisionWithTag()|16", com.squareup.javapoet.NameAllocator.class, nameAllocator).get(3)))).isEqualTo("foo__");
    }

    @org.junit.Test
    public void characterMappingSubstitute() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingSubstitute()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingSubstitute()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|characterMappingSubstitute()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingSubstitute()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("a-b", 1)))).isEqualTo("a_b");
    }

    @org.junit.Test
    public void characterMappingSurrogate() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingSurrogate()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingSurrogate()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|characterMappingSurrogate()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingSurrogate()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("a\ud83c\udf7ab", 1)))).isEqualTo("a_b");
    }

    @org.junit.Test
    public void characterMappingInvalidStartButValidPart() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartButValidPart()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartButValidPart()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartButValidPart()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartButValidPart()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("1ab", 1)))).isEqualTo("_1ab");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartButValidPart()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartButValidPart()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartButValidPart()|4", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("a-1", 2)))).isEqualTo("a_1");
    }

    @org.junit.Test
    public void characterMappingInvalidStartIsInvalidPart() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartIsInvalidPart()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartIsInvalidPart()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartIsInvalidPart()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|characterMappingInvalidStartIsInvalidPart()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("&ab", 1)))).isEqualTo("_ab");
    }

    @org.junit.Test
    public void javaKeyword() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|javaKeyword()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|javaKeyword()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|javaKeyword()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|javaKeyword()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("public", 1)))).isEqualTo("public_");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|javaKeyword()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|javaKeyword()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|javaKeyword()|4", com.squareup.javapoet.NameAllocator.class, nameAllocator).get(1)))).isEqualTo("public_");
    }

    @org.junit.Test
    public void tagReuseForbidden() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("foo", 1));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|3", com.squareup.javapoet.NameAllocator.class, nameAllocator).newName("bar", 1));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|7", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|6", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.NameAllocatorTest|tagReuseForbidden()|5", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("tag 1 cannot be used for both 'foo' and 'bar'");
        }
    }

    @org.junit.Test
    public void useBeforeAllocateForbidden() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator nameAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|useBeforeAllocateForbidden()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|useBeforeAllocateForbidden()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|useBeforeAllocateForbidden()|1", com.squareup.javapoet.NameAllocator.class, nameAllocator).get(1));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|useBeforeAllocateForbidden()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.NameAllocatorTest|useBeforeAllocateForbidden()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.NameAllocatorTest|useBeforeAllocateForbidden()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("unknown tag: 1");
        }
    }

    @org.junit.Test
    public void cloneUsage() throws java.lang.Exception {
        com.squareup.javapoet.NameAllocator outterAllocator = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|0", com.squareup.javapoet.NameAllocator.class, new com.squareup.javapoet.NameAllocator());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|1", com.squareup.javapoet.NameAllocator.class, outterAllocator).newName("foo", 1));
        com.squareup.javapoet.NameAllocator innerAllocator1 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|4", com.squareup.javapoet.NameAllocator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|3", com.squareup.javapoet.NameAllocator.class, outterAllocator).clone());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|5", com.squareup.javapoet.NameAllocator.class, innerAllocator1).newName("bar", 2)))).isEqualTo("bar");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|8", com.squareup.javapoet.NameAllocator.class, innerAllocator1).newName("foo", 3)))).isEqualTo("foo_");
        com.squareup.javapoet.NameAllocator innerAllocator2 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|12", com.squareup.javapoet.NameAllocator.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|11", com.squareup.javapoet.NameAllocator.class, outterAllocator).clone());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|13", com.squareup.javapoet.NameAllocator.class, innerAllocator2).newName("foo", 2)))).isEqualTo("foo_");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|18", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.NameAllocator>observeState("com.squareup.javapoet.NameAllocatorTest|cloneUsage()|16", com.squareup.javapoet.NameAllocator.class, innerAllocator2).newName("bar", 3)))).isEqualTo("bar");
    }
}

