/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public final class MethodSpecTest {
    @org.junit.Rule
    public final com.google.testing.compile.CompilationRule compilation = new com.google.testing.compile.CompilationRule();

    private javax.lang.model.util.Elements elements;

    private javax.lang.model.util.Types types;

    @org.junit.Before
    public void setUp() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.MethodSpecTest|setUp()|1", javax.lang.model.util.Elements.class, (elements = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.MethodSpecTest|setUp()|0", com.google.testing.compile.CompilationRule.class, compilation).getElements()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.MethodSpecTest|setUp()|3", javax.lang.model.util.Types.class, (types = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.MethodSpecTest|setUp()|2", com.google.testing.compile.CompilationRule.class, compilation).getTypes()));
    }

    private javax.lang.model.element.TypeElement getElement(java.lang.Class<?> clazz) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|getElement(java.lang.Class)|2", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.MethodSpecTest|getElement(java.lang.Class)|0", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|getElement(java.lang.Class)|1", clazz.getCanonicalName())));
    }

    private javax.lang.model.element.ExecutableElement findFirst(java.util.Collection<javax.lang.model.element.ExecutableElement> elements, java.lang.String name) {
        for (javax.lang.model.element.ExecutableElement executableElement : eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|0", java.util.Collection.class, elements)) {
            if (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|5", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|3", eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Name>observeState("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|2", javax.lang.model.element.Name.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|1", javax.lang.model.element.ExecutableElement.class, executableElement).getSimpleName()).toString()).equals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|4", name)))) {
                return eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|6", javax.lang.model.element.ExecutableElement.class, executableElement);
            }
        }
        throw eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|9", java.lang.IllegalArgumentException.class, new java.lang.IllegalArgumentException((((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|7", name)) + " not found in ") + (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Collection<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|findFirst(java.util.Collection,java.lang.String)|8", java.util.Collection.class, elements)))));
    }

    @org.junit.Test
    public void nullAnnotationsAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullAnnotationsAddition()|1", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullAnnotationsAddition()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("doSomething")).addAnnotations(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullAnnotationsAddition()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullAnnotationsAddition()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|nullAnnotationsAddition()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("annotationSpecs == null");
        }
    }

    @org.junit.Test
    public void nullTypeVariablesAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullTypeVariablesAddition()|1", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullTypeVariablesAddition()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("doSomething")).addTypeVariables(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullTypeVariablesAddition()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullTypeVariablesAddition()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|nullTypeVariablesAddition()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("typeVariables == null");
        }
    }

    @org.junit.Test
    public void nullParametersAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullParametersAddition()|1", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullParametersAddition()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("doSomething")).addParameters(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullParametersAddition()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullParametersAddition()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|nullParametersAddition()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("parameterSpecs == null");
        }
    }

    @org.junit.Test
    public void nullExceptionsAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullExceptionsAddition()|1", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullExceptionsAddition()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("doSomething")).addExceptions(null));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullExceptionsAddition()|4", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullExceptionsAddition()|3", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|nullExceptionsAddition()|2", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("exceptions == null");
        }
    }

    @java.lang.annotation.Target(java.lang.annotation.ElementType.PARAMETER)
    @interface Nullable {}

    static abstract class Everything {
        @java.lang.Deprecated
        protected abstract <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable everything(@com.squareup.javapoet.MethodSpecTest.Nullable
        java.lang.String thing, java.util.List<? extends T> things) throws java.io.IOException, java.lang.SecurityException;
    }

    static abstract class Generics {
        <T, R, V extends java.lang.Throwable> T run(R param) throws V {
            return null;
        }
    }

    static abstract class HasAnnotation {
        @java.lang.Override
        public abstract java.lang.String toString();
    }

    interface Throws<R extends java.lang.RuntimeException> {
        void fail() throws R;
    }

    interface ExtendsOthers extends com.squareup.javapoet.MethodSpecTest.Throws<java.lang.IllegalStateException> , java.lang.Comparable<com.squareup.javapoet.MethodSpecTest.ExtendsOthers> , java.util.concurrent.Callable<java.lang.Integer> {}

    interface ExtendsIterableWithDefaultMethods extends java.lang.Iterable<java.lang.Object> {}

    final class FinalClass {
        void method() {
        }
    }

    static abstract class InvalidOverrideMethods {
        final void finalMethod() {
        }

        private void privateMethod() {
        }

        static void staticMethod() {
        }
    }

    @org.junit.Test
    public void overrideEverything() {
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.Everything.class));
        javax.lang.model.element.ExecutableElement methodElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|3", javax.lang.model.element.ExecutableElement.class, com.google.common.collect.Iterables.getOnlyElement(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|2", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|1", javax.lang.model.element.TypeElement.class, classElement).getEnclosedElements()))));
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|6", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|5", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|4", javax.lang.model.element.ExecutableElement.class, methodElement))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideEverything()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideEverything()|7", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo(("" + ((((("@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable ") + "everything(\n") + "    java.lang.String arg0, java.util.List<? extends T> arg1) throws java.io.IOException,\n") + "    java.lang.SecurityException {\n") + "}\n")));
    }

    @org.junit.Test
    public void overrideGenerics() {
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.Generics.class));
        javax.lang.model.element.ExecutableElement methodElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|3", javax.lang.model.element.ExecutableElement.class, com.google.common.collect.Iterables.getOnlyElement(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|2", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|1", javax.lang.model.element.TypeElement.class, classElement).getEnclosedElements()))));
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|5", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|4", javax.lang.model.element.ExecutableElement.class, methodElement))).addStatement("return null")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideGenerics()|8", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo(("" + ((("@java.lang.Override\n" + "<T, R, V extends java.lang.Throwable> T run(R param) throws V {\n") + "  return null;\n") + "}\n")));
    }

    @org.junit.Test
    public void overrideDoesNotCopyOverrideAnnotation() {
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.HasAnnotation.class));
        javax.lang.model.element.ExecutableElement exec = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|3", javax.lang.model.element.ExecutableElement.class, com.google.common.collect.Iterables.getOnlyElement(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|2", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|1", javax.lang.model.element.TypeElement.class, classElement).getEnclosedElements()))));
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|6", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|5", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|4", javax.lang.model.element.ExecutableElement.class, exec))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyOverrideAnnotation()|7", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo(("" + (("@java.lang.Override\n" + "public java.lang.String toString() {\n") + "}\n")));
    }

    @org.junit.Test
    public void overrideDoesNotCopyDefaultModifier() {
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.ExtendsIterableWithDefaultMethods.class));
        javax.lang.model.type.DeclaredType classType = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|2", javax.lang.model.type.DeclaredType.class, ((javax.lang.model.type.DeclaredType) (eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|1", javax.lang.model.element.TypeElement.class, classElement).asType())));
        java.util.List<javax.lang.model.element.ExecutableElement> methods = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|5", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|3", javax.lang.model.util.Elements.class, elements).getAllMembers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|4", javax.lang.model.element.TypeElement.class, classElement))));
        javax.lang.model.element.ExecutableElement exec = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|7", javax.lang.model.element.ExecutableElement.class, findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|6", java.util.List.class, methods), "spliterator"));
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|12", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|11", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|8", javax.lang.model.element.ExecutableElement.class, exec), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|9", javax.lang.model.type.DeclaredType.class, classType), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|10", javax.lang.model.util.Types.class, types))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideDoesNotCopyDefaultModifier()|13", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo(("" + (("@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n") + "}\n")));
    }

    @org.junit.Test
    public void overrideExtendsOthersWorksWithActualTypeParameters() {
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.ExtendsOthers.class));
        javax.lang.model.type.DeclaredType classType = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|2", javax.lang.model.type.DeclaredType.class, ((javax.lang.model.type.DeclaredType) (eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|1", javax.lang.model.element.TypeElement.class, classElement).asType())));
        java.util.List<javax.lang.model.element.ExecutableElement> methods = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|5", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|3", javax.lang.model.util.Elements.class, elements).getAllMembers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|4", javax.lang.model.element.TypeElement.class, classElement))));
        javax.lang.model.element.ExecutableElement exec = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|7", javax.lang.model.element.ExecutableElement.class, findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|6", java.util.List.class, methods), "call"));
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|12", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|11", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|8", javax.lang.model.element.ExecutableElement.class, exec), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|9", javax.lang.model.type.DeclaredType.class, classType), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|10", javax.lang.model.util.Types.class, types))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|13", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo(("" + (("@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n") + "}\n")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|17", javax.lang.model.element.ExecutableElement.class, (exec = findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|16", java.util.List.class, methods), "compareTo")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|22", com.squareup.javapoet.MethodSpec.class, (method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|21", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|18", javax.lang.model.element.ExecutableElement.class, exec), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|19", javax.lang.model.type.DeclaredType.class, classType), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|20", javax.lang.model.util.Types.class, types))).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|25", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|23", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo((((("" + ("@java.lang.Override\n" + "public int compareTo(")) + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|26", com.squareup.javapoet.MethodSpecTest.ExtendsOthers.class.getCanonicalName()))) + " arg0) {\n") + "}\n"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|28", javax.lang.model.element.ExecutableElement.class, (exec = findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|27", java.util.List.class, methods), "fail")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|33", com.squareup.javapoet.MethodSpec.class, (method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|32", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|29", javax.lang.model.element.ExecutableElement.class, exec), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|30", javax.lang.model.type.DeclaredType.class, classType), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|31", javax.lang.model.util.Types.class, types))).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|36", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|35", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|overrideExtendsOthersWorksWithActualTypeParameters()|34", com.squareup.javapoet.MethodSpec.class, method).toString()))).isEqualTo(("" + (("@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n") + "}\n")));
    }

    @org.junit.Test
    public void overrideFinalClassMethod() {
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.FinalClass.class));
        java.util.List<javax.lang.model.element.ExecutableElement> methods = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|3", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|1", javax.lang.model.util.Elements.class, elements).getAllMembers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|2", javax.lang.model.element.TypeElement.class, classElement))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|6", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|5", javax.lang.model.element.ExecutableElement.class, findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|4", java.util.List.class, methods), "method"))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|9", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|8", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|overrideFinalClassMethod()|7", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");
        }
    }

    @org.junit.Test
    public void overrideInvalidModifiers() {
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.InvalidOverrideMethods.class));
        java.util.List<javax.lang.model.element.ExecutableElement> methods = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|3", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|1", javax.lang.model.util.Elements.class, elements).getAllMembers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|2", javax.lang.model.element.TypeElement.class, classElement))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|6", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|5", javax.lang.model.element.ExecutableElement.class, findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|4", java.util.List.class, methods), "finalMethod"))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|9", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|8", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|7", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("cannot override method with modifiers: [final]");
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|12", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|11", javax.lang.model.element.ExecutableElement.class, findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|10", java.util.List.class, methods), "privateMethod"))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|15", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|14", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|13", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("cannot override method with modifiers: [private]");
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|18", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|17", javax.lang.model.element.ExecutableElement.class, findFirst(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|16", java.util.List.class, methods), "staticMethod"))));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|21", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|20", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.MethodSpecTest|overrideInvalidModifiers()|19", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("cannot override method with modifiers: [static]");
        }
    }

    @org.junit.Test
    public void equalsAndHashCode() {
        com.squareup.javapoet.MethodSpec a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|1", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).build());
        com.squareup.javapoet.MethodSpec b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|3", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|2", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|7", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|4", com.squareup.javapoet.MethodSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|5", com.squareup.javapoet.MethodSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|10", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|8", com.squareup.javapoet.MethodSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|11", com.squareup.javapoet.MethodSpec.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|14", com.squareup.javapoet.MethodSpec.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|13", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|16", com.squareup.javapoet.MethodSpec.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|15", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|20", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|17", com.squareup.javapoet.MethodSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|18", com.squareup.javapoet.MethodSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|23", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|21", com.squareup.javapoet.MethodSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|25", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|24", com.squareup.javapoet.MethodSpec.class, b).hashCode()));
        javax.lang.model.element.TypeElement classElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|26", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.MethodSpecTest.Everything.class));
        javax.lang.model.element.ExecutableElement methodElement = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|29", javax.lang.model.element.ExecutableElement.class, com.google.common.collect.Iterables.getOnlyElement(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.ExecutableElement>>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|28", java.util.List.class, javax.lang.model.util.ElementFilter.methodsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|27", javax.lang.model.element.TypeElement.class, classElement).getEnclosedElements()))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|32", com.squareup.javapoet.MethodSpec.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|31", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|30", javax.lang.model.element.ExecutableElement.class, methodElement))).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|35", com.squareup.javapoet.MethodSpec.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|34", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.overriding(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ExecutableElement>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|33", javax.lang.model.element.ExecutableElement.class, methodElement))).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|39", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|38", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|36", com.squareup.javapoet.MethodSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|37", com.squareup.javapoet.MethodSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|42", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|41", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|40", com.squareup.javapoet.MethodSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|44", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|equalsAndHashCode()|43", com.squareup.javapoet.MethodSpec.class, b).hashCode()));
    }

    @org.junit.Test
    public void withoutParameterJavaDoc() {
        com.squareup.javapoet.MethodSpec methodSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|6", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("getTaco")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PRIVATE))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.DOUBLE), "money")).addJavadoc("Gets the best Taco\n")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|withoutParameterJavaDoc()|7", com.squareup.javapoet.MethodSpec.class, methodSpec).toString()))).isEqualTo(("" + (((("/**\n" + " * Gets the best Taco\n") + " */\n") + "private void getTaco(double money) {\n") + "}\n")));
    }

    @org.junit.Test
    public void withParameterJavaDoc() {
        com.squareup.javapoet.MethodSpec methodSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|12", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|11", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("getTaco")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|4", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|3", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|2", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.DOUBLE), "money")).addJavadoc("the amount required to buy the taco.\n")).build()))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|9", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|8", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|7", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|6", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT), "count")).addJavadoc("the number of Tacos to buy.\n")).build()))).addJavadoc("Gets the best Taco money can buy.\n")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDoc()|13", com.squareup.javapoet.MethodSpec.class, methodSpec).toString()))).isEqualTo(("" + ((((((("/**\n" + " * Gets the best Taco money can buy.\n") + " *\n") + " * @param money the amount required to buy the taco.\n") + " * @param count the number of Tacos to buy.\n") + " */\n") + "void getTaco(double money, int count) {\n") + "}\n")));
    }

    @org.junit.Test
    public void withParameterJavaDocAndWithoutMethodJavadoc() {
        com.squareup.javapoet.MethodSpec methodSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|11", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("getTaco")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|4", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|3", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|2", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.DOUBLE), "money")).addJavadoc("the amount required to buy the taco.\n")).build()))).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|9", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|8", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|7", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|6", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT), "count")).addJavadoc("the number of Tacos to buy.\n")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|withParameterJavaDocAndWithoutMethodJavadoc()|12", com.squareup.javapoet.MethodSpec.class, methodSpec).toString()))).isEqualTo(("" + ((((("/**\n" + " * @param money the amount required to buy the taco.\n") + " * @param count the number of Tacos to buy.\n") + " */\n") + "void getTaco(double money, int count) {\n") + "}\n")));
    }

    @org.junit.Test
    public void duplicateExceptionsIgnored() {
        com.squareup.javapoet.ClassName ioException = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.io.IOException.class));
        com.squareup.javapoet.ClassName timeoutException = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.concurrent.TimeoutException.class));
        com.squareup.javapoet.MethodSpec methodSpec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|11", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|2", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("duplicateExceptions")).addException(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|3", com.squareup.javapoet.ClassName.class, ioException))).addException(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|5", com.squareup.javapoet.ClassName.class, timeoutException))).addException(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|7", com.squareup.javapoet.ClassName.class, timeoutException))).addException(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|9", com.squareup.javapoet.ClassName.class, ioException))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IterableSubject>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|14", com.google.common.truth.IterableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|12", com.squareup.javapoet.MethodSpec.class, methodSpec).exceptions))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.ClassName>>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|17", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|15", com.squareup.javapoet.ClassName.class, ioException), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|16", com.squareup.javapoet.ClassName.class, timeoutException))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IterableSubject>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|24", com.google.common.truth.IterableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|23", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|22", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|21", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|19", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|18", com.squareup.javapoet.MethodSpec.class, methodSpec).toBuilder()).addException(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|20", com.squareup.javapoet.ClassName.class, ioException))).build()).exceptions))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.ClassName>>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|27", java.util.List.class, java.util.Arrays.asList(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|25", com.squareup.javapoet.ClassName.class, ioException), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.MethodSpecTest|duplicateExceptionsIgnored()|26", com.squareup.javapoet.ClassName.class, timeoutException))));
    }

    @org.junit.Test
    public void nullIsNotAValidMethodName() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|nullIsNotAValidMethodName()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder(null));
            org.junit.Assert.fail("NullPointerException expected");
        } catch (java.lang.NullPointerException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|nullIsNotAValidMethodName()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|nullIsNotAValidMethodName()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.NullPointerException>observeState("com.squareup.javapoet.MethodSpecTest|nullIsNotAValidMethodName()|1", java.lang.NullPointerException.class, e).getMessage()))).isEqualTo("name == null");
        }
    }

    @org.junit.Test
    public void addModifiersVarargsShouldNotBeNull() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|addModifiersVarargsShouldNotBeNull()|1", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.MethodSpecTest|addModifiersVarargsShouldNotBeNull()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("taco")).addModifiers(((javax.lang.model.element.Modifier[]) (null))));
            org.junit.Assert.fail("NullPointerException expected");
        } catch (java.lang.NullPointerException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.MethodSpecTest|addModifiersVarargsShouldNotBeNull()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.MethodSpecTest|addModifiersVarargsShouldNotBeNull()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.NullPointerException>observeState("com.squareup.javapoet.MethodSpecTest|addModifiersVarargsShouldNotBeNull()|2", java.lang.NullPointerException.class, e).getMessage()))).isEqualTo("modifiers == null");
        }
    }
}

