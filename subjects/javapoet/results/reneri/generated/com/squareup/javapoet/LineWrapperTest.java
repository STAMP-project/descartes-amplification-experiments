/**
 * Copyright (C) 2016 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


@org.junit.runner.RunWith(org.junit.runners.JUnit4.class)
public final class LineWrapperTest {
    @org.junit.Test
    public void wrap() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghij");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|wrap()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrap()|7", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde\n    fghij");
    }

    @org.junit.Test
    public void noWrap() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghi");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|noWrap()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrap()|7", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde fghi");
    }

    @org.junit.Test
    public void zeroWidthNoWrap() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).zeroWidthSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghij");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|zeroWidthNoWrap()|7", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcdefghij");
    }

    @org.junit.Test
    public void nospaceWrapMax() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).zeroWidthSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghijk");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|nospaceWrapMax()|7", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde\n    fghijk");
    }

    @org.junit.Test
    public void multipleWrite() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("ab");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("cd");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("ef");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|8", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|9", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("gh");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|10", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|11", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("ij");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|12", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|13", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("kl");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|14", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|15", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("mn");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|16", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|17", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("op");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|18", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(1);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|19", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("qr");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|20", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|23", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|multipleWrite()|22", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|multipleWrite()|21", java.lang.StringBuffer.class, out).toString()))).isEqualTo("ab cd ef\n  gh ij kl\n  mn op qr");
    }

    @org.junit.Test
    public void fencepost() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghij");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("k");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("lmnop");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|8", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|fencepost()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|fencepost()|9", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcdefghij\n    klmnop");
    }

    @org.junit.Test
    public void fencepostZeroWidth() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghij");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).zeroWidthSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("k");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("lmnop");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|8", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|fencepostZeroWidth()|9", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcdefghij\n    klmnop");
    }

    @org.junit.Test
    public void overlyLongLinesWithoutLeadingSpace() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcdefghijkl");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithoutLeadingSpace()|5", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcdefghijkl");
    }

    @org.junit.Test
    public void overlyLongLinesWithLeadingSpace() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcdefghijkl");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingSpace()|6", java.lang.StringBuffer.class, out).toString()))).isEqualTo("\n    abcdefghijkl");
    }

    @org.junit.Test
    public void overlyLongLinesWithLeadingZeroWidth() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).zeroWidthSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcdefghijkl");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|overlyLongLinesWithLeadingZeroWidth()|6", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcdefghijkl");
    }

    @org.junit.Test
    public void noWrapEmbeddedNewlines() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghi\njklmn");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("opqrstuvwxy");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines()|8", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde fghi\njklmnopqrstuvwxy");
    }

    @org.junit.Test
    public void wrapEmbeddedNewlines() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghij\nklmn");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("opqrstuvwxy");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines()|8", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde\n    fghij\nklmnopqrstuvwxy");
    }

    @org.junit.Test
    public void noWrapEmbeddedNewlines_ZeroWidth() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).zeroWidthSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghij\nklmn");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("opqrstuvwxyz");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapEmbeddedNewlines_ZeroWidth()|8", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcdefghij\nklmnopqrstuvwxyz");
    }

    @org.junit.Test
    public void wrapEmbeddedNewlines_ZeroWidth() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).zeroWidthSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghijk\nlmn");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("opqrstuvwxy");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapEmbeddedNewlines_ZeroWidth()|8", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde\n    fghijk\nlmnopqrstuvwxy");
    }

    @org.junit.Test
    public void noWrapMultipleNewlines() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghi\nklmnopq\nr");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("stuvwxyz");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|8", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|noWrapMultipleNewlines()|9", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde fghi\nklmnopq\nr stuvwxyz");
    }

    @org.junit.Test
    public void wrapMultipleNewlines() throws java.lang.Exception {
        java.lang.StringBuffer out = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|0", java.lang.StringBuffer.class, new java.lang.StringBuffer());
        com.squareup.javapoet.LineWrapper lineWrapper = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|2", com.squareup.javapoet.LineWrapper.class, new com.squareup.javapoet.LineWrapper(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|1", java.lang.StringBuffer.class, out), "  ", 10));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|3", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("abcde");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|4", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|5", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("fghi\nklmnopq\nrs");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|6", com.squareup.javapoet.LineWrapper.class, lineWrapper).wrappingSpace(2);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|7", com.squareup.javapoet.LineWrapper.class, lineWrapper).append("tuvwxyz1");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.LineWrapper>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|8", com.squareup.javapoet.LineWrapper.class, lineWrapper).close();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.StringBuffer>observeState("com.squareup.javapoet.LineWrapperTest|wrapMultipleNewlines()|9", java.lang.StringBuffer.class, out).toString()))).isEqualTo("abcde fghi\nklmnopq\nrs\n    tuvwxyz1");
    }
}

