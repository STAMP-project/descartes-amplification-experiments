/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public class TypeNameTest {
    protected <E extends java.lang.Enum<E>> E generic(E[] values) {
        return values[0];
    }

    protected static class TestGeneric<T> {
        class Inner {}

        class InnerGeneric<T2> {}

        static class NestedNonGeneric {}
    }

    protected static com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner testGenericStringInner() {
        return null;
    }

    protected static com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner testGenericIntInner() {
        return null;
    }

    protected static com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long> testGenericInnerLong() {
        return null;
    }

    protected static com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer> testGenericInnerInt() {
        return null;
    }

    protected static com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric testNestedNonGeneric() {
        return null;
    }

    @org.junit.Test
    public void genericType() throws java.lang.Exception {
        java.lang.reflect.Method recursiveEnum = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|genericType()|0", java.lang.reflect.Method.class, getClass().getDeclaredMethod("generic", java.lang.Enum[].class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|genericType()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|genericType()|1", java.lang.reflect.Method.class, recursiveEnum).getReturnType()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|genericType()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|genericType()|4", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|genericType()|3", java.lang.reflect.Method.class, recursiveEnum).getGenericReturnType())));
        com.squareup.javapoet.TypeName genericTypeName = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|genericType()|7", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|genericType()|6", java.lang.reflect.Method.class, recursiveEnum).getParameterTypes()[0]));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|genericType()|11", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|genericType()|10", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type[]>observeState("com.squareup.javapoet.TypeNameTest|genericType()|9", java.lang.reflect.Type[].class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|genericType()|8", java.lang.reflect.Method.class, recursiveEnum).getGenericParameterTypes())[0])));
        // Make sure the generic argument is present
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeNameTest|genericType()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|genericType()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|genericType()|12", com.squareup.javapoet.TypeName.class, genericTypeName).toString()))).contains("Enum");
    }

    @org.junit.Test
    public void innerClassInGenericType() throws java.lang.Exception {
        java.lang.reflect.Method genericStringInner = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|0", java.lang.reflect.Method.class, getClass().getDeclaredMethod("testGenericStringInner"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|1", java.lang.reflect.Method.class, genericStringInner).getReturnType()));
        com.squareup.javapoet.TypeName genericTypeName = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|4", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|3", java.lang.reflect.Method.class, genericStringInner).getGenericReturnType())));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|8", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|7", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|6", java.lang.reflect.Method.class, genericStringInner).getGenericReturnType()))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|11", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|10", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|9", java.lang.reflect.Method.class, getClass().getDeclaredMethod("testGenericIntInner")).getGenericReturnType()))));
        // Make sure the generic argument is present
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|12", com.squareup.javapoet.TypeName.class, genericTypeName).toString()))).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|innerClassInGenericType()|15", com.squareup.javapoet.TypeNameTest.TestGeneric.class.getCanonicalName())) + "<java.lang.String>.Inner"));
    }

    @org.junit.Test
    public void innerGenericInGenericType() throws java.lang.Exception {
        java.lang.reflect.Method genericStringInner = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|0", java.lang.reflect.Method.class, getClass().getDeclaredMethod("testGenericInnerLong"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|1", java.lang.reflect.Method.class, genericStringInner).getReturnType()));
        com.squareup.javapoet.TypeName genericTypeName = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|4", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|3", java.lang.reflect.Method.class, genericStringInner).getGenericReturnType())));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|8", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|7", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|6", java.lang.reflect.Method.class, genericStringInner).getGenericReturnType()))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|11", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|10", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|9", java.lang.reflect.Method.class, getClass().getDeclaredMethod("testGenericInnerInt")).getGenericReturnType()))));
        // Make sure the generic argument is present
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|12", com.squareup.javapoet.TypeName.class, genericTypeName).toString()))).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|innerGenericInGenericType()|15", com.squareup.javapoet.TypeNameTest.TestGeneric.class.getCanonicalName())) + "<java.lang.Short>.InnerGeneric<java.lang.Long>"));
    }

    @org.junit.Test
    public void innerStaticInGenericType() throws java.lang.Exception {
        java.lang.reflect.Method staticInGeneric = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|0", java.lang.reflect.Method.class, getClass().getDeclaredMethod("testNestedNonGeneric"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|1", java.lang.reflect.Method.class, staticInGeneric).getReturnType()));
        com.squareup.javapoet.TypeName typeName = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Type>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|4", java.lang.reflect.Type.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.reflect.Method>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|3", java.lang.reflect.Method.class, staticInGeneric).getGenericReturnType())));
        // Make sure there are no generic arguments
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|6", com.squareup.javapoet.TypeName.class, typeName).toString()))).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|innerStaticInGenericType()|9", com.squareup.javapoet.TypeNameTest.TestGeneric.class.getCanonicalName())) + ".NestedNonGeneric"));
    }

    @org.junit.Test
    public void equalsAndHashCodePrimitive() {
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BOOLEAN), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BOOLEAN));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BYTE), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BYTE));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.CHAR), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.CHAR));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|6", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.DOUBLE), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|7", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.DOUBLE));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|8", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.FLOAT), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|9", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.FLOAT));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|10", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|11", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|12", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.LONG), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|13", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.LONG));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|14", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.SHORT), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|15", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.SHORT));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|16", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodePrimitive()|17", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID));
    }

    @org.junit.Test
    public void equalsAndHashCodeArrayTypeName() {
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeArrayTypeName()|0", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeArrayTypeName()|1", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(java.lang.Object.class)));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeArrayTypeName()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.Object[].class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeArrayTypeName()|3", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(java.lang.Object.class)));
    }

    @org.junit.Test
    public void equalsAndHashCodeClassName() {
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeClassName()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeClassName()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeClassName()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeClassName()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeClassName()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess("java.lang.Object")), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeClassName()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)));
    }

    @org.junit.Test
    public void equalsAndHashCodeParameterizedTypeName() {
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeParameterizedTypeName()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeParameterizedTypeName()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.lang.Object.class)));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeParameterizedTypeName()|2", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.Set.class, java.util.UUID.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeParameterizedTypeName()|3", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.Set.class, java.util.UUID.class)));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeParameterizedTypeName()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeParameterizedTypeName()|5", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.List.class, java.lang.String.class)));
    }

    @org.junit.Test
    public void equalsAndHashCodeTypeVariableName() {
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeTypeVariableName()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeVariableName.get(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeTypeVariableName()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeVariableName.get(java.lang.Object.class)));
        com.squareup.javapoet.TypeVariableName typeVar1 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeTypeVariableName()|2", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("T", java.util.Comparator.class, java.io.Serializable.class));
        com.squareup.javapoet.TypeVariableName typeVar2 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeTypeVariableName()|3", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("T", java.util.Comparator.class, java.io.Serializable.class));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeTypeVariableName()|4", com.squareup.javapoet.TypeVariableName.class, typeVar1), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeTypeVariableName()|5", com.squareup.javapoet.TypeVariableName.class, typeVar2));
    }

    @org.junit.Test
    public void equalsAndHashCodeWildcardTypeName() {
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeWildcardTypeName()|0", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.lang.Object.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeWildcardTypeName()|1", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.lang.Object.class)));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeWildcardTypeName()|2", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.io.Serializable.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeWildcardTypeName()|3", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.io.Serializable.class)));
        assertEqualsHashCodeAndToString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeWildcardTypeName()|4", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.supertypeOf(java.lang.String.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.TypeNameTest|equalsAndHashCodeWildcardTypeName()|5", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.supertypeOf(java.lang.String.class)));
    }

    @org.junit.Test
    public void isPrimitive() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|2", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isPrimitive()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT).isPrimitive()))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|5", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isPrimitive()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "Integer")).isPrimitive()))).isFalse();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|8", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isPrimitive()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "String")).isPrimitive()))).isFalse();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|11", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isPrimitive()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|9", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID).isPrimitive()))).isFalse();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|14", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isPrimitive()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|isPrimitive()|12", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "Void")).isPrimitive()))).isFalse();
    }

    @org.junit.Test
    public void isBoxedPrimitive() throws java.lang.Exception {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|2", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT).isBoxedPrimitive()))).isFalse();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|5", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "Integer")).isBoxedPrimitive()))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|8", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "String")).isBoxedPrimitive()))).isFalse();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|11", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|9", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID).isBoxedPrimitive()))).isFalse();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|14", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.TypeNameTest|isBoxedPrimitive()|12", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "Void")).isBoxedPrimitive()))).isFalse();
    }

    private void assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName a, com.squareup.javapoet.TypeName b) {
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|0", com.squareup.javapoet.TypeName.class, a).toString()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|2", com.squareup.javapoet.TypeName.class, b).toString()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|7", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|4", com.squareup.javapoet.TypeName.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|5", com.squareup.javapoet.TypeName.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|10", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|8", com.squareup.javapoet.TypeName.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|11", com.squareup.javapoet.TypeName.class, b).hashCode()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.TypeNameTest|assertEqualsHashCodeAndToString(com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName)|13", com.squareup.javapoet.TypeName.class, a).equals(null)));
    }
}

