/**
 * Copyright (C) 2014 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


@org.junit.runner.RunWith(org.junit.runners.JUnit4.class)
public final class FileWritingTest {
    // Used for testing java.io File behavior.
    @org.junit.Rule
    public final org.junit.rules.TemporaryFolder tmp = new org.junit.rules.TemporaryFolder();

    // Used for testing java.nio.file Path behavior.
    private final java.nio.file.FileSystem fs = com.google.common.jimfs.Jimfs.newFileSystem(com.google.common.jimfs.Configuration.unix());

    private final java.nio.file.Path fsRoot = fs.getRootDirectories().iterator().next();

    // Used for testing annotation processor Filer behavior.
    private final com.squareup.javapoet.TestFiler filer = new com.squareup.javapoet.TestFiler(fs, fsRoot);

    @org.junit.Test
    public void pathNotDirectory() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        com.squareup.javapoet.JavaFile javaFile = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("example", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|2", com.squareup.javapoet.TypeSpec.class, type))).build());
        java.nio.file.Path path = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|6", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|5", java.nio.file.FileSystem.class, fs).getPath("/foo/bar"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|9", java.nio.file.Path.class, java.nio.file.Files.createDirectories(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|8", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|7", java.nio.file.Path.class, path).getParent())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|11", java.nio.file.Path.class, java.nio.file.Files.createFile(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|10", java.nio.file.Path.class, path)));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|12", com.squareup.javapoet.JavaFile.class, javaFile).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|13", java.nio.file.Path.class, path));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|16", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.FileWritingTest|pathNotDirectory()|14", java.lang.IllegalArgumentException.class, e).getMessage()))).isEqualTo("path /foo/bar exists but is not a directory.");
        }
    }

    @org.junit.Test
    public void fileNotDirectory() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        com.squareup.javapoet.JavaFile javaFile = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("example", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|2", com.squareup.javapoet.TypeSpec.class, type))).build());
        java.io.File file = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|7", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|6", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|5", org.junit.rules.TemporaryFolder.class, tmp).newFolder("foo")), "bar"));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|8", java.io.File.class, file).createNewFile());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|10", com.squareup.javapoet.JavaFile.class, javaFile).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|11", java.io.File.class, file));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|12", java.lang.IllegalArgumentException.class, e).getMessage()))).isEqualTo((("path " + (eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNotDirectory()|15", java.io.File.class, file).getPath()))) + " exists but is not a directory."));
        }
    }

    @org.junit.Test
    public void pathDefaultPackage() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|2", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|5", java.nio.file.Path.class, fsRoot));
        java.nio.file.Path testPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|7", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|6", java.nio.file.Path.class, fsRoot).resolve("Test.java"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|10", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|9", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathDefaultPackage()|8", java.nio.file.Path.class, testPath))))).isTrue();
    }

    @org.junit.Test
    public void fileDefaultPackage() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|2", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|6", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|5", org.junit.rules.TemporaryFolder.class, tmp).getRoot()));
        java.io.File testFile = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|9", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|8", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|7", org.junit.rules.TemporaryFolder.class, tmp).getRoot()), "Test.java"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|12", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileDefaultPackage()|10", java.io.File.class, testFile).exists()))).isTrue();
    }

    @org.junit.Test
    public void filerDefaultPackage() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|2", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|5", com.squareup.javapoet.TestFiler.class, filer));
        java.nio.file.Path testPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|7", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|6", java.nio.file.Path.class, fsRoot).resolve("Test.java"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|10", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|9", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerDefaultPackage()|8", java.nio.file.Path.class, testPath))))).isTrue();
    }

    @org.junit.Test
    public void pathNestedClasses() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|2", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|5", java.nio.file.Path.class, fsRoot));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|8", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|7", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo.bar", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|6", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|9", java.nio.file.Path.class, fsRoot));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|12", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|11", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo.bar.baz", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|10", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|13", java.nio.file.Path.class, fsRoot));
        java.nio.file.Path fooPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|17", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|14", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|16", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|15", java.nio.file.FileSystem.class, fs).getPath("foo", "Test.java"))));
        java.nio.file.Path barPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|21", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|18", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|20", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|19", java.nio.file.FileSystem.class, fs).getPath("foo", "bar", "Test.java"))));
        java.nio.file.Path bazPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|25", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|22", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|24", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|23", java.nio.file.FileSystem.class, fs).getPath("foo", "bar", "baz", "Test.java"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|28", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|27", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|26", java.nio.file.Path.class, fooPath))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|31", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|30", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|29", java.nio.file.Path.class, barPath))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|34", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|33", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|pathNestedClasses()|32", java.nio.file.Path.class, bazPath))))).isTrue();
    }

    @org.junit.Test
    public void fileNestedClasses() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|2", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|6", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|5", org.junit.rules.TemporaryFolder.class, tmp).getRoot()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|9", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|8", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo.bar", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|7", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|11", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|10", org.junit.rules.TemporaryFolder.class, tmp).getRoot()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|14", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|13", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo.bar.baz", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|12", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|16", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|15", org.junit.rules.TemporaryFolder.class, tmp).getRoot()));
        java.io.File fooDir = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|19", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|18", java.io.File.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.junit.rules.TemporaryFolder>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|17", org.junit.rules.TemporaryFolder.class, tmp).getRoot()), "foo"));
        java.io.File fooFile = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|21", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|20", java.io.File.class, fooDir), "Test.java"));
        java.io.File barDir = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|23", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|22", java.io.File.class, fooDir), "bar"));
        java.io.File barFile = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|25", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|24", java.io.File.class, barDir), "Test.java"));
        java.io.File bazDir = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|27", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|26", java.io.File.class, barDir), "baz"));
        java.io.File bazFile = eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|29", java.io.File.class, new java.io.File(eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|28", java.io.File.class, bazDir), "Test.java"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|32", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|30", java.io.File.class, fooFile).exists()))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|35", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|33", java.io.File.class, barFile).exists()))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|38", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|37", eu.stamp_project.reneri.instrumentation.StateObserver.<java.io.File>observeState("com.squareup.javapoet.FileWritingTest|fileNestedClasses()|36", java.io.File.class, bazFile).exists()))).isTrue();
    }

    @org.junit.Test
    public void filerNestedClasses() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|2", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|5", com.squareup.javapoet.TestFiler.class, filer));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|8", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|7", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo.bar", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|6", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|9", com.squareup.javapoet.TestFiler.class, filer));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|12", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|11", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo.bar.baz", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|10", com.squareup.javapoet.TypeSpec.class, type))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|13", com.squareup.javapoet.TestFiler.class, filer));
        java.nio.file.Path fooPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|17", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|14", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|16", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|15", java.nio.file.FileSystem.class, fs).getPath("foo", "Test.java"))));
        java.nio.file.Path barPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|21", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|18", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|20", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|19", java.nio.file.FileSystem.class, fs).getPath("foo", "bar", "Test.java"))));
        java.nio.file.Path bazPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|25", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|22", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|24", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|23", java.nio.file.FileSystem.class, fs).getPath("foo", "bar", "baz", "Test.java"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|28", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|27", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|26", java.nio.file.Path.class, fooPath))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|31", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|30", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|29", java.nio.file.Path.class, barPath))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|34", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|33", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerNestedClasses()|32", java.nio.file.Path.class, bazPath))))).isTrue();
    }

    @org.junit.Test
    public void filerPassesOriginatingElements() throws java.io.IOException {
        javax.lang.model.element.Element element1_1 = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|0", javax.lang.model.element.Element.class, org.mockito.Mockito.mock(javax.lang.model.element.Element.class));
        com.squareup.javapoet.TypeSpec test1 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|4", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|3", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test1")).addOriginatingElement(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|2", javax.lang.model.element.Element.class, element1_1))).build());
        javax.lang.model.element.Element element2_1 = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|5", javax.lang.model.element.Element.class, org.mockito.Mockito.mock(javax.lang.model.element.Element.class));
        javax.lang.model.element.Element element2_2 = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|6", javax.lang.model.element.Element.class, org.mockito.Mockito.mock(javax.lang.model.element.Element.class));
        com.squareup.javapoet.TypeSpec test2 = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|12", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|7", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test2")).addOriginatingElement(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|8", javax.lang.model.element.Element.class, element2_1))).addOriginatingElement(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|10", javax.lang.model.element.Element.class, element2_2))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|15", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|14", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("example", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|13", com.squareup.javapoet.TypeSpec.class, test1))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|16", com.squareup.javapoet.TestFiler.class, filer));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|19", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|18", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("example", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|17", com.squareup.javapoet.TypeSpec.class, test2))).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|20", com.squareup.javapoet.TestFiler.class, filer));
        java.nio.file.Path testPath1 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|24", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|21", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|23", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|22", java.nio.file.FileSystem.class, fs).getPath("example", "Test1.java"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.Ordered>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|30", com.google.common.truth.Ordered.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IterableSubject>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|28", com.google.common.truth.IterableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<javax.lang.model.element.Element>>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|27", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|25", com.squareup.javapoet.TestFiler.class, filer).getOriginatingElements(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|26", java.nio.file.Path.class, testPath1))))).containsExactly(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|29", javax.lang.model.element.Element.class, element1_1)));
        java.nio.file.Path testPath2 = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|34", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|31", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|33", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|32", java.nio.file.FileSystem.class, fs).getPath("example", "Test2.java"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.Ordered>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|41", com.google.common.truth.Ordered.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IterableSubject>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|38", com.google.common.truth.IterableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<javax.lang.model.element.Element>>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|37", java.util.Set.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|35", com.squareup.javapoet.TestFiler.class, filer).getOriginatingElements(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|36", java.nio.file.Path.class, testPath2))))).containsExactly(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|39", javax.lang.model.element.Element.class, element2_1), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.FileWritingTest|filerPassesOriginatingElements()|40", javax.lang.model.element.Element.class, element2_2)));
    }

    @org.junit.Test
    public void filerClassesWithTabIndent() throws java.io.IOException {
        com.squareup.javapoet.TypeSpec test = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Test")).addField(java.util.Date.class, "madeFreshDate")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|8", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|2", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("main")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|4", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addParameter(java.lang.String[].class, "args")).addCode("$T.out.println($S);\n", java.lang.System.class, "Hello World!")).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|14", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|13", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|12", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|11", com.squareup.javapoet.TypeSpec.class, test))).indent("\t")).build()).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TestFiler>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|15", com.squareup.javapoet.TestFiler.class, filer));
        java.nio.file.Path fooPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|19", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|16", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|18", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|17", java.nio.file.FileSystem.class, fs).getPath("foo", "Test.java"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|22", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|21", java.nio.file.Files.exists(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|20", java.nio.file.Path.class, fooPath))))).isTrue();
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|25", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|24", byte[].class, java.nio.file.Files.readAllBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|23", java.nio.file.Path.class, fooPath)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|27", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|filerClassesWithTabIndent()|26", source))).isEqualTo(("" + (((((((((((("package foo;\n" + "\n") + "import java.lang.String;\n") + "import java.lang.System;\n") + "import java.util.Date;\n") + "\n") + "class Test {\n") + "\tDate madeFreshDate;\n") + "\n") + "\tpublic static void main(String[] args) {\n") + "\t\tSystem.out.println(\"Hello World!\");\n") + "\t}\n") + "}\n")));
    }

    /**
     * This test confirms that JavaPoet ignores the host charset and always uses UTF-8. The host
     * charset is customized with {@code -Dfile.encoding=ISO-8859-1}.
     */
    @org.junit.Test
    public void fileIsUtf8() throws java.io.IOException {
        com.squareup.javapoet.JavaFile javaFile = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|3", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|2", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("foo", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).build()))).addFileComment("Pi\u00f1ata\u00a1")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|5", com.squareup.javapoet.JavaFile.class, javaFile).writeTo(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|6", java.nio.file.Path.class, fsRoot));
        java.nio.file.Path fooPath = eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|10", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|7", java.nio.file.Path.class, fsRoot).resolve(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|9", java.nio.file.Path.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.FileSystem>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|8", java.nio.file.FileSystem.class, fs).getPath("foo", "Taco.java"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|14", new java.lang.String(eu.stamp_project.reneri.instrumentation.StateObserver.<byte[]>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|12", byte[].class, java.nio.file.Files.readAllBytes(eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.file.Path>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|11", java.nio.file.Path.class, fooPath))), eu.stamp_project.reneri.instrumentation.StateObserver.<java.nio.charset.Charset>observeState("com.squareup.javapoet.FileWritingTest|fileIsUtf8()|13", java.nio.charset.Charset.class, java.nio.charset.StandardCharsets.UTF_8))))).isEqualTo(("" + (((("// Pi\u00f1ata\u00a1\n" + "package foo;\n") + "\n") + "class Taco {\n") + "}\n")));
    }
}

