/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public class AnnotatedTypeNameTest {
    private static final java.lang.String NN = com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull.class.getCanonicalName();

    private final com.squareup.javapoet.AnnotationSpec NEVER_NULL = com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull.class).build();

    private static final java.lang.String TUA = com.squareup.javapoet.AnnotatedTypeNameTest.TypeUseAnnotation.class.getCanonicalName();

    private final com.squareup.javapoet.AnnotationSpec TYPE_USE_ANNOTATION = com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotatedTypeNameTest.TypeUseAnnotation.class).build();

    @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE)
    public @interface NeverNull {}

    @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE)
    public @interface TypeUseAnnotation {}

    @org.junit.Test(expected = java.lang.NullPointerException.class)
    public void nullAnnotationArray() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|nullAnnotationArray()|1", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|nullAnnotationArray()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BOOLEAN).annotated(((com.squareup.javapoet.AnnotationSpec[]) (null))));
        } catch (java.lang.NullPointerException a1552657123754) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.squareup.javapoet.AnnotatedTypeNameTest|nullAnnotationArray()|!", a1552657123754);
            throw a1552657123754;
        }
    }

    @org.junit.Test(expected = java.lang.NullPointerException.class)
    public void nullAnnotationList() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|nullAnnotationList()|1", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|nullAnnotationList()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.DOUBLE).annotated(((java.util.List<com.squareup.javapoet.AnnotationSpec>) (null))));
        } catch (java.lang.NullPointerException a1552657123754) {
            eu.stamp_project.reneri.instrumentation.StateObserver.observeThrownException("com.squareup.javapoet.AnnotatedTypeNameTest|nullAnnotationList()|!", a1552657123754);
            throw a1552657123754;
        }
    }

    @org.junit.Test
    public void annotated() {
        com.squareup.javapoet.TypeName simpleString = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|1", com.squareup.javapoet.TypeName.class, simpleString).isAnnotated()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|3", com.squareup.javapoet.TypeName.class, simpleString), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class)));
        com.squareup.javapoet.TypeName annotated = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|7", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|5", com.squareup.javapoet.TypeName.class, simpleString).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|6", com.squareup.javapoet.AnnotationSpec.class, NEVER_NULL)));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|8", com.squareup.javapoet.TypeName.class, annotated).isAnnotated()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|10", com.squareup.javapoet.TypeName.class, annotated), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|12", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotated()|11", com.squareup.javapoet.TypeName.class, annotated).annotated()));
    }

    @org.junit.Test
    public void annotatedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedType()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class));
        com.squareup.javapoet.TypeName actual = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedType()|3", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedType()|1", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedType()|2", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedType()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedType()|4", com.squareup.javapoet.TypeName.class, actual).toString()))).isEqualTo((("java.lang. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " String"));
    }

    @org.junit.Test
    public void annotatedTwice() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class));
        com.squareup.javapoet.TypeName actual = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|5", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|3", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|1", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|2", com.squareup.javapoet.AnnotationSpec.class, NEVER_NULL))).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|4", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedTwice()|6", com.squareup.javapoet.TypeName.class, actual).toString()))).isEqualTo((((("java.lang. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.NN)) + " @") + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " String"));
    }

    @org.junit.Test
    public void annotatedParameterizedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedParameterizedType()|0", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.List.class, java.lang.String.class));
        com.squareup.javapoet.TypeName actual = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedParameterizedType()|3", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedParameterizedType()|1", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedParameterizedType()|2", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedParameterizedType()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedParameterizedType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedParameterizedType()|4", com.squareup.javapoet.TypeName.class, actual).toString()))).isEqualTo((("java.util. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " List<java.lang.String>"));
    }

    @org.junit.Test
    public void annotatedArgumentOfParameterizedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|2", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        com.squareup.javapoet.TypeName actual = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|5", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|4", com.squareup.javapoet.TypeName.class, type)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArgumentOfParameterizedType()|6", com.squareup.javapoet.TypeName.class, actual).toString()))).isEqualTo((("java.util.List<java.lang. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " String>"));
    }

    @org.junit.Test
    public void annotatedWildcardTypeNameWithSuper() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|2", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        com.squareup.javapoet.TypeName actual = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|4", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.supertypeOf(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|3", com.squareup.javapoet.TypeName.class, type)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithSuper()|5", com.squareup.javapoet.TypeName.class, actual).toString()))).isEqualTo((("? super java.lang. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " String"));
    }

    @org.junit.Test
    public void annotatedWildcardTypeNameWithExtends() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|2", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.lang.String.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        com.squareup.javapoet.TypeName actual = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|4", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|3", com.squareup.javapoet.TypeName.class, type)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedWildcardTypeNameWithExtends()|5", com.squareup.javapoet.TypeName.class, actual).toString()))).isEqualTo((("? extends java.lang. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " String"));
    }

    @org.junit.Test
    public void annotatedEquivalence() {
        annotatedEquivalence(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID));
        annotatedEquivalence(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.ArrayTypeName.get(java.lang.Object[].class)));
        annotatedEquivalence(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)));
        annotatedEquivalence(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence()|3", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.List.class, java.lang.Object.class)));
        annotatedEquivalence(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeVariableName.get(java.lang.Object.class)));
        annotatedEquivalence(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.WildcardTypeName.get(java.lang.Object.class)));
    }

    private void annotatedEquivalence(com.squareup.javapoet.TypeName type) {
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|0", com.squareup.javapoet.TypeName.class, type).isAnnotated()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|2", com.squareup.javapoet.TypeName.class, type), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|3", com.squareup.javapoet.TypeName.class, type));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|6", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|4", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|5", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|9", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|7", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|8", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|10", com.squareup.javapoet.TypeName.class, type), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|13", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|11", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|12", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|15", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|14", com.squareup.javapoet.TypeName.class, type).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|16", com.squareup.javapoet.TypeName.class, type).hashCode()));
        org.junit.Assert.assertEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|21", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|20", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|18", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|19", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|25", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|24", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|22", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|23", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))).hashCode()));
        org.junit.Assert.assertNotEquals(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|27", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|26", com.squareup.javapoet.TypeName.class, type).hashCode()), eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|31", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|30", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|28", com.squareup.javapoet.TypeName.class, type).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEquivalence(com.squareup.javapoet.TypeName)|29", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))).hashCode()));
    }

    // https://github.com/square/javapoet/issues/431
    @org.junit.Test
    public void annotatedNestedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedType()|2", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedType()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.Map.Entry.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedType()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedType()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedType()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedType()|3", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo((("java.util.Map. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " Entry"));
    }

    @org.junit.Test
    public void annotatedEnclosingAndNestedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|5", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|3", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|2", com.squareup.javapoet.ClassName.class, ((com.squareup.javapoet.ClassName) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.Map.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))))).nestedClass("Entry")).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|4", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedEnclosingAndNestedType()|6", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo((((("java.util. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " Map. @") + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " Entry"));
    }

    // https://github.com/square/javapoet/issues/431
    @org.junit.Test
    public void annotatedNestedParameterizedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedParameterizedType()|2", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedParameterizedType()|0", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.Map.Entry.class, java.lang.Byte.class, java.lang.Byte.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedParameterizedType()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedParameterizedType()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedParameterizedType()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedNestedParameterizedType()|3", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo((("java.util.Map. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " Entry<java.lang.Byte, java.lang.Byte>"));
    }

    @org.junit.Test
    public void withoutAnnotationsOnAnnotatedEnclosingAndNestedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|5", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|3", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|2", com.squareup.javapoet.ClassName.class, ((com.squareup.javapoet.ClassName) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.Map.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))))).nestedClass("Entry")).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|4", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|8", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|6", com.squareup.javapoet.TypeName.class, type).isAnnotated()))).isTrue();
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|10", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|9", com.squareup.javapoet.TypeName.class, type).withoutAnnotations())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingAndNestedType()|11", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.Map.Entry.class)));
    }

    @org.junit.Test
    public void withoutAnnotationsOnAnnotatedEnclosingType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|3", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|2", com.squareup.javapoet.ClassName.class, ((com.squareup.javapoet.ClassName) (eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.Map.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION))))).nestedClass("Entry"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|6", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|4", com.squareup.javapoet.TypeName.class, type).isAnnotated()))).isTrue();
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|8", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|7", com.squareup.javapoet.TypeName.class, type).withoutAnnotations())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedEnclosingType()|9", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.Map.Entry.class)));
    }

    @org.junit.Test
    public void withoutAnnotationsOnAnnotatedNestedType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|3", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|1", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|0", com.squareup.javapoet.ClassName.class, ((com.squareup.javapoet.ClassName) (com.squareup.javapoet.TypeName.get(java.util.Map.class)))).nestedClass("Entry")).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|2", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|6", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|4", com.squareup.javapoet.TypeName.class, type).isAnnotated()))).isTrue();
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|8", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|7", com.squareup.javapoet.TypeName.class, type).withoutAnnotations())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|withoutAnnotationsOnAnnotatedNestedType()|9", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(java.util.Map.Entry.class)));
    }

    // https://github.com/square/javapoet/issues/614
    @org.junit.Test
    public void annotatedArrayType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayType()|3", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayType()|1", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayType()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)))).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayType()|2", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayType()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayType()|4", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo((("java.lang.Object @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " []"));
    }

    @org.junit.Test
    public void annotatedArrayElementType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayElementType()|3", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayElementType()|2", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayElementType()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayElementType()|1", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayElementType()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayElementType()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayElementType()|4", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo((("java.lang. @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " Object[]"));
    }

    // https://github.com/square/javapoet/issues/614
    @org.junit.Test
    public void annotatedOuterMultidimensionalArrayType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|4", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|2", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|1", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)))))).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|3", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedOuterMultidimensionalArrayType()|5", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo((("java.lang.Object @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " [][]"));
    }

    // https://github.com/square/javapoet/issues/614
    @org.junit.Test
    public void annotatedInnerMultidimensionalArrayType() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|4", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|3", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|1", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)))).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|2", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedInnerMultidimensionalArrayType()|5", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo((("java.lang.Object[] @" + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " []"));
    }

    // https://github.com/square/javapoet/issues/614
    @org.junit.Test
    public void annotatedArrayTypeVarargsParameter() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|4", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|2", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|1", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)))))).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|3", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)));
        com.squareup.javapoet.MethodSpec varargsMethod = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|11", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|5", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("m")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|8", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|7", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|6", com.squareup.javapoet.TypeName.class, type), "p")).build()))).varargs()).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeVarargsParameter()|12", com.squareup.javapoet.MethodSpec.class, varargsMethod).toString()))).isEqualTo((((("" + "void m(java.lang.Object @") + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " []... p) {\n") + "}\n"));
    }

    // https://github.com/square/javapoet/issues/614
    @org.junit.Test
    public void annotatedArrayTypeInVarargsParameter() {
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|4", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|3", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|1", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)))).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|2", com.squareup.javapoet.AnnotationSpec.class, TYPE_USE_ANNOTATION)))));
        com.squareup.javapoet.MethodSpec varargsMethod = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|11", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|10", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|5", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("m")).addParameter(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|8", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|7", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|6", com.squareup.javapoet.TypeName.class, type), "p")).build()))).varargs()).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|13", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.AnnotatedTypeNameTest|annotatedArrayTypeInVarargsParameter()|12", com.squareup.javapoet.MethodSpec.class, varargsMethod).toString()))).isEqualTo((((("" + "void m(java.lang.Object[] @") + (com.squareup.javapoet.AnnotatedTypeNameTest.TUA)) + " ... p) {\n") + "}\n"));
    }
}

