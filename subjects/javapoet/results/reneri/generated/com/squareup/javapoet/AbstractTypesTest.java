/**
 * Copyright (C) 2014 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public abstract class AbstractTypesTest {
    protected abstract javax.lang.model.util.Elements getElements();

    protected abstract javax.lang.model.util.Types getTypes();

    private javax.lang.model.element.TypeElement getElement(java.lang.Class<?> clazz) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|getElement(java.lang.Class)|2", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AbstractTypesTest|getElement(java.lang.Class)|0", javax.lang.model.util.Elements.class, getElements()).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|getElement(java.lang.Class)|1", clazz.getCanonicalName())));
    }

    private javax.lang.model.type.TypeMirror getMirror(java.lang.Class<?> clazz) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getMirror(java.lang.Class)|1", javax.lang.model.type.TypeMirror.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|getMirror(java.lang.Class)|0", javax.lang.model.element.TypeElement.class, getElement(clazz)).asType());
    }

    @org.junit.Test
    public void getBasicTypeMirror() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|0", javax.lang.model.type.TypeMirror.class, getMirror(java.lang.Object.class))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|3", javax.lang.model.type.TypeMirror.class, getMirror(java.nio.charset.Charset.class))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.nio.charset.Charset.class)));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|7", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|6", javax.lang.model.type.TypeMirror.class, getMirror(com.squareup.javapoet.AbstractTypesTest.class))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getBasicTypeMirror()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(com.squareup.javapoet.AbstractTypesTest.class)));
    }

    @org.junit.Test
    public void getParameterizedTypeMirror() {
        javax.lang.model.type.DeclaredType setType = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|3", javax.lang.model.type.DeclaredType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|0", javax.lang.model.util.Types.class, getTypes()).getDeclaredType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|1", javax.lang.model.element.TypeElement.class, getElement(java.util.Set.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|2", javax.lang.model.type.TypeMirror.class, getMirror(java.lang.Object.class))));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.DeclaredType>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|4", javax.lang.model.type.DeclaredType.class, setType)))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|8", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.Set.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getParameterizedTypeMirror()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.OBJECT))));
    }

    @org.junit.Test
    public void errorTypes() {
        javax.tools.JavaFileObject hasErrorTypes = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|0", javax.tools.JavaFileObject.class, com.google.testing.compile.JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes", "package com.squareup.tacos;", "", "@SuppressWarnings(\"hook-into-compiler\")", "class ErrorTypes {", "  Tacos tacos;", "  Ingredients.Guacamole guacamole;", "}"));
        com.google.testing.compile.Compilation compilation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.Compilation>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|23", com.google.testing.compile.Compilation.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.Compiler>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|21", com.google.testing.compile.Compiler.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.Compiler>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|1", com.google.testing.compile.Compiler.class, com.google.testing.compile.Compiler.javac()).withProcessors(new javax.annotation.processing.AbstractProcessor() {
            @java.lang.Override
            public boolean process(java.util.Set<? extends javax.lang.model.element.TypeElement> set, javax.annotation.processing.RoundEnvironment roundEnvironment) {
                javax.lang.model.element.TypeElement classFile = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|5", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|4", javax.lang.model.util.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.annotation.processing.ProcessingEnvironment>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|3", javax.annotation.processing.ProcessingEnvironment.class, processingEnv).getElementUtils()).getTypeElement("com.squareup.tacos.ErrorTypes"));
                java.util.List<javax.lang.model.element.VariableElement> fields = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.VariableElement>>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|7", java.util.List.class, javax.lang.model.util.ElementFilter.fieldsIn(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|6", javax.lang.model.element.TypeElement.class, classFile).getEnclosedElements()));
                javax.lang.model.type.ErrorType topLevel = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.ErrorType>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|10", javax.lang.model.type.ErrorType.class, ((javax.lang.model.type.ErrorType) (eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.VariableElement>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|9", javax.lang.model.element.VariableElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.VariableElement>>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|8", java.util.List.class, fields).get(0)).asType())));
                javax.lang.model.type.ErrorType member = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.ErrorType>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|13", javax.lang.model.type.ErrorType.class, ((javax.lang.model.type.ErrorType) (eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.VariableElement>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|12", javax.lang.model.element.VariableElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.VariableElement>>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|11", java.util.List.class, fields).get(1)).asType())));
                com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|15", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.ErrorType>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|14", javax.lang.model.type.ErrorType.class, topLevel)))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|16", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Tacos")));
                com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|18", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.ErrorType>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|17", javax.lang.model.type.ErrorType.class, member)))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|19", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("Ingredients", "Guacamole")));
                return false;
            }

            @java.lang.Override
            public java.util.Set<java.lang.String> getSupportedAnnotationTypes() {
                return eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.Set<java.lang.String>>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|20", java.util.Set.class, java.util.Collections.singleton("*"));
            }
        })).compile(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.tools.JavaFileObject>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|22", javax.tools.JavaFileObject.class, hasErrorTypes)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationSubject>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|25", com.google.testing.compile.CompilationSubject.class, com.google.testing.compile.CompilationSubject.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.Compilation>observeState("com.squareup.javapoet.AbstractTypesTest|errorTypes()|24", com.google.testing.compile.Compilation.class, compilation))).failed();
    }

    static class Parameterized<Simple, ExtendsClass extends java.lang.Number, ExtendsInterface extends java.lang.Runnable, ExtendsTypeVariable extends Simple, Intersection extends java.lang.Number & java.lang.Runnable, IntersectionOfInterfaces extends java.lang.Runnable & java.io.Serializable> {}

    @org.junit.Test
    public void getTypeVariableTypeMirror() {
        java.util.List<? extends javax.lang.model.element.TypeParameterElement> typeVariables = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.AbstractTypesTest.Parameterized.class)).getTypeParameters();
        // Members of converted types use ClassName and not Class<?>.
        com.squareup.javapoet.ClassName number = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Number.class));
        com.squareup.javapoet.ClassName runnable = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Runnable.class));
        com.squareup.javapoet.ClassName serializable = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.io.Serializable.class));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|5", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|4", javax.lang.model.type.TypeMirror.class, typeVariables.get(0).asType())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|6", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("Simple")));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|8", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|7", javax.lang.model.type.TypeMirror.class, typeVariables.get(1).asType())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|10", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("ExtendsClass", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|9", com.squareup.javapoet.ClassName.class, number))));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|12", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|11", javax.lang.model.type.TypeMirror.class, typeVariables.get(2).asType())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|14", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("ExtendsInterface", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|13", com.squareup.javapoet.ClassName.class, runnable))));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|16", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|15", javax.lang.model.type.TypeMirror.class, typeVariables.get(3).asType())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|18", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("ExtendsTypeVariable", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|17", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("Simple")))));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|20", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|19", javax.lang.model.type.TypeMirror.class, typeVariables.get(4).asType())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|23", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("Intersection", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|21", com.squareup.javapoet.ClassName.class, number), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|22", com.squareup.javapoet.ClassName.class, runnable))));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|25", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|24", javax.lang.model.type.TypeMirror.class, typeVariables.get(5).asType())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|28", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("IntersectionOfInterfaces", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|26", com.squareup.javapoet.ClassName.class, runnable), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|27", com.squareup.javapoet.ClassName.class, serializable))));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.Ordered>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|35", com.google.common.truth.Ordered.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IterableSubject>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|32", com.google.common.truth.IterableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|31", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|30", com.squareup.javapoet.TypeVariableName.class, ((com.squareup.javapoet.TypeVariableName) (com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|29", javax.lang.model.type.TypeMirror.class, typeVariables.get(4).asType()))))).bounds))).containsExactly(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|33", com.squareup.javapoet.ClassName.class, number), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirror()|34", com.squareup.javapoet.ClassName.class, runnable)));
    }

    static class Recursive<T extends java.util.Map<java.util.List<T>, java.util.Set<T[]>>> {}

    @org.junit.Test
    public void getTypeVariableTypeMirrorRecursive() {
        javax.lang.model.type.TypeMirror typeMirror = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|1", javax.lang.model.type.TypeMirror.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|0", javax.lang.model.element.TypeElement.class, getElement(com.squareup.javapoet.AbstractTypesTest.Recursive.class)).asType());
        com.squareup.javapoet.ParameterizedTypeName typeName = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|3", com.squareup.javapoet.ParameterizedTypeName.class, ((com.squareup.javapoet.ParameterizedTypeName) (com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|2", javax.lang.model.type.TypeMirror.class, typeMirror)))));
        java.lang.String className = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|4", com.squareup.javapoet.AbstractTypesTest.Recursive.class.getCanonicalName());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|5", com.squareup.javapoet.ParameterizedTypeName.class, typeName).toString()))).isEqualTo(((eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|8", className)) + "<T>"));
        com.squareup.javapoet.TypeVariableName typeVariableName = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|11", com.squareup.javapoet.TypeVariableName.class, ((com.squareup.javapoet.TypeVariableName) (eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|10", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|9", com.squareup.javapoet.ParameterizedTypeName.class, typeName).typeArguments).get(0))));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|14", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|13", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|12", com.squareup.javapoet.TypeVariableName.class, typeVariableName).bounds).set(0, null));
            org.junit.Assert.fail("Expected UnsupportedOperationException");
        } catch (java.lang.UnsupportedOperationException expected) {
        }
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|17", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|15", com.squareup.javapoet.TypeVariableName.class, typeVariableName).toString()))).isEqualTo("T");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|21", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.TypeName>>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|19", java.util.List.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|getTypeVariableTypeMirrorRecursive()|18", com.squareup.javapoet.TypeVariableName.class, typeVariableName).bounds).toString()))).isEqualTo("[java.util.Map<java.util.List<T>, java.util.Set<T[]>>]");
    }

    @org.junit.Test
    public void getPrimitiveTypeMirror() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|2", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|0", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|1", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.BOOLEAN)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BOOLEAN));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|8", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|7", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|5", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|6", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.BYTE)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|9", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.BYTE));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|13", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|12", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|10", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|11", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.SHORT)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|14", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.SHORT));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|18", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|17", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|15", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|16", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.INT)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|19", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|23", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|22", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|20", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|21", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.LONG)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|24", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.LONG));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|28", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|27", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|25", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|26", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.CHAR)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|29", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.CHAR));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|33", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|32", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|30", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|31", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.FLOAT)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|34", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.FLOAT));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|38", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.PrimitiveType>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|37", javax.lang.model.type.PrimitiveType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|35", javax.lang.model.util.Types.class, getTypes()).getPrimitiveType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|36", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.DOUBLE)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getPrimitiveTypeMirror()|39", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.DOUBLE));
    }

    @org.junit.Test
    public void getArrayTypeMirror() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getArrayTypeMirror()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.ArrayType>observeState("com.squareup.javapoet.AbstractTypesTest|getArrayTypeMirror()|2", javax.lang.model.type.ArrayType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getArrayTypeMirror()|0", javax.lang.model.util.Types.class, getTypes()).getArrayType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|getArrayTypeMirror()|1", javax.lang.model.type.TypeMirror.class, getMirror(java.lang.Object.class))))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getArrayTypeMirror()|5", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|getArrayTypeMirror()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.OBJECT))));
    }

    @org.junit.Test
    public void getVoidTypeMirror() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getVoidTypeMirror()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.NoType>observeState("com.squareup.javapoet.AbstractTypesTest|getVoidTypeMirror()|2", javax.lang.model.type.NoType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getVoidTypeMirror()|0", javax.lang.model.util.Types.class, getTypes()).getNoType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeKind>observeState("com.squareup.javapoet.AbstractTypesTest|getVoidTypeMirror()|1", javax.lang.model.type.TypeKind.class, javax.lang.model.type.TypeKind.VOID)))))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getVoidTypeMirror()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID));
    }

    @org.junit.Test
    public void getNullTypeMirror() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|getNullTypeMirror()|2", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.NullType>observeState("com.squareup.javapoet.AbstractTypesTest|getNullTypeMirror()|1", javax.lang.model.type.NullType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|getNullTypeMirror()|0", javax.lang.model.util.Types.class, getTypes()).getNullType())));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    @org.junit.Test
    public void parameterizedType() throws java.lang.Exception {
        com.squareup.javapoet.ParameterizedTypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|parameterizedType()|0", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(java.util.Map.class, java.lang.String.class, java.lang.Long.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|parameterizedType()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|parameterizedType()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|parameterizedType()|1", com.squareup.javapoet.ParameterizedTypeName.class, type).toString()))).isEqualTo("java.util.Map<java.lang.String, java.lang.Long>");
    }

    @org.junit.Test
    public void arrayType() throws java.lang.Exception {
        com.squareup.javapoet.ArrayTypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|arrayType()|0", com.squareup.javapoet.ArrayTypeName.class, com.squareup.javapoet.ArrayTypeName.of(java.lang.String.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|arrayType()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|arrayType()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ArrayTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|arrayType()|1", com.squareup.javapoet.ArrayTypeName.class, type).toString()))).isEqualTo("java.lang.String[]");
    }

    @org.junit.Test
    public void wildcardExtendsType() throws java.lang.Exception {
        com.squareup.javapoet.WildcardTypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsType()|0", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.lang.CharSequence.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsType()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsType()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsType()|1", com.squareup.javapoet.WildcardTypeName.class, type).toString()))).isEqualTo("? extends java.lang.CharSequence");
    }

    @org.junit.Test
    public void wildcardExtendsObject() throws java.lang.Exception {
        com.squareup.javapoet.WildcardTypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsObject()|0", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.subtypeOf(java.lang.Object.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsObject()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsObject()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardExtendsObject()|1", com.squareup.javapoet.WildcardTypeName.class, type).toString()))).isEqualTo("?");
    }

    @org.junit.Test
    public void wildcardSuperType() throws java.lang.Exception {
        com.squareup.javapoet.WildcardTypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardSuperType()|0", com.squareup.javapoet.WildcardTypeName.class, com.squareup.javapoet.WildcardTypeName.supertypeOf(java.lang.String.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardSuperType()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardSuperType()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.WildcardTypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardSuperType()|1", com.squareup.javapoet.WildcardTypeName.class, type).toString()))).isEqualTo("? super java.lang.String");
    }

    @org.junit.Test
    public void wildcardMirrorNoBounds() throws java.lang.Exception {
        javax.lang.model.type.WildcardType wildcard = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.WildcardType>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorNoBounds()|1", javax.lang.model.type.WildcardType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorNoBounds()|0", javax.lang.model.util.Types.class, getTypes()).getWildcardType(null, null));
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorNoBounds()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.WildcardType>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorNoBounds()|2", javax.lang.model.type.WildcardType.class, wildcard)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorNoBounds()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorNoBounds()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorNoBounds()|4", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo("?");
    }

    @org.junit.Test
    public void wildcardMirrorExtendsType() throws java.lang.Exception {
        javax.lang.model.util.Types types = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|0", javax.lang.model.util.Types.class, getTypes());
        javax.lang.model.util.Elements elements = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|1", javax.lang.model.util.Elements.class, getElements());
        javax.lang.model.type.TypeMirror charSequence = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|5", javax.lang.model.type.TypeMirror.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|4", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|2", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|3", java.lang.CharSequence.class.getName()))).asType());
        javax.lang.model.type.WildcardType wildcard = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.WildcardType>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|8", javax.lang.model.type.WildcardType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|6", javax.lang.model.util.Types.class, types).getWildcardType(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|7", javax.lang.model.type.TypeMirror.class, charSequence), null));
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|10", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.WildcardType>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|9", javax.lang.model.type.WildcardType.class, wildcard)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorExtendsType()|11", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo("? extends java.lang.CharSequence");
    }

    @org.junit.Test
    public void wildcardMirrorSuperType() throws java.lang.Exception {
        javax.lang.model.util.Types types = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|0", javax.lang.model.util.Types.class, getTypes());
        javax.lang.model.util.Elements elements = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|1", javax.lang.model.util.Elements.class, getElements());
        javax.lang.model.type.TypeMirror string = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|5", javax.lang.model.type.TypeMirror.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|4", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|2", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|3", java.lang.String.class.getName()))).asType());
        javax.lang.model.type.WildcardType wildcard = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.WildcardType>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|8", javax.lang.model.type.WildcardType.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Types>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|6", javax.lang.model.util.Types.class, types).getWildcardType(null, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.TypeMirror>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|7", javax.lang.model.type.TypeMirror.class, string)));
        com.squareup.javapoet.TypeName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|10", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.type.WildcardType>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|9", javax.lang.model.type.WildcardType.class, wildcard)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|wildcardMirrorSuperType()|11", com.squareup.javapoet.TypeName.class, type).toString()))).isEqualTo("? super java.lang.String");
    }

    @org.junit.Test
    public void typeVariable() throws java.lang.Exception {
        com.squareup.javapoet.TypeVariableName type = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|typeVariable()|0", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("T", java.lang.CharSequence.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AbstractTypesTest|typeVariable()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AbstractTypesTest|typeVariable()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.AbstractTypesTest|typeVariable()|1", com.squareup.javapoet.TypeVariableName.class, type).toString()))).isEqualTo("T");// (Bounds are only emitted in declaration.)

    }

    @org.junit.Test
    public void box() throws java.lang.Exception {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|1", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT).box())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Integer.class)));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|4", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID).box())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Void.class)));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|7", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Integer.class)).box())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Integer.class)));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|10", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|9", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Void.class)).box())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|11", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Void.class)));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|13", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|12", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.TypeName.OBJECT).box())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|14", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.TypeName.OBJECT));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|16", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|15", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.String.class)).box())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|box()|17", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.String.class)));
    }

    @org.junit.Test
    public void unbox() throws java.lang.Exception {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|0", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT)).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|2", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|1", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT).unbox()));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|3", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID)).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|5", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|4", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID).unbox()));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|7", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Integer.class)).unbox())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|9", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|8", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.INT).unbox()));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|11", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|10", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Void.class)).unbox())).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|13", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|12", com.squareup.javapoet.TypeName.class, com.squareup.javapoet.TypeName.VOID).unbox()));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|15", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|14", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.TypeName.OBJECT).unbox());
            org.junit.Assert.fail();
        } catch (java.lang.UnsupportedOperationException expected) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|17", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.AbstractTypesTest|unbox()|16", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.String.class)).unbox());
            org.junit.Assert.fail();
        } catch (java.lang.UnsupportedOperationException expected) {
        }
    }
}

