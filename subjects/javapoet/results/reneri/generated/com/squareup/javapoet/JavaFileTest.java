/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


@org.junit.runner.RunWith(org.junit.runners.JUnit4.class)
public final class JavaFileTest {
    @org.junit.Test
    public void importStaticReadmeExample() {
        com.squareup.javapoet.ClassName hoverboard = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.mattel", "Hoverboard"));
        com.squareup.javapoet.ClassName namedBoards = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.mattel", "Hoverboard", "Boards"));
        com.squareup.javapoet.ClassName list = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.util", "List"));
        com.squareup.javapoet.ClassName arrayList = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.util", "ArrayList"));
        com.squareup.javapoet.TypeName listOfHoverboards = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|6", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|4", com.squareup.javapoet.ClassName.class, list), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|5", com.squareup.javapoet.ClassName.class, hoverboard)));
        com.squareup.javapoet.MethodSpec beyond = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|22", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|21", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|20", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|19", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|16", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|14", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|12", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|7", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("beyond")).returns(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|8", com.squareup.javapoet.TypeName.class, listOfHoverboards))).addStatement("$T result = new $T<>()", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|10", com.squareup.javapoet.TypeName.class, listOfHoverboards), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|11", com.squareup.javapoet.ClassName.class, arrayList))).addStatement("result.add($T.createNimbus(2000))", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|13", com.squareup.javapoet.ClassName.class, hoverboard))).addStatement("result.add($T.createNimbus(\"2001\"))", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|15", com.squareup.javapoet.ClassName.class, hoverboard))).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|17", com.squareup.javapoet.ClassName.class, hoverboard), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|18", com.squareup.javapoet.ClassName.class, namedBoards))).addStatement("$T.sort(result)", java.util.Collections.class)).addStatement("return result.isEmpty() ? $T.emptyList() : result", java.util.Collections.class)).build());
        com.squareup.javapoet.TypeSpec hello = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|26", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|25", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|23", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("HelloWorld")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|24", com.squareup.javapoet.MethodSpec.class, beyond))).build());
        com.squareup.javapoet.JavaFile example = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|34", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|33", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|32", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|30", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|28", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.example.helloworld", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|27", com.squareup.javapoet.TypeSpec.class, hello))).addStaticImport(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|29", com.squareup.javapoet.ClassName.class, hoverboard), "createNimbus")).addStaticImport(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|31", com.squareup.javapoet.ClassName.class, namedBoards), "*")).addStaticImport(java.util.Collections.class, "*")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|37", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticReadmeExample()|35", com.squareup.javapoet.JavaFile.class, example).toString()))).isEqualTo(("" + ((((((((((((((((((("package com.example.helloworld;\n" + "\n") + "import static com.mattel.Hoverboard.Boards.*;\n") + "import static com.mattel.Hoverboard.createNimbus;\n") + "import static java.util.Collections.*;\n") + "\n") + "import com.mattel.Hoverboard;\n") + "import java.util.ArrayList;\n") + "import java.util.List;\n") + "\n") + "class HelloWorld {\n") + "  List<Hoverboard> beyond() {\n") + "    List<Hoverboard> result = new ArrayList<>();\n") + "    result.add(createNimbus(2000));\n") + "    result.add(createNimbus(\"2001\"));\n") + "    result.add(createNimbus(THUNDERBOLT));\n") + "    sort(result);\n") + "    return result.isEmpty() ? emptyList() : result;\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void importStaticForCrazyFormatsWorks() {
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|1", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("method")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|23", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|22", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|21", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|20", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|19", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addStaticBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|18", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|17", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|15", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|14", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|13", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|11", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|10", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|9", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|8", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|7", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|6", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|5", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|4", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|3", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("$T", java.lang.Runtime.class)).addStatement("$T.a()", java.lang.Runtime.class)).addStatement("$T.X", java.lang.Runtime.class)).addStatement("$T$T", java.lang.Runtime.class, java.lang.Runtime.class)).addStatement("$T.$T", java.lang.Runtime.class, java.lang.Runtime.class)).addStatement("$1T$1T", java.lang.Runtime.class)).addStatement("$1T$2L$1T", java.lang.Runtime.class, "?")).addStatement("$1T$2L$2S$1T", java.lang.Runtime.class, "?")).addStatement("$1T$2L$2S$1T$3N$1T", java.lang.Runtime.class, "?", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|12", com.squareup.javapoet.MethodSpec.class, method))).addStatement("$T$L", java.lang.Runtime.class, "?")).addStatement("$T$S", java.lang.Runtime.class, "?")).addStatement("$T$N", java.lang.Runtime.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticForCrazyFormatsWorks()|16", com.squareup.javapoet.MethodSpec.class, method))).build()))).build()))).addStaticImport(java.lang.Runtime.class, "*")).build()).toString()// don't look at the generated code...
        );
    }

    @org.junit.Test
    public void importStaticMixed() {
        com.squareup.javapoet.JavaFile source = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|18", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|17", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|16", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|15", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|13", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|12", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addStaticBlock(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|5", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|4", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|3", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED", java.lang.Thread.State.class)).addStatement("$T.gc()", java.lang.System.class)).addStatement("$1T.out.println($1T.nanoTime())", java.lang.System.class)).build()))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|10", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|9", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|8", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|7", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.constructorBuilder()).addParameter(java.lang.Thread.State[].class, "states")).varargs(true)).build()))).build()))).addStaticImport(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Thread.State>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|14", java.lang.Thread.State.class, java.lang.Thread.State.BLOCKED))).addStaticImport(java.lang.System.class, "*")).addStaticImport(java.lang.Thread.State.class, "valueOf")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|21", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticMixed()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticMixed()|19", com.squareup.javapoet.JavaFile.class, source).toString()))).isEqualTo(("" + ((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import static java.lang.System.*;\n") + "import static java.lang.Thread.State.BLOCKED;\n") + "import static java.lang.Thread.State.valueOf;\n") + "\n") + "import java.lang.Thread;\n") + "\n") + "class Taco {\n") + "  static {\n") + "    assert valueOf(\"BLOCKED\") == BLOCKED;\n") + "    gc();\n") + "    out.println(nanoTime());\n") + "  }\n") + "\n") + "  Taco(Thread.State... states) {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Ignore("addStaticImport doesn't support members with $L")
    @org.junit.Test
    public void importStaticDynamic() {
        com.squareup.javapoet.JavaFile source = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|8", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|7", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|6", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|3", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|2", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("main")).addStatement("$T.$L.println($S)", java.lang.System.class, "out", "hello")).build()))).build()))).addStaticImport(java.lang.System.class, "out")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticDynamic()|9", com.squareup.javapoet.JavaFile.class, source).toString()))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "import static java.lang.System.out;\n") + "\n") + "class Taco {\n") + "  void main() {\n") + "    out.println(\"hello\");\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void importStaticNone() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|importStaticNone()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticNone()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticNone()|2", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticNone()|1", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("readme", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticNone()|0", com.squareup.javapoet.TypeSpec.class, importStaticTypeSpec("Util")))).build()).toString()))).isEqualTo(("" + (((((((((("package readme;\n" + "\n") + "import java.lang.System;\n") + "import java.util.concurrent.TimeUnit;\n") + "\n") + "class Util {\n") + "  public static long minutesToSeconds(long minutes) {\n") + "    System.gc();\n") + "    return TimeUnit.SECONDS.convert(minutes, TimeUnit.MINUTES);\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void importStaticOnce() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|importStaticOnce()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticOnce()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticOnce()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticOnce()|3", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticOnce()|1", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("readme", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticOnce()|0", com.squareup.javapoet.TypeSpec.class, importStaticTypeSpec("Util")))).addStaticImport(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.TimeUnit>observeState("com.squareup.javapoet.JavaFileTest|importStaticOnce()|2", java.util.concurrent.TimeUnit.class, java.util.concurrent.TimeUnit.SECONDS))).build()).toString()))).isEqualTo(("" + (((((((((((("package readme;\n" + "\n") + "import static java.util.concurrent.TimeUnit.SECONDS;\n") + "\n") + "import java.lang.System;\n") + "import java.util.concurrent.TimeUnit;\n") + "\n") + "class Util {\n") + "  public static long minutesToSeconds(long minutes) {\n") + "    System.gc();\n") + "    return SECONDS.convert(minutes, TimeUnit.MINUTES);\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void importStaticTwice() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticTwice()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|6", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|5", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|3", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|1", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("readme", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|0", com.squareup.javapoet.TypeSpec.class, importStaticTypeSpec("Util")))).addStaticImport(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.TimeUnit>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|2", java.util.concurrent.TimeUnit.class, java.util.concurrent.TimeUnit.SECONDS))).addStaticImport(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.concurrent.TimeUnit>observeState("com.squareup.javapoet.JavaFileTest|importStaticTwice()|4", java.util.concurrent.TimeUnit.class, java.util.concurrent.TimeUnit.MINUTES))).build()).toString()))).isEqualTo(("" + (((((((((((("package readme;\n" + "\n") + "import static java.util.concurrent.TimeUnit.MINUTES;\n") + "import static java.util.concurrent.TimeUnit.SECONDS;\n") + "\n") + "import java.lang.System;\n") + "\n") + "class Util {\n") + "  public static long minutesToSeconds(long minutes) {\n") + "    System.gc();\n") + "    return SECONDS.convert(minutes, MINUTES);\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void importStaticUsingWildcards() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|importStaticUsingWildcards()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticUsingWildcards()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|importStaticUsingWildcards()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticUsingWildcards()|3", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticUsingWildcards()|2", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticUsingWildcards()|1", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("readme", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticUsingWildcards()|0", com.squareup.javapoet.TypeSpec.class, importStaticTypeSpec("Util")))).addStaticImport(java.util.concurrent.TimeUnit.class, "*")).addStaticImport(java.lang.System.class, "*")).build()).toString()))).isEqualTo(("" + (((((((((("package readme;\n" + "\n") + "import static java.lang.System.*;\n") + "import static java.util.concurrent.TimeUnit.*;\n") + "\n") + "class Util {\n") + "  public static long minutesToSeconds(long minutes) {\n") + "    gc();\n") + "    return SECONDS.convert(minutes, MINUTES);\n") + "  }\n") + "}\n")));
    }

    private com.squareup.javapoet.TypeSpec importStaticTypeSpec(java.lang.String name) {
        com.squareup.javapoet.MethodSpec method = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|8", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|7", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|3", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|0", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("minutesToSeconds")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|1", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).returns(long.class)).addParameter(long.class, "minutes")).addStatement("$T.gc()", java.lang.System.class)).addStatement("return $1T.SECONDS.convert(minutes, $1T.MINUTES)", java.util.concurrent.TimeUnit.class)).build());
        return eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|13", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|10", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|9", name))).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|importStaticTypeSpec(java.lang.String)|11", com.squareup.javapoet.MethodSpec.class, method))).build());
    }

    @org.junit.Test
    public void noImports() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|noImports()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|noImports()|3", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|noImports()|2", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|noImports()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|noImports()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|noImports()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|noImports()|5", source))).isEqualTo(("" + ((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void singleImport() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|singleImport()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|singleImport()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|singleImport()|3", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|singleImport()|2", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|singleImport()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|singleImport()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(java.util.Date.class, "madeFreshDate")).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|singleImport()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|singleImport()|6", source))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "import java.util.Date;\n") + "\n") + "class Taco {\n") + "  Date madeFreshDate;\n") + "}\n")));
    }

    @org.junit.Test
    public void conflictingImports() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingImports()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|6", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|5", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|4", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|3", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|1", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(java.util.Date.class, "madeFreshDate")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.sql", "Date")), "madeFreshDatabaseDate")).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|conflictingImports()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingImports()|8", source))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "import java.util.Date;\n") + "\n") + "class Taco {\n") + "  Date madeFreshDate;\n") + "\n") + "  java.sql.Date madeFreshDatabaseDate;\n") + "}\n")));
    }

    @org.junit.Test
    public void annotatedTypeParam() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|11", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|10", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|7", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.List.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeName>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|6", com.squareup.javapoet.TypeName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.meat", "Chorizo")).annotated(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|5", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|4", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "Spicy")))).build()))))), "chorizo")).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|annotatedTypeParam()|13", source))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "import com.squareup.meat.Chorizo;\n") + "import java.util.List;\n") + "\n") + "class Taco {\n") + "  List<@Spicy Chorizo> chorizo;\n") + "}\n")));
    }

    @org.junit.Test
    public void skipJavaLangImportsWithConflictingClassLast() throws java.lang.Exception {
        // Whatever is used first wins! In this case the Float in java.lang is imported.
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|8", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|7", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|6", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "Float")), "litres")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.soda", "Float")), "beverage")).build()))).skipJavaLangImports(true)).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassLast()|10", source))).isEqualTo(("" + (((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  Float litres;\n") + "\n") + "  com.squareup.soda.Float beverage;\n")// Second 'Float' is fully qualified.
         + "}\n")));
    }

    @org.junit.Test
    public void skipJavaLangImportsWithConflictingClassFirst() throws java.lang.Exception {
        // Whatever is used first wins! In this case the Float in com.squareup.soda is imported.
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|8", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|7", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|6", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.soda", "Float")), "beverage")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "Float")), "litres")).build()))).skipJavaLangImports(true)).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|skipJavaLangImportsWithConflictingClassFirst()|10", source))).isEqualTo(("" + (((((((("package com.squareup.tacos;\n" + "\n") + "import com.squareup.soda.Float;\n") + "\n") + "class Taco {\n") + "  Float beverage;\n") + "\n") + "  java.lang.Float litres;\n")// Second 'Float' is fully qualified.
         + "}\n")));
    }

    @org.junit.Test
    public void conflictingParentName() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingParentName()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|20", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|19", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|18", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("A")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("B")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|3", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Twin")).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|5", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("C")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "A", "Twin", "D")), "d")).build()))).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|16", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|15", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|12", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Twin")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|14", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|13", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("D")).build()))).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|conflictingParentName()|23", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingParentName()|22", source))).isEqualTo(("" + (((((((((((((((("package com.squareup.tacos;\n" + "\n") + "class A {\n") + "  class B {\n") + "    class Twin {\n") + "    }\n") + "\n") + "    class C {\n") + "      A.Twin.D d;\n") + "    }\n") + "  }\n") + "\n") + "  class Twin {\n") + "    class D {\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void conflictingChildName() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingChildName()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|20", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|19", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|18", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|17", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("A")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("B")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("C")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "A", "Twin", "D")), "d")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|6", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|5", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Twin")).build()))).build()))).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|16", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|15", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|12", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Twin")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|14", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|13", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("D")).build()))).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|conflictingChildName()|23", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingChildName()|22", source))).isEqualTo(("" + (((((((((((((((("package com.squareup.tacos;\n" + "\n") + "class A {\n") + "  class B {\n") + "    class C {\n") + "      A.Twin.D d;\n") + "\n") + "      class Twin {\n") + "      }\n") + "    }\n") + "  }\n") + "\n") + "  class Twin {\n") + "    class D {\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void conflictingNameOutOfScope() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|23", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|22", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|21", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|20", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|14", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("A")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|13", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|12", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|1", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("B")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|11", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|10", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|2", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("C")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "A", "Twin", "D")), "d")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|5", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Nested")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|7", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|6", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Twin")).build()))).build()))).build()))).build()))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|19", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|18", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|15", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Twin")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|17", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|16", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("D")).build()))).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|26", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingNameOutOfScope()|25", source))).isEqualTo(("" + (((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "class A {\n") + "  class B {\n") + "    class C {\n") + "      Twin.D d;\n") + "\n") + "      class Nested {\n") + "        class Twin {\n") + "        }\n") + "      }\n") + "    }\n") + "  }\n") + "\n") + "  class Twin {\n") + "    class D {\n") + "    }\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void nestedClassAndSuperclassShareName() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|10", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|9", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.wire", "Message")))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|6", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Builder")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.wire", "Message", "Builder")))).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|nestedClassAndSuperclassShareName()|12", source))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "import com.squareup.wire.Message;\n") + "\n") + "class Taco extends Message {\n") + "  class Builder extends Message.Builder {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void classAndSuperclassShareName() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|5", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|4", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|3", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.taco.bell", "Taco")))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|classAndSuperclassShareName()|7", source))).isEqualTo(("" + ((("package com.squareup.tacos;\n" + "\n") + "class Taco extends com.taco.bell.Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void conflictingAnnotation() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|5", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|4", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|3", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.taco.bell", "Taco")))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingAnnotation()|7", source))).isEqualTo(("" + (((("package com.squareup.tacos;\n" + "\n") + "@com.taco.bell.Taco\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void conflictingAnnotationReferencedClass() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|9", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|8", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|7", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|6", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|5", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|4", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|2", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "MyAnno")))).addMember("value", "$T.class", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.taco.bell", "Taco")))).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingAnnotationReferencedClass()|11", source))).isEqualTo(("" + (((("package com.squareup.tacos;\n" + "\n") + "@MyAnno(com.taco.bell.Taco.class)\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void conflictingTypeVariableBound() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|6", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|5", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|4", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|3", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addTypeVariable(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeVariableName>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|2", com.squareup.javapoet.TypeVariableName.class, com.squareup.javapoet.TypeVariableName.get("T", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.taco.bell", "Taco")))))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|conflictingTypeVariableBound()|8", source))).isEqualTo(("" + ((("package com.squareup.tacos;\n" + "\n") + "class Taco<T extends com.taco.bell.Taco> {\n") + "}\n")));
    }

    @org.junit.Test
    public void superclassReferencesSelf() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|7", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|6", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterizedTypeName>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|3", com.squareup.javapoet.ParameterizedTypeName.class, com.squareup.javapoet.ParameterizedTypeName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Comparable.class)), eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "Taco")))))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|superclassReferencesSelf()|9", source))).isEqualTo(("" + ((((("package com.squareup.tacos;\n" + "\n") + "import java.lang.Comparable;\n") + "\n") + "class Taco extends Comparable<Taco> {\n") + "}\n")));
    }

    /**
     * https://github.com/square/javapoet/issues/366
     */
    @org.junit.Test
    public void annotationIsNestedClass() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|10", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|9", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|8", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|7", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("TestComponent")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("dagger", "Component")))).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|6", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Builder")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("dagger", "Component", "Builder")))).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|annotationIsNestedClass()|12", source))).isEqualTo(("" + ((((((((("package com.squareup.tacos;\n" + "\n") + "import dagger.Component;\n") + "\n") + "@Component\n") + "class TestComponent {\n") + "  @Component.Builder\n") + "  class Builder {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void defaultPackage() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|defaultPackage()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|11", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|10", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|9", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|8", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("HelloWorld")).addMethod(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|7", com.squareup.javapoet.MethodSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|6", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|5", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|4", com.squareup.javapoet.MethodSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.MethodSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|1", com.squareup.javapoet.MethodSpec.Builder.class, com.squareup.javapoet.MethodSpec.methodBuilder("main")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC), eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|3", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).addParameter(java.lang.String[].class, "args")).addCode("$T.out.println($S);\n", java.lang.System.class, "Hello World!")).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|defaultPackage()|14", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|defaultPackage()|13", source))).isEqualTo(("" + ((((((("import java.lang.String;\n" + "import java.lang.System;\n") + "\n") + "class HelloWorld {\n") + "  public static void main(String[] args) {\n") + "    System.out.println(\"Hello World!\");\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void defaultPackageTypesAreNotImported() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|5", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|4", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("hello", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|3", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("World")).addSuperinterface(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Test")))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|defaultPackageTypesAreNotImported()|7", source))).isEqualTo(("" + ((("package hello;\n" + "\n") + "class World implements Test {\n") + "}\n")));
    }

    @org.junit.Test
    public void topOfFileComment() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|topOfFileComment()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|topOfFileComment()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|topOfFileComment()|3", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|topOfFileComment()|2", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|topOfFileComment()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|topOfFileComment()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).build()))).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!", "2015-01-13")).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|topOfFileComment()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|topOfFileComment()|6", source))).isEqualTo(("" + (((("// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n") + "\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void emptyLinesInTopOfFileComment() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|4", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|3", com.squareup.javapoet.JavaFile.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|2", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|1", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).build()))).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n")).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|emptyLinesInTopOfFileComment()|6", source))).isEqualTo(("" + (((((((("//\n" + "// GENERATED FILE:\n") + "//\n") + "// DO NOT EDIT!\n") + "//\n") + "package com.squareup.tacos;\n") + "\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void packageClassConflictsWithNestedClass() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|8", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|7", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|6", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "A")), "a")).addType(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|4", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("A")).build()))).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|11", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithNestedClass()|10", source))).isEqualTo(("" + ((((((("package com.squareup.tacos;\n" + "\n") + "class Taco {\n") + "  com.squareup.tacos.A a;\n") + "\n") + "  class A {\n") + "  }\n") + "}\n")));
    }

    @org.junit.Test
    public void packageClassConflictsWithSuperlass() throws java.lang.Exception {
        java.lang.String source = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|7", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|6", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|5", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|4", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|2", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|0", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).superclass(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.taco.bell", "A")))).addField(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.tacos", "A")), "a")).build()))).build()).toString());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|10", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.JavaFileTest|packageClassConflictsWithSuperlass()|9", source))).isEqualTo(("" + (((("package com.squareup.tacos;\n" + "\n") + "class Taco extends com.taco.bell.A {\n") + "  A a;\n") + "}\n")));
    }
}

