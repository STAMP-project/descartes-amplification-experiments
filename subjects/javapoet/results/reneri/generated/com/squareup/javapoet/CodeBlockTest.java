/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public final class CodeBlockTest {
    @org.junit.Test
    public void equalsAndHashCode() {
        com.squareup.javapoet.CodeBlock a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|1", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).build());
        com.squareup.javapoet.CodeBlock b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|2", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|7", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|4", com.squareup.javapoet.CodeBlock.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|5", com.squareup.javapoet.CodeBlock.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|10", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|8", com.squareup.javapoet.CodeBlock.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|11", com.squareup.javapoet.CodeBlock.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|15", com.squareup.javapoet.CodeBlock.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|14", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|13", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$L", "taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|18", com.squareup.javapoet.CodeBlock.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|17", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|16", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$L", "taco")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|22", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|19", com.squareup.javapoet.CodeBlock.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|20", com.squareup.javapoet.CodeBlock.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|25", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|23", com.squareup.javapoet.CodeBlock.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|equalsAndHashCode()|26", com.squareup.javapoet.CodeBlock.class, b).hashCode()));
    }

    @org.junit.Test
    public void of() {
        com.squareup.javapoet.CodeBlock a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|of()|0", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$L taco", "delicious"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|of()|3", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|of()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|of()|1", com.squareup.javapoet.CodeBlock.class, a).toString()))).isEqualTo("delicious taco");
    }

    @org.junit.Test
    public void isEmpty() {
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|isEmpty()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|isEmpty()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).isEmpty()));
        org.junit.Assert.assertTrue(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|isEmpty()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|isEmpty()|3", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|isEmpty()|2", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("")).isEmpty()));
        org.junit.Assert.assertFalse(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|isEmpty()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|isEmpty()|6", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|isEmpty()|5", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add(" ")).isEmpty()));
    }

    @org.junit.Test
    public void indentCannotBeIndexed() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|indentCannotBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indentCannotBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indentCannotBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1>", "taco")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException exp) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|indentCannotBeIndexed()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|indentCannotBeIndexed()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|indentCannotBeIndexed()|3", java.lang.IllegalArgumentException.class, exp))).hasMessageThat()).isEqualTo("$$, $>, $<, $[, $], $W, and $Z may not have an index");
        }
    }

    @org.junit.Test
    public void deindentCannotBeIndexed() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|deindentCannotBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|deindentCannotBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|deindentCannotBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1<", "taco")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException exp) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|deindentCannotBeIndexed()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|deindentCannotBeIndexed()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|deindentCannotBeIndexed()|3", java.lang.IllegalArgumentException.class, exp))).hasMessageThat()).isEqualTo("$$, $>, $<, $[, $], $W, and $Z may not have an index");
        }
    }

    @org.junit.Test
    public void dollarSignEscapeCannotBeIndexed() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|dollarSignEscapeCannotBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|dollarSignEscapeCannotBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|dollarSignEscapeCannotBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1$", "taco")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException exp) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|dollarSignEscapeCannotBeIndexed()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|dollarSignEscapeCannotBeIndexed()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|dollarSignEscapeCannotBeIndexed()|3", java.lang.IllegalArgumentException.class, exp))).hasMessageThat()).isEqualTo("$$, $>, $<, $[, $], $W, and $Z may not have an index");
        }
    }

    @org.junit.Test
    public void statementBeginningCannotBeIndexed() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|statementBeginningCannotBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|statementBeginningCannotBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|statementBeginningCannotBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1[", "taco")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException exp) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|statementBeginningCannotBeIndexed()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|statementBeginningCannotBeIndexed()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|statementBeginningCannotBeIndexed()|3", java.lang.IllegalArgumentException.class, exp))).hasMessageThat()).isEqualTo("$$, $>, $<, $[, $], $W, and $Z may not have an index");
        }
    }

    @org.junit.Test
    public void statementEndingCannotBeIndexed() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|statementEndingCannotBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|statementEndingCannotBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|statementEndingCannotBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1]", "taco")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException exp) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|statementEndingCannotBeIndexed()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|statementEndingCannotBeIndexed()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|statementEndingCannotBeIndexed()|3", java.lang.IllegalArgumentException.class, exp))).hasMessageThat()).isEqualTo("$$, $>, $<, $[, $], $W, and $Z may not have an index");
        }
    }

    @org.junit.Test
    public void nameFormatCanBeIndexed() {
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|nameFormatCanBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|nameFormatCanBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|nameFormatCanBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1N", "taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|nameFormatCanBeIndexed()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|nameFormatCanBeIndexed()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|nameFormatCanBeIndexed()|3", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("taco");
    }

    @org.junit.Test
    public void literalFormatCanBeIndexed() {
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|literalFormatCanBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|literalFormatCanBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|literalFormatCanBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1L", "taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|literalFormatCanBeIndexed()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|literalFormatCanBeIndexed()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|literalFormatCanBeIndexed()|3", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("taco");
    }

    @org.junit.Test
    public void stringFormatCanBeIndexed() {
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|stringFormatCanBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|stringFormatCanBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|stringFormatCanBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1S", "taco")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|stringFormatCanBeIndexed()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|stringFormatCanBeIndexed()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|stringFormatCanBeIndexed()|3", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("\"taco\"");
    }

    @org.junit.Test
    public void typeFormatCanBeIndexed() {
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|typeFormatCanBeIndexed()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|typeFormatCanBeIndexed()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|typeFormatCanBeIndexed()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1T", java.lang.String.class)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|typeFormatCanBeIndexed()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|typeFormatCanBeIndexed()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|typeFormatCanBeIndexed()|3", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("java.lang.String");
    }

    @org.junit.Test
    public void simpleNamedArgument() {
        java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|simpleNamedArgument()|0", java.lang.Object.class, map.put("text", "taco"));
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|simpleNamedArgument()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|simpleNamedArgument()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|simpleNamedArgument()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("$text:S", map)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|simpleNamedArgument()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|simpleNamedArgument()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|simpleNamedArgument()|4", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("\"taco\"");
    }

    @org.junit.Test
    public void repeatedNamedArgument() {
        java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|repeatedNamedArgument()|0", java.lang.Object.class, map.put("text", "tacos"));
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|repeatedNamedArgument()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|repeatedNamedArgument()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|repeatedNamedArgument()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\"", map)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|repeatedNamedArgument()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|repeatedNamedArgument()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|repeatedNamedArgument()|4", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("\"I like \" + \"tacos\" + \". Do you like \" + \"tacos\" + \"?\"");
    }

    @org.junit.Test
    public void namedAndNoArgFormat() {
        java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|namedAndNoArgFormat()|0", java.lang.Object.class, map.put("text", "tacos"));
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|namedAndNoArgFormat()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|namedAndNoArgFormat()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|namedAndNoArgFormat()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("$>\n$text:L for $$3.50", map)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|namedAndNoArgFormat()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|namedAndNoArgFormat()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|namedAndNoArgFormat()|4", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("\n  tacos for $3.50");
    }

    @org.junit.Test
    public void missingNamedArgument() {
        try {
            java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|missingNamedArgument()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|missingNamedArgument()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|missingNamedArgument()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("$text:S", map)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|missingNamedArgument()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|missingNamedArgument()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|missingNamedArgument()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("Missing named argument for $text");
        }
    }

    @org.junit.Test
    public void lowerCaseNamed() {
        try {
            java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
            eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|lowerCaseNamed()|0", java.lang.Object.class, map.put("Text", "tacos"));
            com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|lowerCaseNamed()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|lowerCaseNamed()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|lowerCaseNamed()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("$Text:S", map)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|lowerCaseNamed()|6", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|lowerCaseNamed()|5", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|lowerCaseNamed()|4", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("argument 'Text' must start with a lowercase character");
        }
    }

    @org.junit.Test
    public void multipleNamedArguments() {
        java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|0", java.lang.Object.class, map.put("pipe", java.lang.System.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|1", java.lang.Object.class, map.put("text", "tacos"));
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|4", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|3", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|2", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("$pipe:T.out.println(\"Let\'s eat some $text:L\");", map)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|7", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|multipleNamedArguments()|5", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("java.lang.System.out.println(\"Let\'s eat some tacos\");");
    }

    @org.junit.Test
    public void namedNewline() {
        java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|namedNewline()|0", java.lang.Object.class, map.put("clazz", java.lang.Integer.class));
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|namedNewline()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|namedNewline()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|namedNewline()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("$clazz:T\n", map)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|namedNewline()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|namedNewline()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|namedNewline()|4", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("java.lang.Integer\n");
    }

    @org.junit.Test
    public void danglingNamed() {
        java.util.Map<java.lang.String, java.lang.Object> map = new java.util.LinkedHashMap<>();
        eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.CodeBlockTest|danglingNamed()|0", java.lang.Object.class, map.put("clazz", java.lang.Integer.class));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|danglingNamed()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|danglingNamed()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|danglingNamed()|1", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).addNamed("$clazz:T$", map)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|danglingNamed()|6", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|danglingNamed()|5", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|danglingNamed()|4", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("dangling $ at end");
        }
    }

    @org.junit.Test
    public void indexTooHigh() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|indexTooHigh()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexTooHigh()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexTooHigh()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$2T", java.lang.String.class)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexTooHigh()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexTooHigh()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|indexTooHigh()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("index 2 for '$2T' not in range (received 1 arguments)");
        }
    }

    @org.junit.Test
    public void indexIsZero() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|indexIsZero()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexIsZero()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexIsZero()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$0T", java.lang.String.class)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexIsZero()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexIsZero()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|indexIsZero()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("index 0 for '$0T' not in range (received 1 arguments)");
        }
    }

    @org.junit.Test
    public void indexIsNegative() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|indexIsNegative()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexIsNegative()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexIsNegative()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$-1T", java.lang.String.class)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexIsNegative()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexIsNegative()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|indexIsNegative()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("invalid format string: '$-1T'");
        }
    }

    @org.junit.Test
    public void indexWithoutFormatType() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatType()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatType()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatType()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1", java.lang.String.class)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatType()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatType()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatType()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("dangling format characters in '$1'");
        }
    }

    @org.junit.Test
    public void indexWithoutFormatTypeNotAtStringEnd() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatTypeNotAtStringEnd()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatTypeNotAtStringEnd()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatTypeNotAtStringEnd()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1 taco", java.lang.String.class)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatTypeNotAtStringEnd()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatTypeNotAtStringEnd()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|indexWithoutFormatTypeNotAtStringEnd()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("invalid format string: '$1 taco'");
        }
    }

    @org.junit.Test
    public void indexButNoArguments() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|indexButNoArguments()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexButNoArguments()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|indexButNoArguments()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1T")).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexButNoArguments()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|indexButNoArguments()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|indexButNoArguments()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("index 1 for '$1T' not in range (received 0 arguments)");
        }
    }

    @org.junit.Test
    public void formatIndicatorAlone() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorAlone()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorAlone()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorAlone()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$", java.lang.String.class)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorAlone()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorAlone()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorAlone()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("dangling format characters in '$'");
        }
    }

    @org.junit.Test
    public void formatIndicatorWithoutIndexOrFormatType() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorWithoutIndexOrFormatType()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorWithoutIndexOrFormatType()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorWithoutIndexOrFormatType()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$ tacoString", java.lang.String.class)).build());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorWithoutIndexOrFormatType()|5", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorWithoutIndexOrFormatType()|4", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.CodeBlockTest|formatIndicatorWithoutIndexOrFormatType()|3", java.lang.IllegalArgumentException.class, expected))).hasMessageThat()).isEqualTo("invalid format string: '$ tacoString'");
        }
    }

    @org.junit.Test
    public void sameIndexCanBeUsedWithDifferentFormats() {
        com.squareup.javapoet.CodeBlock block = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|sameIndexCanBeUsedWithDifferentFormats()|3", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|sameIndexCanBeUsedWithDifferentFormats()|2", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|sameIndexCanBeUsedWithDifferentFormats()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$1T.out.println($1S)", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.CodeBlockTest|sameIndexCanBeUsedWithDifferentFormats()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.System.class)))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|sameIndexCanBeUsedWithDifferentFormats()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|sameIndexCanBeUsedWithDifferentFormats()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|sameIndexCanBeUsedWithDifferentFormats()|4", com.squareup.javapoet.CodeBlock.class, block).toString()))).isEqualTo("java.lang.System.out.println(\"java.lang.System\")");
    }

    @org.junit.Test
    public void tooManyStatementEnters() {
        com.squareup.javapoet.CodeBlock codeBlock = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$[$[")).build());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|4", // We can't report this error until rendering type because code blocks might be composed.
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|3", com.squareup.javapoet.CodeBlock.class, codeBlock).toString());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|7", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|6", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalStateException>observeState("com.squareup.javapoet.CodeBlockTest|tooManyStatementEnters()|5", java.lang.IllegalStateException.class, expected))).hasMessageThat()).isEqualTo("statement enter $[ followed by statement enter $[");
        }
    }

    @org.junit.Test
    public void statementExitWithoutStatementEnter() {
        com.squareup.javapoet.CodeBlock codeBlock = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|2", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|1", com.squareup.javapoet.CodeBlock.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock.Builder>observeState("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|0", com.squareup.javapoet.CodeBlock.Builder.class, com.squareup.javapoet.CodeBlock.builder()).add("$]")).build());
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|4", // We can't report this error until rendering type because code blocks might be composed.
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|3", com.squareup.javapoet.CodeBlock.class, codeBlock).toString());
            org.junit.Assert.fail();
        } catch (java.lang.IllegalStateException expected) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|7", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|6", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalStateException>observeState("com.squareup.javapoet.CodeBlockTest|statementExitWithoutStatementEnter()|5", java.lang.IllegalStateException.class, expected))).hasMessageThat()).isEqualTo("statement exit $] has no matching statement enter $[");
        }
    }

    @org.junit.Test
    public void join() {
        java.util.List<com.squareup.javapoet.CodeBlock> codeBlocks = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|join()|0", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|join()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|join()|1", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|join()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$S", "hello"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|join()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|join()|4", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|join()|6", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.CodeBlockTest|join()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("world", "World"))))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|join()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|join()|8", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|join()|9", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("need tacos"))));
        com.squareup.javapoet.CodeBlock joined = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|join()|12", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.join(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|join()|11", java.util.List.class, codeBlocks), " || "));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|join()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|join()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|join()|13", com.squareup.javapoet.CodeBlock.class, joined).toString()))).isEqualTo("\"hello\" || world.World || need tacos");
    }

    @org.junit.Test
    public void joining() {
        java.util.List<com.squareup.javapoet.CodeBlock> codeBlocks = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joining()|0", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joining()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joining()|1", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joining()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$S", "hello"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joining()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joining()|4", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joining()|6", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.CodeBlockTest|joining()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("world", "World"))))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joining()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joining()|8", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joining()|9", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("need tacos"))));
        com.squareup.javapoet.CodeBlock joined = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joining()|13", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.stream.Stream<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joining()|12", java.util.stream.Stream.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joining()|11", java.util.List.class, codeBlocks).stream()).collect(com.squareup.javapoet.CodeBlock.joining(" || ")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|joining()|16", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joining()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joining()|14", com.squareup.javapoet.CodeBlock.class, joined).toString()))).isEqualTo("\"hello\" || world.World || need tacos");
    }

    @org.junit.Test
    public void joiningSingle() {
        java.util.List<com.squareup.javapoet.CodeBlock> codeBlocks = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|0", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joiningSingle()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|1", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$S", "hello"))));
        com.squareup.javapoet.CodeBlock joined = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|6", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.stream.Stream<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|5", java.util.stream.Stream.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|4", java.util.List.class, codeBlocks).stream()).collect(com.squareup.javapoet.CodeBlock.joining(" || ")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joiningSingle()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningSingle()|7", com.squareup.javapoet.CodeBlock.class, joined).toString()))).isEqualTo("\"hello\"");
    }

    @org.junit.Test
    public void joiningWithPrefixAndSuffix() {
        java.util.List<com.squareup.javapoet.CodeBlock> codeBlocks = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|0", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|1", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|2", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$S", "hello"))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|4", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|6", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("$T", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("world", "World"))))));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|10", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|8", java.util.List.class, codeBlocks).add(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|9", com.squareup.javapoet.CodeBlock.class, com.squareup.javapoet.CodeBlock.of("need tacos"))));
        com.squareup.javapoet.CodeBlock joined = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|13", com.squareup.javapoet.CodeBlock.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.stream.Stream<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|12", java.util.stream.Stream.class, eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<com.squareup.javapoet.CodeBlock>>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|11", java.util.List.class, codeBlocks).stream()).collect(com.squareup.javapoet.CodeBlock.joining(" || ", "start {", "} end")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|16", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.CodeBlock>observeState("com.squareup.javapoet.CodeBlockTest|joiningWithPrefixAndSuffix()|14", com.squareup.javapoet.CodeBlock.class, joined).toString()))).isEqualTo("start {\"hello\" || world.World || need tacos} end");
    }
}

