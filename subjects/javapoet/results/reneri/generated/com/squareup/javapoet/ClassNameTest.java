/**
 * Copyright (C) 2014 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


@org.junit.runner.RunWith(org.junit.runners.JUnit4.class)
public final class ClassNameTest {
    @org.junit.Rule
    public com.google.testing.compile.CompilationRule compilationRule = new com.google.testing.compile.CompilationRule();

    @org.junit.Test
    public void bestGuessForString_simpleClass() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_simpleClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|bestGuessForString_simpleClass()|0", java.lang.String.class.getName())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_simpleClass()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.lang", "String")));
    }

    @org.junit.Test
    public void bestGuessNonAscii() {
        com.squareup.javapoet.ClassName className = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessNonAscii()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess("com.\ud835\udc1andro\ud835\udc22d.\ud835\udc00ctiv\ud835\udc22ty"));
        org.junit.Assert.assertEquals("com.\ud835\udc1andro\ud835\udc22d", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|bestGuessNonAscii()|2", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessNonAscii()|1", com.squareup.javapoet.ClassName.class, className).packageName()));
        org.junit.Assert.assertEquals("\ud835\udc00ctiv\ud835\udc22ty", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|bestGuessNonAscii()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessNonAscii()|3", com.squareup.javapoet.ClassName.class, className).simpleName()));
    }

    static class OuterClass {
        static class InnerClass {}
    }

    @org.junit.Test
    public void bestGuessForString_nestedClass() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_nestedClass()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|bestGuessForString_nestedClass()|0", java.util.Map.Entry.class.getCanonicalName())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_nestedClass()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("java.util", "Map", "Entry")));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_nestedClass()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|bestGuessForString_nestedClass()|3", com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass.class.getCanonicalName())))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_nestedClass()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.squareup.javapoet", "ClassNameTest", "OuterClass", "InnerClass")));
    }

    @org.junit.Test
    public void bestGuessForString_defaultPackage() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_defaultPackage()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess("SomeClass"))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_defaultPackage()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "SomeClass")));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_defaultPackage()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess("SomeClass.Nested"))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_defaultPackage()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "SomeClass", "Nested")));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_defaultPackage()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess("SomeClass.Nested.EvenMore"))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|bestGuessForString_defaultPackage()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "SomeClass", "Nested", "EvenMore")));
    }

    @org.junit.Test
    public void bestGuessForString_confusingInput() {
        assertBestGuessThrows("");
        assertBestGuessThrows(".");
        assertBestGuessThrows(".Map");
        assertBestGuessThrows("java");
        assertBestGuessThrows("java.util");
        assertBestGuessThrows("java.util.");
        assertBestGuessThrows("java..util.Map.Entry");
        assertBestGuessThrows("java.util..Map.Entry");
        assertBestGuessThrows("java.util.Map..Entry");
        assertBestGuessThrows("com.test.$");
        assertBestGuessThrows("com.test.LooksLikeAClass.pkg");
        assertBestGuessThrows("!@#$gibberish%^&*");
    }

    private void assertBestGuessThrows(java.lang.String s) {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|assertBestGuessThrows(java.lang.String)|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.bestGuess(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|assertBestGuessThrows(java.lang.String)|0", s)));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    @org.junit.Test
    public void createNestedClass() {
        com.squareup.javapoet.ClassName foo = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.example", "Foo"));
        com.squareup.javapoet.ClassName bar = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|2", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|1", com.squareup.javapoet.ClassName.class, foo).nestedClass("Bar"));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|3", com.squareup.javapoet.ClassName.class, bar)).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.example", "Foo", "Bar")));
        com.squareup.javapoet.ClassName baz = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|6", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|5", com.squareup.javapoet.ClassName.class, bar).nestedClass("Baz"));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|7", com.squareup.javapoet.ClassName.class, baz)).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|createNestedClass()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("com.example", "Foo", "Bar", "Baz")));
    }

    static class $Outer {
        static class $Inner {}
    }

    @org.junit.Test
    public void classNameFromTypeElement() {
        javax.lang.model.util.Elements elements = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|1", javax.lang.model.util.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|0", com.google.testing.compile.CompilationRule.class, compilationRule).getElements());
        javax.lang.model.element.TypeElement object = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|4", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|2", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|3", java.lang.Object.class.getCanonicalName())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|5", javax.lang.model.element.TypeElement.class, object))).toString()))).isEqualTo("java.lang.Object");
        javax.lang.model.element.TypeElement outer = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|11", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|9", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|10", com.squareup.javapoet.ClassNameTest.$Outer.class.getCanonicalName())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|13", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|12", javax.lang.model.element.TypeElement.class, outer))).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer");
        javax.lang.model.element.TypeElement inner = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|18", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|16", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|17", com.squareup.javapoet.ClassNameTest.$Outer.$Inner.class.getCanonicalName())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|22", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|20", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElement()|19", javax.lang.model.element.TypeElement.class, inner))).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");
    }

    /**
     * Buck builds with "source-based ABI generation" and those builds don't support
     * {@link TypeElement#getKind()}. Test to confirm that we don't use that API.
     */
    @org.junit.Test
    public void classNameFromTypeElementDoesntUseGetKind() {
        javax.lang.model.util.Elements elements = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|1", javax.lang.model.util.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|0", com.google.testing.compile.CompilationRule.class, compilationRule).getElements());
        javax.lang.model.element.TypeElement object = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|4", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|2", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|3", java.lang.Object.class.getCanonicalName())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|6", javax.lang.model.element.TypeElement.class, preventGetKind(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|5", javax.lang.model.element.TypeElement.class, object))))).toString()))).isEqualTo("java.lang.Object");
        javax.lang.model.element.TypeElement outer = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|12", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|10", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|11", com.squareup.javapoet.ClassNameTest.$Outer.class.getCanonicalName())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|17", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|16", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|15", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|14", javax.lang.model.element.TypeElement.class, preventGetKind(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|13", javax.lang.model.element.TypeElement.class, outer))))).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer");
        javax.lang.model.element.TypeElement inner = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|20", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|18", javax.lang.model.util.Elements.class, elements).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|19", com.squareup.javapoet.ClassNameTest.$Outer.$Inner.class.getCanonicalName())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|25", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|23", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|22", javax.lang.model.element.TypeElement.class, preventGetKind(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|classNameFromTypeElementDoesntUseGetKind()|21", javax.lang.model.element.TypeElement.class, inner))))).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");
    }

    /**
     * Returns a new instance like {@code object} that throws on {@code getKind()}.
     */
    private javax.lang.model.element.TypeElement preventGetKind(javax.lang.model.element.TypeElement object) {
        javax.lang.model.element.TypeElement spy = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|1", javax.lang.model.element.TypeElement.class, org.mockito.Mockito.spy(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|0", javax.lang.model.element.TypeElement.class, object)));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<javax.lang.model.element.ElementKind>>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|6", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<javax.lang.model.element.ElementKind>>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|4", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.ElementKind>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|3", javax.lang.model.element.ElementKind.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|2", javax.lang.model.element.TypeElement.class, spy).getKind()))).thenThrow(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.AssertionError>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|5", java.lang.AssertionError.class, new java.lang.AssertionError())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<javax.lang.model.element.Element>>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|17", org.mockito.stubbing.OngoingStubbing.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.stubbing.OngoingStubbing<javax.lang.model.element.Element>>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|9", org.mockito.stubbing.OngoingStubbing.class, org.mockito.Mockito.when(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Element>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|8", javax.lang.model.element.Element.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|7", javax.lang.model.element.TypeElement.class, spy).getEnclosingElement()))).thenAnswer(( invocation) -> {
            java.lang.Object enclosingElement = eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|11", java.lang.Object.class, eu.stamp_project.reneri.instrumentation.StateObserver.<org.mockito.invocation.InvocationOnMock>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|10", org.mockito.invocation.InvocationOnMock.class, invocation).callRealMethod());
            return eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|16", java.lang.Object.class, ((eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|12", java.lang.Object.class, enclosingElement)) instanceof javax.lang.model.element.TypeElement ? eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|14", javax.lang.model.element.TypeElement.class, preventGetKind(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|13", javax.lang.model.element.TypeElement.class, ((javax.lang.model.element.TypeElement) (enclosingElement))))) : eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|15", java.lang.Object.class, enclosingElement)));
        }));
        return eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.ClassNameTest|preventGetKind(javax.lang.model.element.TypeElement)|18", javax.lang.model.element.TypeElement.class, spy);
    }

    @org.junit.Test
    public void classNameFromClass() {
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|2", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromClass()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object.class)).toString()))).isEqualTo("java.lang.Object");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|5", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromClass()|4", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass.class)).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromClass()|8", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|7", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(new java.lang.Object() {}.getClass())).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest$1");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromClass()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|13", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Object>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|12", java.lang.Object.class, new java.lang.Object() {
            java.lang.Object inner = new java.lang.Object() {};
        }.inner).getClass())).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest$2$1");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|18", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromClass()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|16", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(com.squareup.javapoet.ClassNameTest.$Outer.class)).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer");
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|21", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|classNameFromClass()|20", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|classNameFromClass()|19", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(com.squareup.javapoet.ClassNameTest.$Outer.$Inner.class)).toString()))).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");
    }

    @org.junit.Test
    public void peerClass() {
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|1", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Double.class)).peerClass("Short"))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Short.class)));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|4", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|3", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Double")).peerClass("Short"))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|5", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Short")));
        com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|7", com.squareup.javapoet.ClassName.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("a.b", "Combo", "Taco")).peerClass("Burrito"))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|peerClass()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("a.b", "Combo", "Burrito")));
    }

    @org.junit.Test
    public void fromClassRejectionTypes() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|fromClassRejectionTypes()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(int.class));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException ignored) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|fromClassRejectionTypes()|1", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(void.class));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException ignored) {
        }
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|fromClassRejectionTypes()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Object[].class));
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException ignored) {
        }
    }

    @org.junit.Test
    public void reflectionName() {
        org.junit.Assert.assertEquals("java.lang.Object", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|reflectionName()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|reflectionName()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.TypeName.OBJECT).reflectionName()));
        org.junit.Assert.assertEquals("java.lang.Thread$State", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|reflectionName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|reflectionName()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Thread.State.class)).reflectionName()));
        org.junit.Assert.assertEquals("java.util.Map$Entry", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|reflectionName()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|reflectionName()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.Map.Entry.class)).reflectionName()));
        org.junit.Assert.assertEquals("Foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|reflectionName()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|reflectionName()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Foo")).reflectionName()));
        org.junit.Assert.assertEquals("Foo$Bar$Baz", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|reflectionName()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|reflectionName()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Foo", "Bar", "Baz")).reflectionName()));
        org.junit.Assert.assertEquals("a.b.c.Foo$Bar$Baz", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|reflectionName()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|reflectionName()|10", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("a.b.c", "Foo", "Bar", "Baz")).reflectionName()));
    }

    @org.junit.Test
    public void canonicalName() {
        org.junit.Assert.assertEquals("java.lang.Object", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|canonicalName()|1", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|canonicalName()|0", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.TypeName.OBJECT).canonicalName()));
        org.junit.Assert.assertEquals("java.lang.Thread.State", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|canonicalName()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|canonicalName()|2", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.lang.Thread.State.class)).canonicalName()));
        org.junit.Assert.assertEquals("java.util.Map.Entry", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|canonicalName()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|canonicalName()|4", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get(java.util.Map.Entry.class)).canonicalName()));
        org.junit.Assert.assertEquals("Foo", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|canonicalName()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|canonicalName()|6", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Foo")).canonicalName()));
        org.junit.Assert.assertEquals("Foo.Bar.Baz", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|canonicalName()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|canonicalName()|8", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("", "Foo", "Bar", "Baz")).canonicalName()));
        org.junit.Assert.assertEquals("a.b.c.Foo.Bar.Baz", eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ClassNameTest|canonicalName()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ClassName>observeState("com.squareup.javapoet.ClassNameTest|canonicalName()|10", com.squareup.javapoet.ClassName.class, com.squareup.javapoet.ClassName.get("a.b.c", "Foo", "Bar", "Baz")).canonicalName()));
    }
}

