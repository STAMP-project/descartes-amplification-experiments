/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public final class AnnotationSpecTest {
    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
    public @interface AnnotationA {}

    @java.lang.annotation.Inherited
    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
    public @interface AnnotationB {}

    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
    public @interface AnnotationC {
        java.lang.String value();
    }

    public enum Breakfast {

        WAFFLES,
        PANCAKES;
        public java.lang.String toString() {
            return (name()) + " with cherries!";
        }
    }

    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
    public @interface HasDefaultsAnnotation {
        byte a() default 5;

        short b() default 6;

        int c() default 7;

        long d() default 8;

        float e() default 9.0F;

        double f() default 10.0;

        char[] g() default { 0, 51966, 'z', '€', 'ℕ', '"', '\'', '\t', '\n' };

        boolean h() default true;

        com.squareup.javapoet.AnnotationSpecTest.Breakfast i() default com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES;

        com.squareup.javapoet.AnnotationSpecTest.AnnotationA j() default @com.squareup.javapoet.AnnotationSpecTest.AnnotationA;

        java.lang.String k() default "maple";

        java.lang.Class<? extends java.lang.annotation.Annotation> l() default com.squareup.javapoet.AnnotationSpecTest.AnnotationB.class;

        int[] m() default { 1, 2, 3 };

        com.squareup.javapoet.AnnotationSpecTest.Breakfast[] n() default { com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES, com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES };

        com.squareup.javapoet.AnnotationSpecTest.Breakfast o();

        int p();

        com.squareup.javapoet.AnnotationSpecTest.AnnotationC q() default @com.squareup.javapoet.AnnotationSpecTest.AnnotationC("foo");

        java.lang.Class<? extends java.lang.Number>[] r() default { java.lang.Byte.class, java.lang.Short.class, java.lang.Integer.class, java.lang.Long.class };
    }

    // empty
    @com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES, p = 1701, f = 11.1, m = { 9, 8, 1 }, l = java.lang.Override.class, j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA, q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC("bar"), r = { java.lang.Float.class, java.lang.Double.class })
    public class IsAnnotated {}

    @org.junit.Rule
    public final com.google.testing.compile.CompilationRule compilation = new com.google.testing.compile.CompilationRule();

    @org.junit.Test
    public void equalsAndHashCode() {
        com.squareup.javapoet.AnnotationSpec a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|1", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|0", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.AnnotationC.class)).build());
        com.squareup.javapoet.AnnotationSpec b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|3", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|2", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.AnnotationC.class)).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|7", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|4", com.squareup.javapoet.AnnotationSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|5", com.squareup.javapoet.AnnotationSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|10", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|8", com.squareup.javapoet.AnnotationSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|11", com.squareup.javapoet.AnnotationSpec.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|15", com.squareup.javapoet.AnnotationSpec.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|14", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|13", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.AnnotationC.class)).addMember("value", "$S", "123")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|18", com.squareup.javapoet.AnnotationSpec.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|17", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|16", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.AnnotationC.class)).addMember("value", "$S", "123")).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|22", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|21", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|19", com.squareup.javapoet.AnnotationSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|20", com.squareup.javapoet.AnnotationSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|25", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|24", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|23", com.squareup.javapoet.AnnotationSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|27", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|equalsAndHashCode()|26", com.squareup.javapoet.AnnotationSpec.class, b).hashCode()));
    }

    @org.junit.Test
    public void defaultAnnotation() {
        java.lang.String name = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|0", com.squareup.javapoet.AnnotationSpecTest.IsAnnotated.class.getCanonicalName());
        javax.lang.model.element.TypeElement element = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|4", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|2", javax.lang.model.util.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|1", com.google.testing.compile.CompilationRule.class, compilation).getElements()).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|3", name)));
        com.squareup.javapoet.AnnotationSpec annotation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|6", com.squareup.javapoet.AnnotationSpec.class, com.squareup.javapoet.AnnotationSpec.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|5", javax.lang.model.element.TypeElement.class, element).getAnnotationMirrors().get(0)));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|10", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|9", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|7", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|8", com.squareup.javapoet.AnnotationSpec.class, annotation))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|12", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotation()|11", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + ((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import com.squareup.javapoet.AnnotationSpecTest;\n") + "import java.lang.Double;\n") + "import java.lang.Float;\n") + "import java.lang.Override;\n") + "\n") + "@AnnotationSpecTest.HasDefaultsAnnotation(\n") + "    o = AnnotationSpecTest.Breakfast.PANCAKES,\n") + "    p = 1701,\n") + "    f = 11.1,\n") + "    m = {\n") + "        9,\n") + "        8,\n") + "        1\n") + "    },\n") + "    l = Override.class,\n") + "    j = @AnnotationSpecTest.AnnotationA,\n") + "    q = @AnnotationSpecTest.AnnotationC(\"bar\"),\n") + "    r = {\n") + "        Float.class,\n") + "        Double.class\n") + "    }\n") + ")\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void defaultAnnotationWithImport() {
        java.lang.String name = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|0", com.squareup.javapoet.AnnotationSpecTest.IsAnnotated.class.getCanonicalName());
        javax.lang.model.element.TypeElement element = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|4", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|2", javax.lang.model.util.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|1", com.google.testing.compile.CompilationRule.class, compilation).getElements()).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|3", name)));
        com.squareup.javapoet.AnnotationSpec annotation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|6", com.squareup.javapoet.AnnotationSpec.class, com.squareup.javapoet.AnnotationSpec.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|5", javax.lang.model.element.TypeElement.class, element).getAnnotationMirrors().get(0)));
        com.squareup.javapoet.TypeSpec.Builder typeBuilder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|8", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|7", com.squareup.javapoet.AnnotationSpecTest.IsAnnotated.class.getSimpleName())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|11", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|9", com.squareup.javapoet.TypeSpec.Builder.class, typeBuilder).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|10", com.squareup.javapoet.AnnotationSpec.class, annotation)));
        com.squareup.javapoet.JavaFile file = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|15", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|14", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.javapoet", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|13", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|12", com.squareup.javapoet.TypeSpec.Builder.class, typeBuilder).build()))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|18", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationWithImport()|16", com.squareup.javapoet.JavaFile.class, file).toString()))).isEqualTo(("package com.squareup.javapoet;\n" + ((((((((((((((((((((((("\n" + "import java.lang.Double;\n") + "import java.lang.Float;\n") + "import java.lang.Override;\n") + "\n") + "@AnnotationSpecTest.HasDefaultsAnnotation(\n") + "    o = AnnotationSpecTest.Breakfast.PANCAKES,\n") + "    p = 1701,\n") + "    f = 11.1,\n") + "    m = {\n") + "        9,\n") + "        8,\n") + "        1\n") + "    },\n") + "    l = Override.class,\n") + "    j = @AnnotationSpecTest.AnnotationA,\n") + "    q = @AnnotationSpecTest.AnnotationC(\"bar\"),\n") + "    r = {\n") + "        Float.class,\n") + "        Double.class\n") + "    }\n") + ")\n") + "class IsAnnotated {\n") + "}\n")));
    }

    @org.junit.Test
    public void emptyArray() {
        com.squareup.javapoet.AnnotationSpec.Builder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|0", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|2", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|1", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("n", "$L", "{}"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|6", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|4", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|3", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toString()))).isEqualTo(("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + ("n = {}" + ")")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|8", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|7", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("m", "$L", "{}"));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|10", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|emptyArray()|9", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toString()))).isEqualTo(("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + ("n = {}, m = {}" + ")")));
    }

    @org.junit.Test
    public void dynamicArrayOfEnumConstants() {
        com.squareup.javapoet.AnnotationSpec.Builder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|0", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|4", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|1", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("n", "$T.$L", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.Breakfast>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|2", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES).name())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|8", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|7", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|6", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|5", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toString()))).isEqualTo(("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + ("n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|12", com.squareup.javapoet.AnnotationSpec.Builder.class, // builder = AnnotationSpec.builder(HasDefaultsAnnotation.class);
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|9", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("n", "$T.$L", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.Breakfast>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|10", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES).name())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|16", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|13", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("n", "$T.$L", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|15", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.Breakfast>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|14", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES).name())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|20", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|19", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|18", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|17", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toString()))).isEqualTo(("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + (((("n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES") + ", com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES") + ", com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES") + "})")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|23", com.squareup.javapoet.AnnotationSpec.Builder.class, (builder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|22", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|21", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toBuilder())// idempotent
        );
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|27", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|26", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|25", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|24", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toString()))).isEqualTo(("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + (((("n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES") + ", com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES") + ", com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES") + "})")));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|31", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|28", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("n", "$T.$L", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|30", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.Breakfast>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|29", com.squareup.javapoet.AnnotationSpecTest.Breakfast.class, com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES).name())));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|35", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|33", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|dynamicArrayOfEnumConstants()|32", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toString()))).isEqualTo(("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + ((((("n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES") + ", com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES") + ", com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES") + ", com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES") + "})")));
    }

    @org.junit.Test
    public void defaultAnnotationToBuilder() {
        java.lang.String name = eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|0", com.squareup.javapoet.AnnotationSpecTest.IsAnnotated.class.getCanonicalName());
        javax.lang.model.element.TypeElement element = eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|4", javax.lang.model.element.TypeElement.class, eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.util.Elements>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|2", javax.lang.model.util.Elements.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.testing.compile.CompilationRule>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|1", com.google.testing.compile.CompilationRule.class, compilation).getElements()).getTypeElement(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|3", name)));
        com.squareup.javapoet.AnnotationSpec.Builder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|7", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|6", com.squareup.javapoet.AnnotationSpec.class, com.squareup.javapoet.AnnotationSpec.get(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.TypeElement>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|5", javax.lang.model.element.TypeElement.class, element).getAnnotationMirrors().get(0))).toBuilder());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|9", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|8", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("m", "$L", 123));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|13", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|11", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|defaultAnnotationToBuilder()|10", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).build()).toString()))).isEqualTo(("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + (((((((("o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ", p = 1701") + ", f = 11.1") + ", m = {9, 8, 1, 123}") + ", l = java.lang.Override.class") + ", j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA") + ", q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")") + ", r = {java.lang.Float.class, java.lang.Double.class}") + ")")));
    }

    @org.junit.Test
    public void reflectAnnotation() {
        com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation annotation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|0", com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class, com.squareup.javapoet.AnnotationSpecTest.IsAnnotated.class.getAnnotation(com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class));
        com.squareup.javapoet.AnnotationSpec spec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|2", com.squareup.javapoet.AnnotationSpec.class, com.squareup.javapoet.AnnotationSpec.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|1", com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class, annotation)));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|6", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|4", com.squareup.javapoet.AnnotationSpec.class, spec))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|8", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotation()|7", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import com.squareup.javapoet.AnnotationSpecTest;\n") + "import java.lang.Double;\n") + "import java.lang.Float;\n") + "import java.lang.Override;\n") + "\n") + "@AnnotationSpecTest.HasDefaultsAnnotation(\n") + "    f = 11.1,\n") + "    l = Override.class,\n") + "    m = {\n") + "        9,\n") + "        8,\n") + "        1\n") + "    },\n") + "    o = AnnotationSpecTest.Breakfast.PANCAKES,\n") + "    p = 1701,\n") + "    q = @AnnotationSpecTest.AnnotationC(\"bar\"),\n") + "    r = {\n") + "        Float.class,\n") + "        Double.class\n") + "    }\n") + ")\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void reflectAnnotationWithDefaults() {
        com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation annotation = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|0", com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class, com.squareup.javapoet.AnnotationSpecTest.IsAnnotated.class.getAnnotation(com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class));
        com.squareup.javapoet.AnnotationSpec spec = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|2", com.squareup.javapoet.AnnotationSpec.class, com.squareup.javapoet.AnnotationSpec.get(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|1", com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class, annotation), true));
        com.squareup.javapoet.TypeSpec taco = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|6", com.squareup.javapoet.TypeSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|5", com.squareup.javapoet.TypeSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|3", com.squareup.javapoet.TypeSpec.Builder.class, com.squareup.javapoet.TypeSpec.classBuilder("Taco")).addAnnotation(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|4", com.squareup.javapoet.AnnotationSpec.class, spec))).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|9", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|8", toString(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|reflectAnnotationWithDefaults()|7", com.squareup.javapoet.TypeSpec.class, taco))))).isEqualTo(("" + (((((((((((((((((((((((((((((((((((((((((((((((("package com.squareup.tacos;\n" + "\n") + "import com.squareup.javapoet.AnnotationSpecTest;\n") + "import java.lang.Double;\n") + "import java.lang.Float;\n") + "import java.lang.Override;\n") + "\n") + "@AnnotationSpecTest.HasDefaultsAnnotation(\n") + "    a = 5,\n") + "    b = 6,\n") + "    c = 7,\n") + "    d = 8,\n") + "    e = 9.0f,\n") + "    f = 11.1,\n") + "    g = {\n") + "        \'\\u0000\',\n") + "        \'\ucafe\',\n") + "        \'z\',\n") + "        \'\u20ac\',\n") + "        \'\u2115\',\n") + "        \'\"\',\n") + "        \'\\\'\',\n") + "        \'\\t\',\n") + "        \'\\n\'\n") + "    },\n") + "    h = true,\n") + "    i = AnnotationSpecTest.Breakfast.WAFFLES,\n") + "    j = @AnnotationSpecTest.AnnotationA,\n") + "    k = \"maple\",\n") + "    l = Override.class,\n") + "    m = {\n") + "        9,\n") + "        8,\n") + "        1\n") + "    },\n") + "    n = {\n") + "        AnnotationSpecTest.Breakfast.WAFFLES,\n") + "        AnnotationSpecTest.Breakfast.PANCAKES\n") + "    },\n") + "    o = AnnotationSpecTest.Breakfast.PANCAKES,\n") + "    p = 1701,\n") + "    q = @AnnotationSpecTest.AnnotationC(\"bar\"),\n") + "    r = {\n") + "        Float.class,\n") + "        Double.class\n") + "    }\n") + ")\n") + "class Taco {\n") + "}\n")));
    }

    @org.junit.Test
    public void disallowsNullMemberName() {
        com.squareup.javapoet.AnnotationSpec.Builder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|0", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class));
        try {
            com.squareup.javapoet.AnnotationSpec.Builder $L = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|2", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|1", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember(null, "$L", ""));
            org.junit.Assert.fail(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|4", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|3", com.squareup.javapoet.AnnotationSpec.Builder.class, $L).build()).toString()));
        } catch (java.lang.NullPointerException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|8", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|7", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.NullPointerException>observeState("com.squareup.javapoet.AnnotationSpecTest|disallowsNullMemberName()|6", java.lang.NullPointerException.class, e))).hasMessageThat()).isEqualTo("name == null");
        }
    }

    @org.junit.Test
    public void requiresValidMemberName() {
        com.squareup.javapoet.AnnotationSpec.Builder builder = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|0", com.squareup.javapoet.AnnotationSpec.Builder.class, com.squareup.javapoet.AnnotationSpec.builder(com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation.class));
        try {
            com.squareup.javapoet.AnnotationSpec.Builder $L = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|2", com.squareup.javapoet.AnnotationSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|1", com.squareup.javapoet.AnnotationSpec.Builder.class, builder).addMember("@", "$L", ""));
            org.junit.Assert.fail(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|5", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|4", com.squareup.javapoet.AnnotationSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.AnnotationSpec.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|3", com.squareup.javapoet.AnnotationSpec.Builder.class, $L).build()).toString()));
        } catch (java.lang.IllegalArgumentException e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|8", com.google.common.truth.StringSubject.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.ThrowableSubject>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|7", com.google.common.truth.ThrowableSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.IllegalArgumentException>observeState("com.squareup.javapoet.AnnotationSpecTest|requiresValidMemberName()|6", java.lang.IllegalArgumentException.class, e))).hasMessageThat()).isEqualTo("not a valid name: @");
        }
    }

    private java.lang.String toString(com.squareup.javapoet.TypeSpec typeSpec) {
        return eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.AnnotationSpecTest|toString(com.squareup.javapoet.TypeSpec)|3", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile>observeState("com.squareup.javapoet.AnnotationSpecTest|toString(com.squareup.javapoet.TypeSpec)|2", com.squareup.javapoet.JavaFile.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.JavaFile.Builder>observeState("com.squareup.javapoet.AnnotationSpecTest|toString(com.squareup.javapoet.TypeSpec)|1", com.squareup.javapoet.JavaFile.Builder.class, com.squareup.javapoet.JavaFile.builder("com.squareup.tacos", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.TypeSpec>observeState("com.squareup.javapoet.AnnotationSpecTest|toString(com.squareup.javapoet.TypeSpec)|0", com.squareup.javapoet.TypeSpec.class, typeSpec))).build()).toString());
    }
}

