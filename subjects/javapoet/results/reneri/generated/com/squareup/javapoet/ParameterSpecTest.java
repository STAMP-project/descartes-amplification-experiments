/**
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.javapoet;


public class ParameterSpecTest {
    @org.junit.Test
    public void equalsAndHashCode() {
        com.squareup.javapoet.ParameterSpec a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|1", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|0", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(int.class, "foo")).build());
        com.squareup.javapoet.ParameterSpec b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|3", com.squareup.javapoet.ParameterSpec.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|2", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(int.class, "foo")).build());
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|7", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|4", com.squareup.javapoet.ParameterSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|5", com.squareup.javapoet.ParameterSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|10", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|9", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|8", com.squareup.javapoet.ParameterSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|12", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|11", com.squareup.javapoet.ParameterSpec.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|15", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|14", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|13", com.squareup.javapoet.ParameterSpec.class, a).toString()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|17", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|16", com.squareup.javapoet.ParameterSpec.class, b).toString()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|21", com.squareup.javapoet.ParameterSpec.class, (a = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|20", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|18", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(int.class, "i")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|19", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|25", com.squareup.javapoet.ParameterSpec.class, (b = eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|24", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|22", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(int.class, "i")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|23", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.STATIC))).build()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.BooleanSubject>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|29", com.google.common.truth.BooleanSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|28", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|26", com.squareup.javapoet.ParameterSpec.class, a).equals(eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|27", com.squareup.javapoet.ParameterSpec.class, b))))).isTrue();
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.IntegerSubject>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|32", com.google.common.truth.IntegerSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|31", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|30", com.squareup.javapoet.ParameterSpec.class, a).hashCode()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|34", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|33", com.squareup.javapoet.ParameterSpec.class, b).hashCode()));
        eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|37", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|36", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|35", com.squareup.javapoet.ParameterSpec.class, a).toString()))).isEqualTo(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|39", eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec>observeState("com.squareup.javapoet.ParameterSpecTest|equalsAndHashCode()|38", com.squareup.javapoet.ParameterSpec.class, b).toString()));
    }

    @org.junit.Test
    public void nullAnnotationsAddition() {
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|nullAnnotationsAddition()|1", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|nullAnnotationsAddition()|0", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(int.class, "foo")).addAnnotations(null));
            org.junit.Assert.fail();
        } catch (java.lang.Exception e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ParameterSpecTest|nullAnnotationsAddition()|4", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|nullAnnotationsAddition()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Exception>observeState("com.squareup.javapoet.ParameterSpecTest|nullAnnotationsAddition()|2", java.lang.Exception.class, e).getMessage()))).isEqualTo("annotationSpecs == null");
        }
    }

    @org.junit.Test
    public void addNonFinalModifier() {
        java.util.List<javax.lang.model.element.Modifier> modifiers = eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.ArrayList<javax.lang.model.element.Modifier>>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|0", java.util.ArrayList.class, new java.util.ArrayList<>());
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|3", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.Modifier>>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|1", java.util.List.class, modifiers).add(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|2", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.FINAL)));
        eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|6", eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.Modifier>>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|4", java.util.List.class, modifiers).add(eu.stamp_project.reneri.instrumentation.StateObserver.<javax.lang.model.element.Modifier>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|5", javax.lang.model.element.Modifier.class, javax.lang.model.element.Modifier.PUBLIC)));
        try {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|9", com.squareup.javapoet.ParameterSpec.Builder.class, eu.stamp_project.reneri.instrumentation.StateObserver.<com.squareup.javapoet.ParameterSpec.Builder>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|7", com.squareup.javapoet.ParameterSpec.Builder.class, com.squareup.javapoet.ParameterSpec.builder(int.class, "foo")).addModifiers(eu.stamp_project.reneri.instrumentation.StateObserver.<java.util.List<javax.lang.model.element.Modifier>>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|8", java.util.List.class, modifiers)));
            org.junit.Assert.fail();
        } catch (java.lang.Exception e) {
            eu.stamp_project.reneri.instrumentation.StateObserver.<com.google.common.truth.StringSubject>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|12", com.google.common.truth.StringSubject.class, com.google.common.truth.Truth.assertThat(eu.stamp_project.reneri.instrumentation.StateObserver.observe("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|11", eu.stamp_project.reneri.instrumentation.StateObserver.<java.lang.Exception>observeState("com.squareup.javapoet.ParameterSpecTest|addNonFinalModifier()|10", java.lang.Exception.class, e).getMessage()))).isEqualTo("unexpected parameter modifier: public");
        }
    }
}

