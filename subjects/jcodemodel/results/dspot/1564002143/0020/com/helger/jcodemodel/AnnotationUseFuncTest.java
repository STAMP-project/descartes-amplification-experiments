package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;


public final class AnnotationUseFuncTest {
    @interface XmlElement {
        String value();

        String ns();
    }

    interface XmlElementW extends IJAnnotationWriter<AnnotationUseFuncTest.XmlElement> {
        public abstract AnnotationUseFuncTest.XmlElementW value(String s);

        public abstract AnnotationUseFuncTest.XmlElementW ns(String s);
    }

    @Test(timeout = 10000)
    public void testMain() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain__21 = use.param("value", ec);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        JAnnotationUse o_testMain__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__33 = aUse.param("name", "book");
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        JAnnotationUse o_testMain__34 = aUse.param("targetNamespace", 5);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        JAnnotationUse o_testMain__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__59 = myuse.param("junk", 7);
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        JAnnotationUse o_testMain__60 = myuse.param("value-value");
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
    }

    @Test(timeout = 10000)
    public void testMain_rv716() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_523 = true;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv716__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv716__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv716__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv716__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv716__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv716__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv716__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv716__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv716__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv716__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv716__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv716__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv716__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv716__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv716__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv716__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv716__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv716__65 = __DSPOT_invoc_39.param(__DSPOT_bValue_523);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv716__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv716__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv716__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv716__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv716__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv716__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv716__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv716__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv779() throws JClassAlreadyExistsException {
        int __DSPOT_nValue_576 = 1549843906;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv779__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv779__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv779__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv779__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv779__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv779__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv779__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv779__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv779__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv779__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv779__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv779__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv779__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv779__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv779__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv779__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv779__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv779__65 = __DSPOT_invoc_41.param(__DSPOT_nValue_576);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv779__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv779__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv779__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv779__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv779__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv779__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv779__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv779__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv537() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod __DSPOT_invoc_5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv537__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv537__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv537__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv537__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv537__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv537__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv537__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv537__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv537__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv537__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv537__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv537__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv537__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__51)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv537__61 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv537__62 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJType o_testMain_rv537__64 = __DSPOT_invoc_5.type();
        Assert.assertTrue(((JPrimitiveType) (o_testMain_rv537__64)).isPrimitive());
        Assert.assertEquals("com.helger.jcodemodel.JPrimitiveType(void)", ((JPrimitiveType) (o_testMain_rv537__64)).toString());
        Assert.assertFalse(((JPrimitiveType) (o_testMain_rv537__64)).isArray());
        Assert.assertFalse(((JPrimitiveType) (o_testMain_rv537__64)).isError());
        Assert.assertFalse(((JPrimitiveType) (o_testMain_rv537__64)).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__24)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv537__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv537__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv537__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__51)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv537__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv537__62)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv912() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_747 = new boolean[]{ false, true, true };
        String __DSPOT_sName_746 = "y zNJo1Ouksq %9=__2u";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv912__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv912__7)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv912__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv912__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv912__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv912__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv912__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv912__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv912__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv912__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv912__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isReference());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv912__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv912__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv912__66 = __DSPOT_invoc_50.paramArray(__DSPOT_sName_746, __DSPOT_aValues_747);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__66)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv912__7)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv557() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_298 = '+';
        String __DSPOT_sName_297 = "q .Gl|?=xIp_Vly%}?c<";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv557__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv557__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv557__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv557__7)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv557__26 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__26)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv557__37 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv557__38 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__38)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv557__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv557__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv557__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv557__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv557__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv557__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv557__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__45)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv557__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv557__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv557__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv557__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv557__66 = __DSPOT_invoc_22.param(__DSPOT_sName_297, __DSPOT_cValue_298);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__66)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__66)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv557__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv557__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv557__7)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__26)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__26)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__38)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv557__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv557__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv557__44)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__45)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__53)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv557__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv557__64)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg260() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg260__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg260__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg260__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg260__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg260__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg260__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg260__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg260__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg260__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testMain_mg260__62 = cls.mods();
        Assert.assertEquals(1, ((int) (((JMods) (o_testMain_mg260__62)).getValue())));
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isStatic());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isDefault());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isAbstract());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isNative());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isSynchronized());
        Assert.assertFalse(((JMods) (o_testMain_mg260__62)).isStrictFP());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg260__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg260__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg260__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg260__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg260__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv734() throws JClassAlreadyExistsException {
        Class<?>[] __DSPOT_aValues_541 = new Class<?>[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv734__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv734__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv734__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv734__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv734__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv734__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv734__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv734__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv734__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv734__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv734__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv734__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv734__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv734__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv734__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv734__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv734__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv734__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_541);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv734__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv734__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv734__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv734__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv734__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv734__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv734__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv734__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg335() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg335__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg335__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg335__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg335__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg335__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg335__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg335__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg335__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg335__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg335__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg335__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg335__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg335__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg335__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        List<IJExpression> o_testMain_mg335__62 = ec1.args();
        Assert.assertTrue(o_testMain_mg335__62.isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg335__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg338() throws JClassAlreadyExistsException {
        JEnumConstant __DSPOT_o_102 = null;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg338__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg338__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg338__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg338__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg338__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg338__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg338__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg338__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg338__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg338__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg338__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg338__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg338__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg338__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg338__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg338__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg338__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg338__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg338__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testMain_mg338__63 = ec1.equals(__DSPOT_o_102);
        Assert.assertFalse(o_testMain_mg338__63);
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg338__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg338__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg338__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg338__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg338__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg338__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg338__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg338__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg414() throws JClassAlreadyExistsException {
        JEnumConstant[] __DSPOT_aValues_185 = new JEnumConstant[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg414__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg414__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg414__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg414__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg414__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg414__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg414__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg414__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg414__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg414__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg414__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg414__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg414__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg414__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg414__63 = arrayMember.params(__DSPOT_aValues_185);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__63)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg414__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg250() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg250__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg250__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg250__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg250__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg250__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg250__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg250__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg250__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg250__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg250__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg250__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg250__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg250__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg250__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg250__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg250__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg250__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg250__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg250__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        Map<String, JFieldVar> o_testMain_mg250__62 = cls.fields();
        Assert.assertFalse(o_testMain_mg250__62.isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg250__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg250__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg250__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg250__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg250__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg250__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg250__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg250__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv762() throws JClassAlreadyExistsException {
        int[] __DSPOT_aValues_564 = new int[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv762__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv762__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv762__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv762__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv762__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv762__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv762__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv762__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv762__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv762__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv762__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv762__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv762__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv762__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv762__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv762__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv762__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv762__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_564);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv762__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv762__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv762__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv762__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv762__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv762__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv762__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv762__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv982() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_841 = 0.7470151329661828;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv982__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv982__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv982__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv982__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv982__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv982__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv982__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv982__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv982__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv982__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv982__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv982__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv982__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isReference());
        JAnnotationUse __DSPOT_invoc_61 = myuse.param("value-value");
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv982__65 = __DSPOT_invoc_61.param(__DSPOT_dValue_841);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__65)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv982__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg472() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_247 = -381916448L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg472__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg472__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg472__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg472__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg472__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg472__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg472__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg472__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg472__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg472__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg472__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg472__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg472__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg472__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg472__63 = myuse.param(__DSPOT_nValue_247);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg472__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg331() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg331__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg331__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg331__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg331__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg331__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg331__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg331__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg331__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg331__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg331__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg331__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg331__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg331__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg331__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testMain_mg331__62 = ec.javadoc();
        Assert.assertTrue(o_testMain_mg331__62.isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg331__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv749() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_551 = 0.38170356F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv749__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv749__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv749__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv749__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv749__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv749__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv749__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv749__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv749__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv749__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv749__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv749__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv749__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv749__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv749__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv749__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv749__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv749__65 = __DSPOT_invoc_40.param(__DSPOT_fValue_551);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv749__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv749__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv749__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv749__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv749__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv749__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv749__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv749__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv867() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_684 = -24225;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv867__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv867__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv867__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv867__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv867__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv867__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv867__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv867__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv867__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv867__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv867__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv867__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv867__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv867__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv867__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv867__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv867__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv867__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv867__65 = __DSPOT_invoc_47.param(__DSPOT_nValue_684);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__65)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__65)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv867__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv867__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv867__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv867__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv867__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv867__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv867__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv867__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv725() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_532 = new boolean[]{ false };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv725__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv725__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv725__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv725__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv725__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv725__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv725__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv725__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv725__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv725__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv725__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv725__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv725__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv725__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv725__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv725__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv725__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv725__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_532);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv725__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv725__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv725__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv725__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv725__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv725__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv725__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv725__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv789() throws JClassAlreadyExistsException {
        double[] __DSPOT_aValues_586 = new double[]{ 0.02646382550184334, 0.4985876683769088, 0.6597852887539358, 0.6577300617992843 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv789__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv789__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv789__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv789__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv789__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv789__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv789__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv789__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv789__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv789__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv789__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv789__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv789__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv789__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv789__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv789__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv789__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv789__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_586);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv789__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv789__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv789__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv789__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv789__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv789__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv789__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv789__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv767() throws JClassAlreadyExistsException {
        short[] __DSPOT_aValues_569 = new short[]{ -3739 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv767__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv767__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv767__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv767__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv767__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv767__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv767__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv767__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv767__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv767__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv767__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv767__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv767__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv767__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_569);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__65)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv767__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg446() throws JClassAlreadyExistsException {
        Enum<?>[] __DSPOT_aValues_214 = new Enum<?>[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg446__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg446__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg446__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg446__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg446__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg446__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg446__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg446__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg446__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg446__63 = arrayMember2.params(__DSPOT_aValues_214);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__63)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg446__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg446__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg446__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg446__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg446__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg448() throws JClassAlreadyExistsException {
        long[] __DSPOT_aValues_216 = new long[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg448__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg448__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg448__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg448__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg448__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg448__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg448__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg448__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg448__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg448__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg448__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg448__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg448__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg448__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg448__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg448__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg448__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg448__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg448__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg448__63 = arrayMember2.params(__DSPOT_aValues_216);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg448__63)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg448__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg448__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg448__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg448__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg448__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg448__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg448__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg448__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg228() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg228__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg228__5)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg228__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg228__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg228__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg228__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg228__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg228__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg228__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg228__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg228__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg228__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg228__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg228__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        int o_testMain_mg228__62 = cm.countArtifacts();
        Assert.assertEquals(2, ((int) (o_testMain_mg228__62)));
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg228__5)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__21)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__33)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__41)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__46)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__59)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg309() throws JClassAlreadyExistsException {
        String __DSPOT_sName_90 = "8>3aX.)v8-E+,N[v<l2k";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg309__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg309__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg309__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg309__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg309__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg309__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg309__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg309__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg309__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg309__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg309__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg309__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg309__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg309__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg309__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg309__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg309__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg309__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg309__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testMain_mg309__63 = enumcls.containsField(__DSPOT_sName_90);
        Assert.assertFalse(o_testMain_mg309__63);
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg309__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg309__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg309__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg309__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg309__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg309__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg309__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg309__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg429() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_197 = 'p';
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg429__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg429__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg429__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg429__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg429__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg429__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg429__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg429__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg429__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg429__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg429__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg429__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg429__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg429__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg429__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg429__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg429__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg429__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg429__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg429__63 = arrayMember2.param(__DSPOT_cValue_197);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg429__63)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg429__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg429__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg429__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg429__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg429__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg429__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg429__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg429__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg440() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_208 = new IJExpression[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg440__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg440__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg440__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg440__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg440__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg440__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg440__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg440__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg440__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg440__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg440__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg440__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg440__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg440__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg440__63 = arrayMember2.params(__DSPOT_aValues_208);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__63)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg440__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_rv595() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_350 = 0.34609935F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_rv595__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_rv595__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv595__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv595__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_rv595__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isReference());
        JAnnotationUse __DSPOT_invoc_23 = use.param("value1", RetentionPolicy.RUNTIME);
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv595__36 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv595__37 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv595__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv595__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv595__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv595__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv595__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv595__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv595__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv595__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv595__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv595__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_rv595__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv595__65 = __DSPOT_invoc_23.param(__DSPOT_fValue_350);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__65)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__65)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_rv595__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_rv595__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_rv595__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__22)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__37)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv595__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv595__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv595__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__44)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__49)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__52)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv595__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv595__63)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg463() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_230 = true;
        String __DSPOT_sName_229 = "3bSwN_qZeEg/gcm:Ca6s";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg463__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg463__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg463__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg463__7)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg463__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg463__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg463__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg463__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg463__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg463__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg463__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg463__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg463__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg463__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg463__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg463__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg463__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__51)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg463__61 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg463__62 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg463__64 = myuse.param(__DSPOT_sName_229, __DSPOT_bValue_230);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__64)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__64)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg463__7)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg463__7)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg463__7)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__24)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__24)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__36)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg463__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg463__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg463__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__43)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__48)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__51)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg463__62)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg463__62)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg268() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_34 = 68;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg268__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg268__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg268__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg268__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg268__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg268__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg268__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg268__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg268__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg268__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg268__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg268__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg268__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg268__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg268__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg268__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg268__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg268__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg268__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg268__63 = use.param(__DSPOT_nValue_34);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__63)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__63)).getAnnotationClass())).isReference());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg268__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg268__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg268__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg268__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg268__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg268__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg268__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg268__61)).getAnnotationClass())).isReference());
    }

    @Test(timeout = 10000)
    public void testMain_mg443() throws JClassAlreadyExistsException {
        float[] __DSPOT_aValues_211 = new float[]{ 0.5302585F };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        JMethod o_testMain_mg443__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg443__6)).getThrows().isEmpty());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        JAnnotationUse o_testMain_mg443__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg443__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isReference());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg443__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg443__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg443__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg443__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg443__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg443__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isReference());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg443__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg443__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isReference());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg443__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isReference());
        JAnnotationUse o_testMain_mg443__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isReference());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg443__63 = arrayMember2.params(__DSPOT_aValues_211);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__63)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).isConstructor());
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain_mg443__6)).getThrows().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__22)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__23)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isReference());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__34)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__35)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__42)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__47)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__50)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__60)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__61)).hasAnnotationMembers());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isAbstract());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isParameterized());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isError());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isReference());
    }
}

