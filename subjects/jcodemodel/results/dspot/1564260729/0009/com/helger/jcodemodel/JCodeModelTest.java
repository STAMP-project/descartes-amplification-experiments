package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;


public final class JCodeModelTest {
    @Test(timeout = 10000)
    public void testEmptyNarrowed() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_literalMutationString19_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
            final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
            jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "q2 5[g", JExpr._new(hashMap));
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testEmptyNarrowed_literalMutationString19 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'q2 5[g\'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_rv96_failAssert0() throws JClassAlreadyExistsException {
        try {
            String __DSPOT_sNewName_39 = "U4ryn<3,/?bI!ElJH!D*";
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
            final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
            JFieldVar __DSPOT_invoc_8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
            CodeModelTestsHelper.parseCodeModel(cm);
            __DSPOT_invoc_8.name(__DSPOT_sNewName_39);
            org.junit.Assert.fail("testEmptyNarrowed_rv96 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg47_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nMods_20 = -1073873590;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
            final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
            jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
            CodeModelTestsHelper.parseCodeModel(cm);
            jClass.constructor(__DSPOT_nMods_20);
            org.junit.Assert.fail("testEmptyNarrowed_mg47 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_add5() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JNarrowedClass o_testEmptyNarrowed_add5__8 = cm.ref(Map.class).narrow(String.class);
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isArray());
        Assert.assertFalse(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.Map<java.lang.String>)", ((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).toString());
        Assert.assertNull(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isReference());
        JFieldVar o_testEmptyNarrowed_add5__10 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_add5__10)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isArray());
        Assert.assertFalse(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.Map<java.lang.String>)", ((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).toString());
        Assert.assertNull(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_add5__8)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_add5__10)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_add7() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JInvocation o_testEmptyNarrowed_add7__8 = JExpr._new(hashMap);
        Assert.assertEquals(1848048006, ((int) (((JInvocation) (o_testEmptyNarrowed_add7__8)).hashCode())));
        Assert.assertTrue(((JInvocation) (o_testEmptyNarrowed_add7__8)).isConstructor());
        JFieldVar o_testEmptyNarrowed_add7__9 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_add7__9)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(1848048006, ((int) (((JInvocation) (o_testEmptyNarrowed_add7__8)).hashCode())));
        Assert.assertTrue(((JInvocation) (o_testEmptyNarrowed_add7__8)).isConstructor());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_add7__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg45() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg45__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg45__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testEmptyNarrowed_mg45__13 = jClass.annotations();
        Assert.assertTrue(o_testEmptyNarrowed_mg45__13.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg45__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg66() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg66__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg66__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JArrayClass o_testEmptyNarrowed_mg66__13 = hashMap.array();
        Assert.assertFalse(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).isInterface());
        Assert.assertTrue(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).isArray());
        Assert.assertFalse(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).isAbstract());
        Assert.assertEquals("com.helger.jcodemodel.JArrayClass(java.util.HashMap<>[])", ((JArrayClass) (o_testEmptyNarrowed_mg66__13)).toString());
        Assert.assertTrue(((Collection) (((JArrayClass) (o_testEmptyNarrowed_mg66__13)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).getPrimitiveType());
        Assert.assertFalse(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).isParameterized());
        Assert.assertTrue(((Collection) (((JArrayClass) (o_testEmptyNarrowed_mg66__13)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).isPrimitive());
        Assert.assertFalse(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).isError());
        Assert.assertTrue(((JArrayClass) (o_testEmptyNarrowed_mg66__13)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg66__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_rv95() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar __DSPOT_invoc_8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testEmptyNarrowed_rv95__15 = __DSPOT_invoc_8.javadoc();
        Assert.assertTrue(o_testEmptyNarrowed_rv95__15.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg54() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg54__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg54__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Map<String, JFieldVar> o_testEmptyNarrowed_mg54__13 = jClass.fields();
        Assert.assertFalse(o_testEmptyNarrowed_mg54__13.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg54__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg32() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg32__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg32__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        int o_testEmptyNarrowed_mg32__13 = cm.countArtifacts();
        Assert.assertEquals(2, ((int) (o_testEmptyNarrowed_mg32__13)));
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg32__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg76() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg76__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg76__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testEmptyNarrowed_mg76__13 = hashMap.narrowAny();
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).isArray());
        Assert.assertFalse(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<? extends java.lang.Object>)", ((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).toString());
        Assert.assertNull(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_mg76__13)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg76__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg42() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg42__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg42__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testEmptyNarrowed_mg42__13 = jClass._extends();
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).isParameterized());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).isError());
        Assert.assertTrue(((JReferencedClass) (o_testEmptyNarrowed_mg42__13)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg42__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg31() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg31__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg31__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testEmptyNarrowed_mg31__13 = cm.buildsErrorTypeRefs();
        Assert.assertFalse(o_testEmptyNarrowed_mg31__13);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg31__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg64() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg64__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg64__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testEmptyNarrowed_mg64__13 = jClass.mods();
        Assert.assertEquals(1, ((int) (((JMods) (o_testEmptyNarrowed_mg64__13)).getValue())));
        Assert.assertFalse(((JMods) (o_testEmptyNarrowed_mg64__13)).isStatic());
        Assert.assertFalse(((JMods) (o_testEmptyNarrowed_mg64__13)).isDefault());
        Assert.assertFalse(((JMods) (o_testEmptyNarrowed_mg64__13)).isAbstract());
        Assert.assertFalse(((JMods) (o_testEmptyNarrowed_mg64__13)).isNative());
        Assert.assertFalse(((JMods) (o_testEmptyNarrowed_mg64__13)).isSynchronized());
        Assert.assertFalse(((JMods) (o_testEmptyNarrowed_mg64__13)).isStrictFP());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg64__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg53() throws JClassAlreadyExistsException {
        String __DSPOT_sName_24 = "y_V1a;?h(*fl<xJgehga";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg53__9 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg53__9)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JEnumConstant o_testEmptyNarrowed_mg53__14 = jClass.enumConstant(__DSPOT_sName_24);
        Assert.assertEquals(1737529241, ((int) (((JEnumConstant) (o_testEmptyNarrowed_mg53__14)).hashCode())));
        Assert.assertEquals("EmptyNarrowed.y_V1a;?h(*fl<xJgehga", ((JEnumConstant) (o_testEmptyNarrowed_mg53__14)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testEmptyNarrowed_mg53__14)).hasArgs());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg53__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg85() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg85__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg85__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JTypeWildcard o_testEmptyNarrowed_mg85__13 = hashMap.wildcardExtends();
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.util.HashMap<>)", ((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).getPrimitiveType());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).isParameterized());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).isPrimitive());
        Assert.assertTrue(((JTypeWildcard) (o_testEmptyNarrowed_mg85__13)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg85__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg73() throws JClassAlreadyExistsException {
        AbstractJClass[] __DSPOT_aClazz_32 = new AbstractJClass[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg73__9 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg73__9)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testEmptyNarrowed_mg73__14 = hashMap.narrow(__DSPOT_aClazz_32);
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).toString());
        Assert.assertNull(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (o_testEmptyNarrowed_mg73__14)).isReference());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg73__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg50() throws JClassAlreadyExistsException {
        String __DSPOT_sName_21 = "&h4]]s%=])JWOM_4gdsL";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg50__9 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg50__9)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testEmptyNarrowed_mg50__14 = jClass.containsField(__DSPOT_sName_21);
        Assert.assertFalse(o_testEmptyNarrowed_mg50__14);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg50__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg75_failAssert0() throws JClassAlreadyExistsException {
        try {
            List<? extends AbstractJClass> __DSPOT_aClazz_34 = Collections.emptyList();
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
            final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
            jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
            CodeModelTestsHelper.parseCodeModel(cm);
            hashMap.narrow(__DSPOT_aClazz_34);
            org.junit.Assert.fail("testEmptyNarrowed_mg75 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be false but it is not: aBasis may not be a narrowed class: com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg59() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg59__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg59__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        jClass.hide();
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg59__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg58() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg58__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg58__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testEmptyNarrowed_mg58__13 = jClass.headerComment();
        Assert.assertTrue(o_testEmptyNarrowed_mg58__13.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertTrue(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg58__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg35_mg19339_failAssert0() throws JClassAlreadyExistsException {
        try {
            String __DSPOT_sName_16 = "&q_{{l>^r@)C1RND7C-6";
            String __DSPOT_sMessage_15 = "Tx>DODA!L#vK5WR{oE1L";
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
            final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
            JFieldVar o_testEmptyNarrowed_mg35__10 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
            CodeModelTestsHelper.parseCodeModel(cm);
            JErrorClass o_testEmptyNarrowed_mg35__15 = cm.errorClass(__DSPOT_sMessage_15, __DSPOT_sName_16);
            o_testEmptyNarrowed_mg35__15._implements();
            org.junit.Assert.fail("testEmptyNarrowed_mg35_mg19339 should have thrown JErrorClassUsedException");
        } catch (JErrorClassUsedException expected) {
            Assert.assertEquals("Tx>DODA!L#vK5WR{oE1L", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg86_mg8852() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        JFieldVar o_testEmptyNarrowed_mg86__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg86__8)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JTypeWildcard o_testEmptyNarrowed_mg86__13 = hashMap.wildcardSuper();
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? super java.util.HashMap<>)", ((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isParameterized());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isPrimitive());
        Assert.assertTrue(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isReference());
        String o_testEmptyNarrowed_mg86_mg8852__18 = o_testEmptyNarrowed_mg86__13.name();
        Assert.assertEquals("? super HashMap<>", o_testEmptyNarrowed_mg86_mg8852__18);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (jClass)).isHidden());
        Assert.assertFalse(((JDefinedClass) (jClass)).hasHeaderComment());
        Assert.assertTrue(((JDefinedClass) (jClass)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (jClass)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (jClass)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPackage());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnonymous());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (jClass)).getOuter())).isClass());
        Assert.assertTrue(((JDefinedClass) (jClass)).isClass());
        Assert.assertFalse(((JDefinedClass) (jClass)).isAnnotationTypeDeclaration());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(EmptyNarrowed)", ((JDefinedClass) (jClass)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (jClass)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (jClass)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (jClass)).isParameterized());
        Assert.assertFalse(((JDefinedClass) (jClass)).isArray());
        Assert.assertFalse(((JDefinedClass) (jClass)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (jClass)).isError());
        Assert.assertTrue(((JDefinedClass) (jClass)).isReference());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isInterface());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isArray());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isAbstract());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JNarrowedClass(java.util.HashMap<>)", ((JNarrowedClass) (hashMap)).toString());
        Assert.assertNull(((JNarrowedClass) (hashMap)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JNarrowedClass) (hashMap)).getAllInnerClasses())).isEmpty());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isParameterized());
        Assert.assertFalse(((JNarrowedClass) (hashMap)).isPrimitive());
        Assert.assertTrue(((JNarrowedClass) (hashMap)).isReference());
        Assert.assertEquals(-1853014235, ((int) (((JFieldVar) (o_testEmptyNarrowed_mg86__8)).hashCode())));
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? super java.util.HashMap<>)", ((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isParameterized());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isPrimitive());
        Assert.assertTrue(((JTypeWildcard) (o_testEmptyNarrowed_mg86__13)).isReference());
    }

    @Test(timeout = 10000)
    public void testEmptyNarrowed_mg39_mg10549_failAssert0() throws JClassAlreadyExistsException {
        try {
            IJFormatter __DSPOT_f_2257 = null;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass jClass = cm._class("EmptyNarrowed", EClassType.INTERFACE);
            final AbstractJClass hashMap = cm.ref(HashMap.class).narrowEmpty();
            JFieldVar o_testEmptyNarrowed_mg39__8 = jClass.field(JMod.PRIVATE, cm.ref(Map.class).narrow(String.class), "strMap", JExpr._new(hashMap));
            CodeModelTestsHelper.parseCodeModel(cm);
            JPackage o_testEmptyNarrowed_mg39__13 = cm.rootPackage();
            o_testEmptyNarrowed_mg39__13.generate(__DSPOT_f_2257);
            org.junit.Assert.fail("testEmptyNarrowed_mg39_mg10549 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }
}

