package com.helger.jcodemodel;


public final class JAnnotationUseTest {
    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_literalMutationString22_failAssert0() throws java.lang.Exception {
        try {
            final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
            final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
            final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
            m.annotate(java.lang.Deprecated.class);
            final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "");
            field.annotate(java.lang.Deprecated.class);
            com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testOnMethodAndField_literalMutationString22 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException expected) {
            org.junit.Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'\'", expected.getMessage());
        }
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg47() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg47__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg47__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        java.util.Collection<com.helger.jcodemodel.JAnnotationUse> o_testOnMethodAndField_mg47__12 = cls.annotations();
        org.junit.Assert.assertTrue(o_testOnMethodAndField_mg47__12.isEmpty());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg47__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv150() throws java.lang.Exception {
        char __DSPOT_cValue_102 = 'B';
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv150__8 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_10 = field.annotate(java.lang.Deprecated.class);
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv150__15 = __DSPOT_invoc_10.param(__DSPOT_cValue_102);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__15)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv150__8)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg43() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg43__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg43__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.AbstractJClass o_testOnMethodAndField_mg43__12 = cm.wildcard();
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).isInterface());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).isError());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).isPrimitive());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JTypeWildcard) (o_testOnMethodAndField_mg43__12)).isReference());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg43__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg44() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg44__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg44__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.AbstractJClass o_testOnMethodAndField_mg44__12 = cls._extends();
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JReferencedClass) (o_testOnMethodAndField_mg44__12)).isReference());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg44__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg66() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg66__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg66__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JMods o_testOnMethodAndField_mg66__12 = cls.mods();
        org.junit.Assert.assertEquals(1, ((int) (((com.helger.jcodemodel.JMods) (o_testOnMethodAndField_mg66__12)).getValue())));
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMods) (o_testOnMethodAndField_mg66__12)).isStatic());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMods) (o_testOnMethodAndField_mg66__12)).isDefault());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMods) (o_testOnMethodAndField_mg66__12)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMods) (o_testOnMethodAndField_mg66__12)).isNative());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMods) (o_testOnMethodAndField_mg66__12)).isSynchronized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMods) (o_testOnMethodAndField_mg66__12)).isStrictFP());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg66__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg89() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg89__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg89__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JDocComment o_testOnMethodAndField_mg89__12 = field.javadoc();
        org.junit.Assert.assertTrue(o_testOnMethodAndField_mg89__12.isEmpty());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        ((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter().getPackage().isUnnamed();
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg89__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg68() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg68__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg68__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        java.util.Collection<com.helger.jcodemodel.JAnnotationUse> o_testOnMethodAndField_mg68__12 = m.annotations();
        org.junit.Assert.assertFalse(o_testOnMethodAndField_mg68__12.isEmpty());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg68__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg61() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg61__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg61__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        cls.hide();
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg61__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg49_failAssert0() throws java.lang.Exception {
        try {
            int __DSPOT_nMods_20 = 455044136;
            final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
            final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
            final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
            m.annotate(java.lang.Deprecated.class);
            final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
            field.annotate(java.lang.Deprecated.class);
            com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
            cls.constructor(__DSPOT_nMods_20);
            org.junit.Assert.fail("testOnMethodAndField_mg49 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException expected) {
        }
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg84() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg84__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg84__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.AbstractJType o_testOnMethodAndField_mg84__12 = m.type();
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPrimitiveType) (o_testOnMethodAndField_mg84__12)).isPrimitive());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JPrimitiveType(void)", ((com.helger.jcodemodel.JPrimitiveType) (o_testOnMethodAndField_mg84__12)).toString());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPrimitiveType) (o_testOnMethodAndField_mg84__12)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPrimitiveType) (o_testOnMethodAndField_mg84__12)).isError());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPrimitiveType) (o_testOnMethodAndField_mg84__12)).isReference());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg84__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_add4_failAssert0() throws java.lang.Exception {
        try {
            final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
            final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
            final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
            m.annotate(java.lang.Deprecated.class);
            cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
            final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
            field.annotate(java.lang.Deprecated.class);
            com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testOnMethodAndField_add4 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException expected) {
            org.junit.Assert.assertEquals("The expression must be false but it is not: trying to create the same field twice: y", expected.getMessage());
        }
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv126() throws java.lang.Exception {
        char[] __DSPOT_aValues_73 = new char[]{ '3', 'P', 'e', '#' };
        java.lang.String __DSPOT_sName_72 = "C*$S oY.>c^U!$Cz2lvL";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_7 = m.annotate(java.lang.Deprecated.class);
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv126__14 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv126__16 = __DSPOT_invoc_7.paramArray(__DSPOT_sName_72, __DSPOT_aValues_73);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv126__14)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv120() throws java.lang.Exception {
        short __DSPOT_nValue_64 = -13637;
        java.lang.String __DSPOT_sName_63 = "JLZTgm;JxP,_&`(8:?%1";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_7 = m.annotate(java.lang.Deprecated.class);
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv120__14 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv120__16 = __DSPOT_invoc_7.param(__DSPOT_sName_63, __DSPOT_nValue_64);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv120__14)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv162() throws java.lang.Exception {
        long __DSPOT_nValue_122 = -585429534L;
        java.lang.String __DSPOT_sName_121 = "zx|999)  +jNx$d:PtF]";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv162__9 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_10 = field.annotate(java.lang.Deprecated.class);
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv162__16 = __DSPOT_invoc_10.param(__DSPOT_sName_121, __DSPOT_nValue_122);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv162__9)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv124() throws java.lang.Exception {
        boolean[] __DSPOT_aValues_69 = new boolean[]{ false, false };
        java.lang.String __DSPOT_sName_68 = "L]DUhLoAf#)/AY^(qL7}";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_7 = m.annotate(java.lang.Deprecated.class);
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv124__14 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv124__16 = __DSPOT_invoc_7.paramArray(__DSPOT_sName_68, __DSPOT_aValues_69);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv124__14)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv123() throws java.lang.Exception {
        java.lang.String __DSPOT_sName_67 = "C;G<+|h=gdwL%G{#C.D%";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_7 = m.annotate(java.lang.Deprecated.class);
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv123__13 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationArrayMember o_testOnMethodAndField_rv123__15 = __DSPOT_invoc_7.paramArray(__DSPOT_sName_67);
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationArrayMember) (o_testOnMethodAndField_rv123__15)).getAllAnnotations().isEmpty());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv123__13)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndFieldnull93_failAssert0() throws java.lang.Exception {
        try {
            final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
            final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
            final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, null);
            m.annotate(java.lang.Deprecated.class);
            final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
            field.annotate(java.lang.Deprecated.class);
            com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testOnMethodAndFieldnull93 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException expected) {
            org.junit.Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg33() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg33__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg33__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testOnMethodAndField_mg33__12 = cm.buildsErrorTypeRefs();
        org.junit.Assert.assertFalse(o_testOnMethodAndField_mg33__12);
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg33__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg55() throws java.lang.Exception {
        java.lang.String __DSPOT_sName_24 = "F&0xT!&b-W-(y_V1a;?h";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg55__8 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg55__11 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JEnumConstant o_testOnMethodAndField_mg55__13 = cls.enumConstant(__DSPOT_sName_24);
        org.junit.Assert.assertEquals(198886022, ((int) (((com.helger.jcodemodel.JEnumConstant) (o_testOnMethodAndField_mg55__13)).hashCode())));
        org.junit.Assert.assertEquals("Test.F&0xT!&b-W-(y_V1a;?h", ((com.helger.jcodemodel.JEnumConstant) (o_testOnMethodAndField_mg55__13)).getName());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JEnumConstant) (o_testOnMethodAndField_mg55__13)).hasArgs());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__8)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg55__11)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg56() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg56__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg56__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        java.util.Map<java.lang.String, com.helger.jcodemodel.JFieldVar> o_testOnMethodAndField_mg56__12 = cls.fields();
        org.junit.Assert.assertFalse(o_testOnMethodAndField_mg56__12.isEmpty());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg56__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg34() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg34__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg34__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        int o_testOnMethodAndField_mg34__12 = cm.countArtifacts();
        org.junit.Assert.assertEquals(2, ((int) (o_testOnMethodAndField_mg34__12)));
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg34__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg51() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg51__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg51__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testOnMethodAndField_mg51__12 = cls.containsErrorTypes();
        org.junit.Assert.assertFalse(o_testOnMethodAndField_mg51__12);
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg51__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg52() throws java.lang.Exception {
        java.lang.String __DSPOT_sName_21 = "y/=u eShD9P/&h4]]s%=";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg52__8 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg52__11 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testOnMethodAndField_mg52__13 = cls.containsField(__DSPOT_sName_21);
        org.junit.Assert.assertFalse(o_testOnMethodAndField_mg52__13);
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__8)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg52__11)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg82_failAssert0() throws java.lang.Exception {
        try {
            int __DSPOT_nIndex_32 = -1975003510;
            final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
            final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
            final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
            m.annotate(java.lang.Deprecated.class);
            final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
            field.annotate(java.lang.Deprecated.class);
            com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
            m.paramAtIndex(__DSPOT_nIndex_32);
            org.junit.Assert.fail("testOnMethodAndField_mg82 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException expected) {
            org.junit.Assert.assertEquals("Index -1975003510 out of bounds for length 0", expected.getMessage());
        }
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv116() throws java.lang.Exception {
        float __DSPOT_fValue_56 = 0.54563624F;
        java.lang.String __DSPOT_sName_55 = "}%g/mS6TE0=.J($16qvQ";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_7 = m.annotate(java.lang.Deprecated.class);
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv116__14 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv116__16 = __DSPOT_invoc_7.param(__DSPOT_sName_55, __DSPOT_fValue_56);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv116__14)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg60() throws java.lang.Exception {
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg60__7 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_mg60__10 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JDocComment o_testOnMethodAndField_mg60__12 = cls.headerComment();
        org.junit.Assert.assertTrue(o_testOnMethodAndField_mg60__12.isEmpty());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__7)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_mg60__10)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv115() throws java.lang.Exception {
        double __DSPOT_dValue_54 = 0.9121541831557147;
        java.lang.String __DSPOT_sName_53 = "&W_#*uaYP&<w$N`nJW,f";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_7 = m.annotate(java.lang.Deprecated.class);
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv115__14 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv115__16 = __DSPOT_invoc_7.param(__DSPOT_sName_53, __DSPOT_dValue_54);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv115__14)).hasAnnotationMembers());
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_mg90_failAssert0() throws java.lang.Exception {
        try {
            java.lang.String __DSPOT_sNewName_35 = "?!rIXp5pNO|oPq,r5>K`";
            final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
            final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
            final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
            m.annotate(java.lang.Deprecated.class);
            final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
            field.annotate(java.lang.Deprecated.class);
            com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
            field.name(__DSPOT_sNewName_35);
            org.junit.Assert.fail("testOnMethodAndField_mg90 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException expected) {
            org.junit.Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'?!rIXp5pNO|oPq,r5>K`\'", expected.getMessage());
        }
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv156() throws java.lang.Exception {
        byte __DSPOT_nValue_110 = 119;
        java.lang.String __DSPOT_sName_109 = "4gfZk]Jpa[bR-2-=M,.G";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv156__9 = m.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).hasAnnotationMembers());
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_10 = field.annotate(java.lang.Deprecated.class);
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv156__16 = __DSPOT_invoc_10.param(__DSPOT_sName_109, __DSPOT_nValue_110);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv156__9)).hasAnnotationMembers());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
    }

    @org.junit.Test(timeout = 10000)
    public void testOnMethodAndField_rv112() throws java.lang.Exception {
        boolean __DSPOT_bValue_48 = true;
        java.lang.String __DSPOT_sName_47 = "6Iw9b>c1NAnIwcz&T&5+";
        final com.helger.jcodemodel.JCodeModel cm = new com.helger.jcodemodel.JCodeModel();
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        final com.helger.jcodemodel.JDefinedClass cls = cm._class("Test");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        final com.helger.jcodemodel.JMethod m = cls.method(com.helger.jcodemodel.JMod.PUBLIC, cm.VOID, "foo");
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        com.helger.jcodemodel.JAnnotationUse __DSPOT_invoc_7 = m.annotate(java.lang.Deprecated.class);
        final com.helger.jcodemodel.JFieldVar field = cls.field(com.helger.jcodemodel.JMod.PRIVATE, cm.DOUBLE, "y");
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv112__14 = field.annotate(java.lang.Deprecated.class);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).hasAnnotationMembers());
        com.helger.jcodemodel.util.CodeModelTestsHelper.parseCodeModel(cm);
        com.helger.jcodemodel.JAnnotationUse o_testOnMethodAndField_rv112__16 = __DSPOT_invoc_7.param(__DSPOT_sName_47, __DSPOT_bValue_48);
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationClass())).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__16)).hasAnnotationMembers());
        org.junit.Assert.assertFalse(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllPackages())).isEmpty());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingCharset());
        org.junit.Assert.assertEquals("\n", ((com.helger.jcodemodel.JCodeModel) (cm)).getBuildingNewLine());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAbstract());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isHidden());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).hasHeaderComment());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isInterface());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPackage());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JPackage) (((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isPackage());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.IJClassContainer) (((com.helger.jcodemodel.JDefinedClass) (cls)).getOuter())).isClass());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isAnonymous());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isClass());
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((com.helger.jcodemodel.JDefinedClass) (cls)).toString());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.JDefinedClass) (cls)).getPrimitiveType());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JDefinedClass) (cls)).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JDefinedClass) (cls)).isReference());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).isConstructor());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JMethod) (m)).getThrows().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JMethod) (m)).hasVarArgs());
        org.junit.Assert.assertEquals(-961000909, ((int) (((com.helger.jcodemodel.JFieldVar) (field)).hashCode())));
        org.junit.Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Deprecated)", ((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).toString());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isInterface());
        org.junit.Assert.assertTrue(((java.util.Collection) (((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).getTypeParameters())).isEmpty());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isAbstract());
        org.junit.Assert.assertNull(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).getPrimitiveType());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isParameterized());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isArray());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isPrimitive());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isError());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.AbstractJClass) (((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationClass())).isReference());
        org.junit.Assert.assertTrue(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).getAnnotationMembers().isEmpty());
        org.junit.Assert.assertFalse(((com.helger.jcodemodel.JAnnotationUse) (o_testOnMethodAndField_rv112__14)).hasAnnotationMembers());
    }
}

